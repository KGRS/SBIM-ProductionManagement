/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Transactions;

import static MainFiles.IndexPage.userPrivilege;
import db.ConnectSql;
import functions.ValidateFields;
import java.awt.HeadlessException;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Ravindu
 */
public class UserPrivilege extends javax.swing.JInternalFrame {

    private final String select = "--Select--";
    private final String spliter = "--";
    private final DefaultTableModel model_StudentTable;
    private final String projectPath = System.getProperty("user.dir");

    public UserPrivilege() {
        initComponents();
        model_StudentTable = (DefaultTableModel) tableViewDetails.getModel();
        LoadStudents();
        loadBatchesToCombo();
        rBtnCode.setSelected(true);

        ImageIcon DefaultBackGround = new ImageIcon(projectPath + "/pictures/InternalFrameIcons/DataFiles/student.jpg");
        labelIcon.setIcon(DefaultBackGround);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGrup_yesNo = new javax.swing.ButtonGroup();
        buttonGroup1 = new javax.swing.ButtonGroup();
        panel1 = new javax.swing.JPanel();
        lbl_category = new javax.swing.JLabel();
        txtStudentID = new javax.swing.JTextField();
        txtFirstName = new javax.swing.JTextField();
        btnRegister = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        lbl_description = new javax.swing.JLabel();
        lbl_subAccount = new javax.swing.JLabel();
        btnExit = new javax.swing.JButton();
        rBtnCode = new javax.swing.JRadioButton();
        rBtnName = new javax.swing.JRadioButton();
        lbl_accountType = new javax.swing.JLabel();
        cmbBatchCode = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableViewDetails = new javax.swing.JTable();
        txtSearch = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        lbl_accountType1 = new javax.swing.JLabel();
        txtNameWithInitials = new javax.swing.JTextField();
        txtSurName = new javax.swing.JTextField();
        lbl_accountType2 = new javax.swing.JLabel();
        lbl_accountType3 = new javax.swing.JLabel();
        lbl_accountType4 = new javax.swing.JLabel();
        lbl_accountType5 = new javax.swing.JLabel();
        txtContactLand = new javax.swing.JTextField();
        txtContactMobile = new javax.swing.JTextField();
        txtEmail = new javax.swing.JTextField();
        lbl_accountType6 = new javax.swing.JLabel();
        cmbActive = new javax.swing.JComboBox();
        Fax = new javax.swing.JLabel();
        btnRegDate = new net.sourceforge.jcalendarbutton.JCalendarButton();
        txtLastName = new javax.swing.JTextField();
        labelIcon = new javax.swing.JLabel();
        lbl_description1 = new javax.swing.JLabel();

        setIconifiable(true);
        setTitle("Unregister Student");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameIconified(evt);
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        panel1.setBackground(new java.awt.Color(255, 255, 255));
        panel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.TRAILING, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Calibri", 1, 14), new java.awt.Color(153, 153, 153))); // NOI18N
        panel1.setForeground(new java.awt.Color(255, 255, 255));
        panel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panel1MouseClicked(evt);
            }
        });
        panel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lbl_category.setForeground(new java.awt.Color(102, 102, 102));
        lbl_category.setText("Student ID *");
        panel1.add(lbl_category, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 60, 80, 20));

        txtStudentID.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtStudentIDFocusGained(evt);
            }
        });
        txtStudentID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtStudentIDKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtStudentIDKeyReleased(evt);
            }
        });
        panel1.add(txtStudentID, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 60, 250, 20));

        txtFirstName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtFirstNameFocusGained(evt);
            }
        });
        txtFirstName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtFirstNameKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtFirstNameKeyReleased(evt);
            }
        });
        panel1.add(txtFirstName, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 100, 130, 20));

        btnRegister.setMnemonic('s');
        btnRegister.setText("Register");
        btnRegister.setActionCommand("Delete");
        btnRegister.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegisterActionPerformed(evt);
            }
        });
        btnRegister.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnRegisterKeyPressed(evt);
            }
        });
        panel1.add(btnRegister, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 490, 80, -1));

        btnDelete.setMnemonic('d');
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        btnDelete.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnDeleteKeyPressed(evt);
            }
        });
        panel1.add(btnDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 490, 80, -1));

        lbl_description.setForeground(new java.awt.Color(102, 102, 102));
        lbl_description.setText("Last name *");
        panel1.add(lbl_description, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 100, 70, 20));

        lbl_subAccount.setForeground(new java.awt.Color(102, 102, 102));
        lbl_subAccount.setText("Search unregistered student by");
        panel1.add(lbl_subAccount, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 160, 20));

        btnExit.setMnemonic('e');
        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });
        btnExit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnExitKeyPressed(evt);
            }
        });
        panel1.add(btnExit, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 490, 80, -1));

        rBtnCode.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(rBtnCode);
        rBtnCode.setFont(new java.awt.Font("Calibri", 0, 11)); // NOI18N
        rBtnCode.setText("First");
        rBtnCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rBtnCodeActionPerformed(evt);
            }
        });
        panel1.add(rBtnCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 20, 50, -1));

        rBtnName.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(rBtnName);
        rBtnName.setFont(new java.awt.Font("Calibri", 0, 11)); // NOI18N
        rBtnName.setText("Last");
        rBtnName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rBtnNameActionPerformed(evt);
            }
        });
        rBtnName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                rBtnNameKeyPressed(evt);
            }
        });
        panel1.add(rBtnName, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 20, 60, -1));

        lbl_accountType.setForeground(new java.awt.Color(102, 102, 102));
        lbl_accountType.setText("Active *");
        panel1.add(lbl_accountType, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 420, 90, 20));

        cmbBatchCode.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Select--" }));
        cmbBatchCode.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                cmbBatchCodePopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        cmbBatchCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmbBatchCodeKeyPressed(evt);
            }
        });
        panel1.add(cmbBatchCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 220, 250, 20));

        tableViewDetails.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "First Name", "Last Name", "Name in initial"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableViewDetails.getTableHeader().setReorderingAllowed(false);
        tableViewDetails.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableViewDetailsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableViewDetails);

        panel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, -1, 450));

        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
        });
        panel1.add(txtSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 20, 170, -1));
        panel1.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 468, 440, -1));

        lbl_accountType1.setForeground(new java.awt.Color(102, 102, 102));
        lbl_accountType1.setText("Sur name *");
        panel1.add(lbl_accountType1, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 140, 80, 20));

        txtNameWithInitials.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtNameWithInitialsKeyPressed(evt);
            }
        });
        panel1.add(txtNameWithInitials, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 180, 350, -1));

        txtSurName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtSurNameKeyPressed(evt);
            }
        });
        panel1.add(txtSurName, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 140, 350, -1));

        lbl_accountType2.setForeground(new java.awt.Color(102, 102, 102));
        lbl_accountType2.setText("Name with initial");
        panel1.add(lbl_accountType2, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 180, 90, 20));

        lbl_accountType3.setForeground(new java.awt.Color(102, 102, 102));
        lbl_accountType3.setText("Batch code *");
        panel1.add(lbl_accountType3, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 220, 90, 20));

        lbl_accountType4.setForeground(new java.awt.Color(102, 102, 102));
        lbl_accountType4.setText("Contact land");
        panel1.add(lbl_accountType4, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 300, 80, 20));

        lbl_accountType5.setForeground(new java.awt.Color(102, 102, 102));
        lbl_accountType5.setText("Contact mobile");
        panel1.add(lbl_accountType5, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 340, 90, 20));

        txtContactLand.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtContactLandKeyPressed(evt);
            }
        });
        panel1.add(txtContactLand, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 300, 250, -1));

        txtContactMobile.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtContactMobileKeyPressed(evt);
            }
        });
        panel1.add(txtContactMobile, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 340, 250, -1));

        txtEmail.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtEmailKeyPressed(evt);
            }
        });
        panel1.add(txtEmail, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 260, 250, -1));

        lbl_accountType6.setForeground(new java.awt.Color(102, 102, 102));
        lbl_accountType6.setText("E-mail  @ *");
        panel1.add(lbl_accountType6, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 260, 80, 20));

        cmbActive.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Yes", "No" }));
        cmbActive.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmbActiveKeyPressed(evt);
            }
        });
        panel1.add(cmbActive, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 420, 250, -1));

        Fax.setForeground(new java.awt.Color(102, 102, 102));
        Fax.setText("Register date *");
        panel1.add(Fax, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 380, 90, 20));

        btnRegDate.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                btnRegDatePropertyChange(evt);
            }
        });
        panel1.add(btnRegDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 380, 130, -1));
        panel1.add(txtLastName, new org.netbeans.lib.awtextra.AbsoluteConstraints(819, 100, 130, -1));
        panel1.add(labelIcon, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 4, 410, 530));

        lbl_description1.setForeground(new java.awt.Color(102, 102, 102));
        lbl_description1.setText("First name *");
        panel1.add(lbl_description1, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 100, 90, 20));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel1, javax.swing.GroupLayout.DEFAULT_SIZE, 976, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel1, javax.swing.GroupLayout.DEFAULT_SIZE, 545, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loadBatchesToCombo() {
        try {
            java.sql.Statement stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            String query = "select BATCH_WITH_DEPARTMENT_CODE, departments_DEPARTMENT_CODE From student_batch order by BATCH_WITH_DEPARTMENT_CODE";
            ResultSet rset = stmt.executeQuery(query);

            cmbBatchCode.removeAllItems();
            cmbBatchCode.insertItemAt("--Select--", 0);
            int position = 1;
            if (rset.next()) {
                do {
                    cmbBatchCode.insertItemAt(rset.getString("BATCH_WITH_DEPARTMENT_CODE") + "--" + rset.getString("departments_DEPARTMENT_CODE") , position);
                    position++;
                } while (rset.next());
            }
            cmbBatchCode.setSelectedIndex(0);

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void LoadStudents() {
        try {
            ResultSet reset;
            Statement stmt;
            String query;
            int rowCount = 0;
            query = "SELECT STUDENT_FIRST_NAME, STUDENT_LAST_NAME, STUDENT_NAME_INITIAL FROM studentunregister ORDER BY STUDENT_FIRST_NAME";
            stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            reset = stmt.executeQuery(query);

            while (reset.next()) {
                model_StudentTable.addRow(new Object[model_StudentTable.getColumnCount()]);
                tableViewDetails.setValueAt(reset.getString("STUDENT_FIRST_NAME"), rowCount, 0);
                tableViewDetails.setValueAt(reset.getString("STUDENT_LAST_NAME"), rowCount, 1);
                tableViewDetails.setValueAt(reset.getString("STUDENT_NAME_INITIAL"), rowCount, 2);
                rowCount++;
            }
            reset.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void CheckBeforeSave() {
        String Code, FirstName, SurName, NameWithIni, ContactLand,
                ContactMobile, Email, IS_ACTIVE, regDate, LastName
                , password = "123";
        if (!cmbBatchCode.getSelectedItem().equals(select)) {
            Code = txtStudentID.getText().toUpperCase();
            FirstName = txtFirstName.getText();
            LastName = txtLastName.getText();
            String batchCode[] = cmbBatchCode.getSelectedItem().toString().split("--");
            String departmentCode[] = cmbBatchCode.getSelectedItem().toString().split("--");
            NameWithIni = txtNameWithInitials.getText();
            SurName = txtSurName.getText();
            ContactLand = txtContactLand.getText();
            ContactMobile = txtContactMobile.getText();
            Email = txtEmail.getText();
            regDate = btnRegDate.getText();
            IS_ACTIVE = cmbActive.getSelectedItem().toString();
            if (!Code.isEmpty() && !FirstName.isEmpty()) {
                try {
                    java.sql.Statement stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                    java.sql.Statement stmtForUserLogin = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                    String query = "select STUDENT_ID From students where STUDENT_ID = '" + Code + "'";
                    ResultSet rset = stmt.executeQuery(query);

                    if (rset.next()) {
                        int x = JOptionPane.showConfirmDialog(this, "Are you sure to change the '" + FirstName + "' student details?", "Update student?", JOptionPane.YES_NO_OPTION);
                        if (x == JOptionPane.YES_OPTION) {
                            String UpdateQuery = "UPDATE `students`\n"
                                    + "SET\n"
                                    + "`STUDENT_FIRST_NAME` = '" + FirstName + "',\n"
                                    + "`STUDENT_LAST_NAME` = '" + LastName + "',\n"
                                    + "`STUDENT_SUR_NAME` = '" + SurName + "',\n"
                                    + "`STUDENT_NAME_INITIAL` = '" + NameWithIni + "',\n"
                                    + "`DEPARTMENT_CODE` = '" + departmentCode[1] + "',\n"
                                    + "`EMAIL` = '" + Email + "',\n"
                                    + "`CONTACT_LAND` = '" + ContactLand + "',\n"
                                    + "`CONTACT_MOBILE` = '" + ContactMobile + "' ,\n"
                                    + "`REGISTERED_DATE` = '" + regDate + "',\n"
                                    + "`IS_ACTIVE` = '" + IS_ACTIVE + "',\n"
                                    + "`student_batch_BATCH_WITH_DEPARTMENT_CODE` = '" + batchCode[0] + "'\n"
                                    + "WHERE `STUDENT_ID` = '" + Code + "'";
                            stmt.execute(UpdateQuery);
                            JOptionPane.showMessageDialog(this, "Student details are updated.");
                            Refresh();
                        } else if (x == JOptionPane.NO_OPTION) {
                            txtStudentID.requestFocus();
                        }

                    } else if (!rset.next()) {
                        String UpdateQuery = "INSERT INTO `students`\n"
                                + "(`STUDENT_ID`,\n"
                                + "`STUDENT_FIRST_NAME`,\n"
                                + "`STUDENT_LAST_NAME`,\n"
                                + "`STUDENT_SUR_NAME`,\n"
                                + "`STUDENT_NAME_INITIAL`,\n"
                                + "`DEPARTMENT_CODE`,\n"
                                + "`EMAIL`,\n"
                                + "`CONTACT_LAND`,\n"
                                + "`CONTACT_MOBILE`,\n"
                                + "`REGISTERED_DATE`,\n"
                                + "`IS_ACTIVE`,\n"
                                + "`student_batch_BATCH_WITH_DEPARTMENT_CODE`)\n"
                                + "VALUES\n"
                                + "(\n"
                                + "'" + Code + "',\n"
                                + "'" + FirstName + "',\n"
                                + "'" + LastName + "',\n"
                                + "'" + SurName + "',\n"
                                + "'" + NameWithIni + "',\n"
                                + "'" + departmentCode[1] + "',\n"
                                + "'" + Email + "',\n"
                                + "'" + ContactLand + "',\n"
                                + "'" + ContactMobile + "',\n"
                                + "'" + regDate + "',\n"
                                + "'" + IS_ACTIVE + "',\n"
                                + "'" + batchCode[0] + "'\n"
                                + "); ";
                        stmt.execute(UpdateQuery);

                        String queryToUserLogin = "INSERT INTO `user_login`\n"
                                + "(`STUDENT_OR_MEMBER_ID`,\n"
                                + "`DEPARTMENT_CODE`,\n"
                                + "`USER_NAME`,\n"
                                + "`USER_PASSWORD`)\n"
                                + "VALUES\n"
                                + "(\n"
                                + "'" + Code + "',\n"
                                + "'" + departmentCode[1] + "',\n"
                                + "'" + FirstName + "',\n"
                                + "'" + password + "'\n"
                                + ")";
                        stmtForUserLogin.execute(queryToUserLogin);

                        JOptionPane.showMessageDialog(this, "New student is saved.");
                        Refresh();
                    }
                    rset.close();
                    stmt.close();
                    stmtForUserLogin.close();
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                    JOptionPane.showMessageDialog(this, "Please contact for support.");
                } catch (HeadlessException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                    JOptionPane.showMessageDialog(this, "Please contact for support.");
                }
            } else if (Code.isEmpty() || FirstName.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please fill all fields before save.", "Empty fields", JOptionPane.OK_OPTION);
                txtStudentID.requestFocus();
            }
        } else if (cmbBatchCode.getSelectedItem().equals(select)) {
            JOptionPane.showMessageDialog(this, "Student is not selected.", "Not selected", JOptionPane.OK_OPTION);
            cmbBatchCode.requestFocus();
        }
    }

    private void CheckBeforeDelete() {

        String Code = txtStudentID.getText();
        if (!Code.isEmpty()) {
            
        } else if (Code.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please insert a valid student id before delete.", "Empty student id", JOptionPane.OK_OPTION);
            txtStudentID.requestFocus();
        }
    }


    private void SearchStudentByCode(String CategoryCode) {
        try {
            ResultSet reset;
            Statement stmt;
            String query;
            int rowCount = 0;
            RefreshTable();

            if (!CategoryCode.equals("")) {
                query = "SELECT STUDENT_ID, STUDENT_FIRST_NAME, student_batch_BATCH_WITH_DEPARTMENT_CODE FROM students WHERE STUDENT_ID LIKE '" + CategoryCode + "%'";
            } else {
                query = "SELECT STUDENT_ID, STUDENT_FIRST_NAME, student_batch_BATCH_WITH_DEPARTMENT_CODE FROM students WHERE STUDENT_ID LIKE '" + CategoryCode + "%'";
            }
            stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            reset = stmt.executeQuery(query);

            while (reset.next()) {

                model_StudentTable.addRow(new Object[model_StudentTable.getColumnCount()]);
                tableViewDetails.setValueAt(reset.getString("STUDENT_ID"), rowCount, 0);
                tableViewDetails.setValueAt(reset.getString("STUDENT_FIRST_NAME"), rowCount, 1);
                tableViewDetails.setValueAt(reset.getString("student_batch_BATCH_WITH_DEPARTMENT_CODE"), rowCount, 2);
                rowCount++;
            }
            reset.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void SearchStudentByName(String CategoryName) {
        try {
            ResultSet reset;
            Statement stmt;
            String query;
            int rowCount = 0;
            RefreshTable();

            if (!CategoryName.equals("")) {
                query = "SELECT STUDENT_ID, STUDENT_FIRST_NAME, student_batch_BATCH_WITH_DEPARTMENT_CODE FROM students WHERE STUDENT_FIRST_NAME LIKE '%" + CategoryName + "%'";
            } else {
                query = "SELECT STUDENT_ID, STUDENT_FIRST_NAME, student_batch_BATCH_WITH_DEPARTMENT_CODE FROM students WHERE STUDENT_FIRST_NAME LIKE '%" + CategoryName + "%'";
            }
            stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            reset = stmt.executeQuery(query);

            while (reset.next()) {

                model_StudentTable.addRow(new Object[model_StudentTable.getColumnCount()]);
                tableViewDetails.setValueAt(reset.getString("STUDENT_ID"), rowCount, 0);
                tableViewDetails.setValueAt(reset.getString("STUDENT_FIRST_NAME"), rowCount, 1);
                tableViewDetails.setValueAt(reset.getString("student_batch_BATCH_WITH_DEPARTMENT_CODE"), rowCount, 2);
                rowCount++;
            }
            reset.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void RefreshTable() {
        try {
            int row = model_StudentTable.getRowCount();
            for (int j = 0; j < row; j++) {
                model_StudentTable.removeRow(0);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void Refresh() {
        RefreshTableAndLoadAgain();
        txtStudentID.setText("");
        txtFirstName.setText("");
        txtLastName.setText("");
        cmbBatchCode.setSelectedIndex(0);
        txtNameWithInitials.setText("");
        txtSurName.setText("");
        txtContactLand.setText("");
        txtContactMobile.setText("");
        txtEmail.setText("");
        btnRegDate.setText("");
        loadBatchesToCombo();
        txtSearch.setText("");
    }

    private void RefreshTableAndLoadAgain() {
        try {
            int row = model_StudentTable.getRowCount();
            for (int j = 0; j < row; j++) {
                model_StudentTable.removeRow(0);
            }
            LoadStudents();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void formInternalFrameIconified(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameIconified
        userPrivilege.toFront();
    }//GEN-LAST:event_formInternalFrameIconified

    private void panel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panel1MouseClicked
        if (SwingUtilities.isRightMouseButton(evt) || evt.isControlDown()) {
            Refresh();
        }
    }//GEN-LAST:event_panel1MouseClicked

    private void txtEmailKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtEmailKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            txtContactLand.requestFocus();
        }
    }//GEN-LAST:event_txtEmailKeyPressed

    private void txtContactMobileKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtContactMobileKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            btnRegDate.requestFocus();
        }
    }//GEN-LAST:event_txtContactMobileKeyPressed

    private void txtContactLandKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtContactLandKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            txtContactMobile.requestFocus();
        }
    }//GEN-LAST:event_txtContactLandKeyPressed

    private void txtSurNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSurNameKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            txtContactLand.requestFocus();
        }
    }//GEN-LAST:event_txtSurNameKeyPressed

    private void txtNameWithInitialsKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNameWithInitialsKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            txtSurName.requestFocus();
        }
    }//GEN-LAST:event_txtNameWithInitialsKeyPressed

    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased
        if (rBtnCode.isSelected()) {
            SearchStudentByCode(txtSearch.getText());
        } else if (rBtnName.isSelected()) {
            SearchStudentByName(txtSearch.getText());
        }
    }//GEN-LAST:event_txtSearchKeyReleased

    private void tableViewDetailsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableViewDetailsMouseClicked
        String Code, FirstName, LastName = "", SurName, NameWithIni = "", ContactLand = "",
                ContactMobile = "", Email = "", 
                IS_ACTIVE = "", batchCode = "", regDate = "", departmentCode = "";

        Code = tableViewDetails.getValueAt(tableViewDetails.getSelectedRow(), 0).toString();
        FirstName = tableViewDetails.getValueAt(tableViewDetails.getSelectedRow(), 1).toString();
        SurName = tableViewDetails.getValueAt(tableViewDetails.getSelectedRow(), 2).toString();

        try {
            ResultSet reset;
            Statement stmt;
            String query;
            query = "SELECT\n"
                    + "`students`.`STUDENT_ID`,\n"
                    + "`students`.`STUDENT_FIRST_NAME`,\n"
                    + "`students`.`STUDENT_LAST_NAME`,\n"
                    + "`students`.`STUDENT_SUR_NAME`,\n"
                    + "`students`.`STUDENT_NAME_INITIAL`,\n"
                    + "`students`.`DEPARTMENT_CODE`,\n"
                    + "`students`.`EMAIL`,\n"
                    + "`students`.`CONTACT_LAND`,\n"
                    + "`students`.`CONTACT_MOBILE`,\n"
                    + "`students`.`REGISTERED_DATE`,\n"
                    + "`students`.`IS_ACTIVE`,\n"
                    + "`students`.`student_batch_BATCH_WITH_DEPARTMENT_CODE`\n"
                    + "FROM `students` WHERE STUDENT_ID = '" + Code + "'";
            stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            reset = stmt.executeQuery(query);

            if (reset.next()) {
                LastName = reset.getString("STUDENT_LAST_NAME");
                NameWithIni = reset.getString("STUDENT_NAME_INITIAL");
                batchCode = reset.getString("student_batch_BATCH_WITH_DEPARTMENT_CODE");
                departmentCode = reset.getString("DEPARTMENT_CODE");
                ContactLand = reset.getString("CONTACT_LAND");
                ContactMobile = reset.getString("CONTACT_MOBILE");
                Email = reset.getString("EMAIL");
                regDate = reset.getString("REGISTERED_DATE");
                IS_ACTIVE = reset.getString("IS_ACTIVE");
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }

        txtStudentID.setText(Code);
        txtFirstName.setText(FirstName);
        txtLastName.setText(LastName);
        txtSurName.setText(SurName);
        txtNameWithInitials.setText(NameWithIni);
        cmbBatchCode.setSelectedItem(batchCode+"--"+departmentCode);
        txtContactLand.setText(ContactLand);
        txtContactMobile.setText(ContactMobile);
        txtEmail.setText(Email);
        btnRegDate.setText(regDate);
        cmbActive.setSelectedItem(IS_ACTIVE);
    }//GEN-LAST:event_tableViewDetailsMouseClicked

    private void cmbBatchCodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmbBatchCodeKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String text = cmbBatchCode.getSelectedItem().toString();
            if (!text.equals(select)) {
                txtNameWithInitials.requestFocus();
            }
        }
    }//GEN-LAST:event_cmbBatchCodeKeyPressed

    private void cmbBatchCodePopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_cmbBatchCodePopupMenuWillBecomeInvisible
        String text = cmbBatchCode.getSelectedItem().toString();
        if (!text.equals(select)) {
            btnRegister.requestFocus();
        }
    }//GEN-LAST:event_cmbBatchCodePopupMenuWillBecomeInvisible

    private void rBtnNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_rBtnNameKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_UP) {
            rBtnCode.requestFocus();
        }
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            rBtnName.setSelected(true);
            btnRegister.requestFocus();
        }
    }//GEN-LAST:event_rBtnNameKeyPressed

    private void rBtnNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rBtnNameActionPerformed
        if (rBtnName.isSelected()) {
            txtSearch.requestFocus();
            txtSearch.selectAll();
        }
    }//GEN-LAST:event_rBtnNameActionPerformed

    private void rBtnCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rBtnCodeActionPerformed
        if (rBtnCode.isSelected()) {
            txtSearch.requestFocus();
            txtSearch.selectAll();
        }
    }//GEN-LAST:event_rBtnCodeActionPerformed

    private void btnExitKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnExitKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            exit();
        }
    }//GEN-LAST:event_btnExitKeyPressed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        exit();
    }//GEN-LAST:event_btnExitActionPerformed

    private void btnDeleteKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnDeleteKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            CheckBeforeDelete();
        }
    }//GEN-LAST:event_btnDeleteKeyPressed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        CheckBeforeDelete();
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnRegisterKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnRegisterKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            CheckBeforeSave();
        }
    }//GEN-LAST:event_btnRegisterKeyPressed

    private void btnRegisterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegisterActionPerformed
        CheckBeforeSave();
    }//GEN-LAST:event_btnRegisterActionPerformed

    private void txtFirstNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFirstNameKeyReleased
        ValidateFields.CheckForOtherFields(txtFirstName);
    }//GEN-LAST:event_txtFirstNameKeyReleased

    private void txtFirstNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFirstNameKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String text = txtFirstName.getText();
            if (!text.isEmpty()) {
                cmbBatchCode.requestFocus();
            }
        }
    }//GEN-LAST:event_txtFirstNameKeyPressed

    private void txtFirstNameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFirstNameFocusGained
        txtFirstName.selectAll();
    }//GEN-LAST:event_txtFirstNameFocusGained

    private void txtStudentIDKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtStudentIDKeyReleased
        ValidateFields.CheckForCodes(txtStudentID);
    }//GEN-LAST:event_txtStudentIDKeyReleased

    private void txtStudentIDKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtStudentIDKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String text = txtStudentID.getText();
            if (!text.isEmpty()) {
                txtFirstName.requestFocus();
                //                LoadAtCodes();
            }
        }
    }//GEN-LAST:event_txtStudentIDKeyPressed

    private void txtStudentIDFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtStudentIDFocusGained
        txtStudentID.selectAll();
    }//GEN-LAST:event_txtStudentIDFocusGained

    private void cmbActiveKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmbActiveKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            btnRegister.requestFocus();
        }
    }//GEN-LAST:event_cmbActiveKeyPressed

    private void btnRegDatePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_btnRegDatePropertyChange
        if (evt.getNewValue() instanceof Date) {
            Date RecievedDate = (Date) evt.getNewValue();
            SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
            btnRegDate.setText(format.format(RecievedDate));
            btnRegDate.requestFocus();
        }
    }//GEN-LAST:event_btnRegDatePropertyChange

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Fax;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnExit;
    private javax.swing.ButtonGroup btnGrup_yesNo;
    private net.sourceforge.jcalendarbutton.JCalendarButton btnRegDate;
    private javax.swing.JButton btnRegister;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cmbActive;
    private javax.swing.JComboBox cmbBatchCode;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel labelIcon;
    private javax.swing.JLabel lbl_accountType;
    private javax.swing.JLabel lbl_accountType1;
    private javax.swing.JLabel lbl_accountType2;
    private javax.swing.JLabel lbl_accountType3;
    private javax.swing.JLabel lbl_accountType4;
    private javax.swing.JLabel lbl_accountType5;
    private javax.swing.JLabel lbl_accountType6;
    private javax.swing.JLabel lbl_category;
    private javax.swing.JLabel lbl_description;
    private javax.swing.JLabel lbl_description1;
    private javax.swing.JLabel lbl_subAccount;
    private javax.swing.JPanel panel1;
    private javax.swing.JRadioButton rBtnCode;
    private javax.swing.JRadioButton rBtnName;
    private javax.swing.JTable tableViewDetails;
    private javax.swing.JTextField txtContactLand;
    private javax.swing.JTextField txtContactMobile;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtFirstName;
    private javax.swing.JTextField txtLastName;
    private javax.swing.JTextField txtNameWithInitials;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JTextField txtStudentID;
    private javax.swing.JTextField txtSurName;
    // End of variables declaration//GEN-END:variables

    private void exit() {

        if (userPrivilege != null) {
            userPrivilege = null;
        }

        this.dispose();
    }
}
