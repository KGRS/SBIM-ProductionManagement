/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MainCategory.java
 *
 * Created on Apr 5, 2013, 2:45:44 PM
 */
package Transactions;

import MainFiles.IndexPage;
import static MainFiles.IndexPage.dskPane_RightPanel;
import static MainFiles.IndexPage.jobStatus;
import db.ConnectSql;
import functions.AverageTimeOfPLItems;
import functions.CalculatePLItemDifference;
import functions.ColoursOfTable;
import java.awt.HeadlessException;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

/**
 *
 * @author Ravindu
 */
public class JobStatus extends javax.swing.JInternalFrame {

    /**
     * First value of the any Combo Box. Represent the Value "--Select--"
     */
    public static EmployeeSuggestionForBottleNeck employeeSuggestionForBottleNeck = null;
    private final String select = "--Select--";
    private final String spliter = "--";
    private final DefaultTableModel model_TableJobs;
    private final String projectPath = System.getProperty("user.dir");
    private final String menuName = "Job status";
    private final String logUser = IndexPage.LabelUser.getText();
    private final String logDate = IndexPage.LabelDate.getText();
//    private final String departmentCode[] = IndexPage.labelDepartmentCode.getText().split(spliter);
    String jobID = "", Name = "", productLevel = "", productLevelItemCode = "", productLevelItemName = "", remarks = "", jobAllocatedDate = "", jobAllocatedtime = "", allocatedtime = "", takenTime = "", emptyFields = "", employeeID = "", FirstName = "", NameWithIni = "", callName = "", fixedJobID = "", statusOfJob = "", orderOfShowingJobs = "", startDate = "", endDate = "", JobRunning_LOG_INSERT_DATE = "", JobRunning_LOG_INSERT_TIME = "", JobRunning_ASSIGNED_BY = "", JobRunning_SUPERVISE_BY = "", jobFinishTime, SHOULD_FINISHED_DATE, SHOULD_FINISHED_AT, IS_LATE, MRNID, jobFinishedTime, jobFinishedDate, IS_WASTAGE, jobDepartmentCode;
    int itemCount, selectedRowOfTableJobs, selectedRowCountOfTableJobs, itemCompleted, plItemDifference;

    public JobStatus() {
        initComponents();
        panel1.setToolTipText("Press right mouse click to refresh.");
        model_TableJobs = (DefaultTableModel) tableJobs.getModel();
        this.setTitle(menuName);

        CalendarStartDate.setText(logDate);
        CalendarEndDate.setText(logDate);
        textFinishedTime.setEditable(true);
        checkBoxGetJobSavingTime.setSelected(false);
        cmbAtTableAt11();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGrup_yesNo = new javax.swing.ButtonGroup();
        buttonGroup1 = new javax.swing.ButtonGroup();
        pnl_Base = new javax.swing.JPanel();
        panel1 = new javax.swing.JPanel();
        lbl_category = new javax.swing.JLabel();
        lbl_description = new javax.swing.JLabel();
        lbl_subAccount = new javax.swing.JLabel();
        btnExit = new javax.swing.JButton();
        lbl_accountType = new javax.swing.JLabel();
        ButtonRefresh = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        CalendarStartDate = new org.sourceforge.jcalendarbutton.JCalendarButton();
        CalendarEndDate = new org.sourceforge.jcalendarbutton.JCalendarButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableJobs = new javax.swing.JTable();
        ButtonView = new javax.swing.JButton();
        buttonSave = new javax.swing.JButton();
        textNumberTransactions = new javax.swing.JTextField();
        comboBoxFilter = new javax.swing.JComboBox();
        lableNoOfJobs = new javax.swing.JLabel();
        comboBoxOrder = new javax.swing.JComboBox();
        textFinishedTime = new javax.swing.JTextField();
        buttonAddDetails = new javax.swing.JButton();
        checkBoxGetJobSavingTime = new javax.swing.JCheckBox();
        lbl_category1 = new javax.swing.JLabel();
        formattedTextItemCompleted = new javax.swing.JFormattedTextField();
        formattedTextTakenTime = new javax.swing.JFormattedTextField();
        lbl_category2 = new javax.swing.JLabel();
        buttonEmployeeSuggestions = new javax.swing.JButton();
        labelFlobID = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setIconifiable(true);
        setPreferredSize(new java.awt.Dimension(1097, 615));
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameIconified(evt);
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        panel1.setBackground(new java.awt.Color(255, 255, 255));
        panel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.TRAILING, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Calibri", 1, 14), new java.awt.Color(153, 153, 153))); // NOI18N
        panel1.setForeground(new java.awt.Color(255, 255, 255));
        panel1.setMinimumSize(new java.awt.Dimension(1070, 563));
        panel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panel1MouseClicked(evt);
            }
        });
        panel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lbl_category.setForeground(new java.awt.Color(102, 102, 102));
        lbl_category.setText("   (Insert in 24 hours)");
        panel1.add(lbl_category, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 100, 110, 20));

        lbl_description.setForeground(new java.awt.Color(102, 102, 102));
        lbl_description.setText("Start date");
        panel1.add(lbl_description, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, 70, 20));

        lbl_subAccount.setForeground(new java.awt.Color(102, 102, 102));
        lbl_subAccount.setText("Filter jobs by");
        panel1.add(lbl_subAccount, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 110, 20));

        btnExit.setMnemonic('e');
        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });
        btnExit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnExitKeyPressed(evt);
            }
        });
        panel1.add(btnExit, new org.netbeans.lib.awtextra.AbsoluteConstraints(980, 540, 80, -1));

        lbl_accountType.setForeground(new java.awt.Color(102, 102, 102));
        lbl_accountType.setText("End date");
        panel1.add(lbl_accountType, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 100, 60, 20));

        ButtonRefresh.setText("Refresh");
        ButtonRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonRefreshActionPerformed(evt);
            }
        });
        panel1.add(ButtonRefresh, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 540, 80, -1));
        panel1.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 142, 1040, 10));

        CalendarStartDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CalendarStartDateActionPerformed(evt);
            }
        });
        CalendarStartDate.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                CalendarStartDatePropertyChange(evt);
            }
        });
        panel1.add(CalendarStartDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 60, 120, -1));

        CalendarEndDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CalendarEndDateActionPerformed(evt);
            }
        });
        CalendarEndDate.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                CalendarEndDatePropertyChange(evt);
            }
        });
        panel1.add(CalendarEndDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 100, 120, -1));

        tableJobs.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Job ID", "Fixed job ID", "Description", "Start date", "Start time", "Allocated time", "Taken time", "Finished date", "Finished time", "Items (allocate)", "Items (complete)", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableJobs.getTableHeader().setReorderingAllowed(false);
        tableJobs.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableJobsMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tableJobs);
        if (tableJobs.getColumnModel().getColumnCount() > 0) {
            tableJobs.getColumnModel().getColumn(0).setPreferredWidth(46);
            tableJobs.getColumnModel().getColumn(1).setPreferredWidth(46);
            tableJobs.getColumnModel().getColumn(2).setPreferredWidth(110);
            tableJobs.getColumnModel().getColumn(3).setPreferredWidth(44);
            tableJobs.getColumnModel().getColumn(4).setPreferredWidth(44);
        }

        panel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 170, 1040, 350));

        ButtonView.setText("View");
        ButtonView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonViewActionPerformed(evt);
            }
        });
        panel1.add(ButtonView, new org.netbeans.lib.awtextra.AbsoluteConstraints(930, 20, 130, -1));

        buttonSave.setText("Save");
        buttonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSaveActionPerformed(evt);
            }
        });
        panel1.add(buttonSave, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 540, 80, -1));

        textNumberTransactions.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        textNumberTransactions.setEnabled(false);
        panel1.add(textNumberTransactions, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 540, 70, -1));

        comboBoxFilter.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Ongoing", "New", "Completed", "Ignored", "All" }));
        panel1.add(comboBoxFilter, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 20, 120, -1));

        lableNoOfJobs.setForeground(new java.awt.Color(102, 102, 102));
        lableNoOfJobs.setText("Number of jobs");
        panel1.add(lableNoOfJobs, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 540, 90, 20));

        comboBoxOrder.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Job ID", "Fixed job ID", "Description", "Date" }));
        panel1.add(comboBoxOrder, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 60, 150, -1));

        textFinishedTime.setText("hh:mm:ss");
        textFinishedTime.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                textFinishedTimeFocusGained(evt);
            }
        });
        textFinishedTime.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                textFinishedTimeKeyPressed(evt);
            }
        });
        panel1.add(textFinishedTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 100, 80, -1));

        buttonAddDetails.setText("Add details");
        buttonAddDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddDetailsActionPerformed(evt);
            }
        });
        panel1.add(buttonAddDetails, new org.netbeans.lib.awtextra.AbsoluteConstraints(930, 100, 130, -1));

        checkBoxGetJobSavingTime.setBackground(new java.awt.Color(255, 255, 255));
        checkBoxGetJobSavingTime.setForeground(new java.awt.Color(102, 102, 102));
        checkBoxGetJobSavingTime.setSelected(true);
        checkBoxGetJobSavingTime.setText("Get current time");
        checkBoxGetJobSavingTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxGetJobSavingTimeActionPerformed(evt);
            }
        });
        panel1.add(checkBoxGetJobSavingTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 60, 110, 20));

        lbl_category1.setForeground(new java.awt.Color(102, 102, 102));
        lbl_category1.setText("Sub department");
        panel1.add(lbl_category1, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 20, 120, 20));

        formattedTextItemCompleted.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        formattedTextItemCompleted.setText("0");
        formattedTextItemCompleted.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                formattedTextItemCompletedFocusGained(evt);
            }
        });
        panel1.add(formattedTextItemCompleted, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 100, 50, -1));

        formattedTextTakenTime.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        panel1.add(formattedTextTakenTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 100, 50, -1));

        lbl_category2.setForeground(new java.awt.Color(102, 102, 102));
        lbl_category2.setText("Order selected jobs by");
        panel1.add(lbl_category2, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 60, 130, 20));

        buttonEmployeeSuggestions.setText("Employee suggestions");
        buttonEmployeeSuggestions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonEmployeeSuggestionsActionPerformed(evt);
            }
        });
        panel1.add(buttonEmployeeSuggestions, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 540, 170, -1));

        labelFlobID.setForeground(new java.awt.Color(255, 255, 255));
        labelFlobID.setText("jLabel1");
        panel1.add(labelFlobID, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 544, 90, 20));

        javax.swing.GroupLayout pnl_BaseLayout = new javax.swing.GroupLayout(pnl_Base);
        pnl_Base.setLayout(pnl_BaseLayout);
        pnl_BaseLayout.setHorizontalGroup(
            pnl_BaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel1, javax.swing.GroupLayout.PREFERRED_SIZE, 1081, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        pnl_BaseLayout.setVerticalGroup(
            pnl_BaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel1, javax.swing.GroupLayout.PREFERRED_SIZE, 583, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1081, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(pnl_Base, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 585, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(pnl_Base, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 2, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmbAtTableAt11() {
        TableColumn AuthColumn = tableJobs.getColumnModel().getColumn(11); //Ongoing, New, Completed, Ignored
        JComboBox comboBox = new JComboBox();
        comboBox.addItem("Ongoing");
        comboBox.addItem("New");
        comboBox.addItem("Completed");
        comboBox.addItem("Ignored");
        AuthColumn.setCellEditor(new DefaultCellEditor(comboBox));
    }

    private void Refresh() {
        model_TableJobs.setRowCount(0);
        CalendarStartDate.setText(logDate);
        CalendarEndDate.setText(logDate);
        textNumberTransactions.setText("");
        comboBoxFilter.setSelectedIndex(0);
        textFinishedTime.setEditable(true);
        textFinishedTime.setText("hh:mm:ss");
        checkBoxGetJobSavingTime.setSelected(false);
        buttonSave.setEnabled(true);
        formattedTextTakenTime.setText("");
        formattedTextItemCompleted.setText("");
        buttonAddDetails.setEnabled(true);
    }

private void btnExitKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnExitKeyPressed
    if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
        exit();
    }
}//GEN-LAST:event_btnExitKeyPressed

private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
    exit();
}//GEN-LAST:event_btnExitActionPerformed

    private void panel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panel1MouseClicked
        if (SwingUtilities.isRightMouseButton(evt) || evt.isControlDown()) {
            Refresh();
        }
    }//GEN-LAST:event_panel1MouseClicked

    private void SearchOngoing(String comboOrder, String startDate, String endDate) { //Ongoing, New, Completed, Ignored, All
        try {
            ResultSet reset; //Job ID, Fixed job ID, Description, Date
            Statement stmt;
            int rowCount = 0;
            model_TableJobs.setRowCount(0);
            statusOfJob = "Ongoing";

            if (comboOrder.equals("Job ID")) {
                orderOfShowingJobs = "JobRunning.\"JOB_ID\"";
            } else if (comboOrder.equals("Fixed job ID")) {
                orderOfShowingJobs = "JobRunning.\"FIXED_JOB_ID\"";
            } else if (comboOrder.equals("Description")) {
                orderOfShowingJobs = "JobFixed.\"JOB_FIXED_NAME\"";
            } else if (comboOrder.equals("Date")) {
                orderOfShowingJobs = "JobRunning.\"JOB_ALLOCATED_DATE\"";
            }

            String query = "SELECT\n"
                    + "     JobFixed.\"JOB_FIXED_NAME\" AS JobFixed_JOB_FIXED_NAME,\n"
                    + "     JobFixed.\"PRODUCT_LEVEL\" AS JobFixed_PRODUCT_LEVEL,\n"
                    + "     JobFixed.\"PRODUCT_LEVEL_ITEM_CODE\" AS JobFixed_PRODUCT_LEVEL_ITEM_CODE,\n"
                    + "     JobFixed.\"ITEM_COUNT\" AS JobFixed_ITEM_COUNT,\n"
                    + "     JobFixed.\"ALLOCATED_TIME\" AS JobFixed_ALLOCATED_TIME,\n"
                    + "     JobFixed.\"EMPLOYEE_COUNT\" AS JobFixed_EMPLOYEE_COUNT,\n"
                    + "     JobFixed.\"REMARKS\" AS JobFixed_REMARKS,\n"
                    + "     JobRunning.\"JOB_ID\" AS JobRunning_JOB_ID,\n"
                    + "     JobRunning.\"FIXED_JOB_ID\" AS JobRunning_FIXED_JOB_ID,\n"
                    + "     JobRunning.\"JOB_ALLOCATED_DATE\" AS JobRunning_JOB_ALLOCATED_DATE,\n"
                    + "     JobRunning.\"JOB_ALLOCATED_TIME\" AS JobRunning_JOB_ALLOCATED_TIME,\n"
                    + "     JobRunning.\"ALLOCATED_TIME\" AS JobRunning_ALLOCATED_TIME,\n"
                    + "     JobRunning.\"TAKEN_TIME\" AS JobRunning_TAKEN_TIME,\n"
                    + "     JobRunning.\"ASSIGNED_BY\" AS JobRunning_ASSIGNED_BY,\n"
                    + "     JobRunning.\"SUPERVISE_BY\" AS JobRunning_SUPERVISE_BY,\n"
                    + "     JobRunning.\"PRODUCT_LEVEL\" AS JobRunning_PRODUCT_LEVEL,\n"
                    + "     JobRunning.\"PRODUCT_LEVEL_ITEM_CODE\" AS JobRunning_PRODUCT_LEVEL_ITEM_CODE,\n"
                    + "     JobRunning.\"ITEM_COUNT\" AS JobRunning_ITEM_COUNT,\n"
                    + "     JobRunning.\"ITEM_COUNT_COMPLETED\" AS JobRunning_ITEM_COUNT_COMPLETED,\n"
                    + "     JobRunning.\"IS_NEW_ONGOING\" AS JobRunning_IS_NEW_ONGOING,\n"
                    + "     JobRunning.\"REMARKS\" AS JobRunning_REMARKS,\n"
                    + "     JobRunning.\"USER_ID\" AS JobRunning_USER_ID,\n"
                    + "     JobRunning.\"LOG_INSERT_DATE\" AS JobRunning_LOG_INSERT_DATE,\n"
                    + "     JobRunning.\"LOG_INSERT_TIME\" AS JobRunning_LOG_INSERT_TIME,\n"
                    + "     JobRunning.\"SHOULD_FINISHED_DATE\" AS JobRunning_SHOULD_FINISHED_DATE,\n"
                    + "     JobRunning.\"SHOULD_FINISHED_AT\" AS JobRunning_SHOULD_FINISHED_AT\n"
                    + "FROM\n"
                    + "     \"dbo\".\"JobFixed\" JobFixed INNER JOIN \"dbo\".\"JobRunning\" JobRunning ON JobFixed.\"JOB_FIXED_ID\" = JobRunning.\"FIXED_JOB_ID\"\n"
                    + "WHERE\n"
                    + "     JobRunning.\"IS_NEW_ONGOING\" = '" + statusOfJob + "' "
                    + "AND (JobRunning.\"JOB_ALLOCATED_DATE\" >= '" + startDate + "' AND JobRunning.\"JOB_ALLOCATED_DATE\" <= '" + endDate + "') ORDER BY " + orderOfShowingJobs + "";

            stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            reset = stmt.executeQuery(query);

            while (reset.next()) {
                model_TableJobs.addRow(new Object[model_TableJobs.getColumnCount()]);
                tableJobs.setValueAt(reset.getString("JobRunning_JOB_ID"), rowCount, 0);
                tableJobs.setValueAt(reset.getString("JobRunning_FIXED_JOB_ID"), rowCount, 1);
                tableJobs.setValueAt(reset.getString("JobFixed_JOB_FIXED_NAME"), rowCount, 2);
                tableJobs.setValueAt(reset.getString("JobRunning_JOB_ALLOCATED_DATE"), rowCount, 3);
                tableJobs.setValueAt(reset.getString("JobRunning_JOB_ALLOCATED_TIME"), rowCount, 4);
                tableJobs.setValueAt(reset.getString("JobRunning_ALLOCATED_TIME"), rowCount, 5);
                tableJobs.setValueAt(reset.getString("JobRunning_TAKEN_TIME"), rowCount, 6);
                tableJobs.setValueAt(reset.getString("JobRunning_SHOULD_FINISHED_DATE"), rowCount, 7);
                tableJobs.setValueAt(reset.getString("JobRunning_SHOULD_FINISHED_AT"), rowCount, 8);
                tableJobs.setValueAt(reset.getString("JobRunning_ITEM_COUNT"), rowCount, 9);
                tableJobs.setValueAt(reset.getString("JobRunning_ITEM_COUNT_COMPLETED"), rowCount, 10);
                tableJobs.setValueAt(statusOfJob, rowCount, 11);
                rowCount++;
                tableJobs.setDefaultRenderer(Object.class, new ColoursOfTable());
            }
            reset.close();
            textNumberTransactions.setText(String.valueOf(rowCount));

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void SearchNew(String comboOrder, String startDate, String endDate) {
        try {
            ResultSet reset; //Job ID, Fixed job ID, Description, Date
            Statement stmt;
            int rowCount = 0;
            model_TableJobs.setRowCount(0);
            statusOfJob = "New";

            if (comboOrder.equals("Job ID")) {
                orderOfShowingJobs = "JobRunning.\"JOB_ID\"";
            } else if (comboOrder.equals("Fixed job ID")) {
                orderOfShowingJobs = "JobRunning.\"FIXED_JOB_ID\"";
            } else if (comboOrder.equals("Description")) {
                orderOfShowingJobs = "JobFixed.\"JOB_FIXED_NAME\"";
            } else if (comboOrder.equals("Date")) {
                orderOfShowingJobs = "JobRunning.\"JOB_ALLOCATED_DATE\"";
            }

            String query = "SELECT\n"
                    + "     JobFixed.\"JOB_FIXED_NAME\" AS JobFixed_JOB_FIXED_NAME,\n"
                    + "     JobFixed.\"PRODUCT_LEVEL\" AS JobFixed_PRODUCT_LEVEL,\n"
                    + "     JobFixed.\"PRODUCT_LEVEL_ITEM_CODE\" AS JobFixed_PRODUCT_LEVEL_ITEM_CODE,\n"
                    + "     JobFixed.\"ITEM_COUNT\" AS JobFixed_ITEM_COUNT,\n"
                    + "     JobFixed.\"ALLOCATED_TIME\" AS JobFixed_ALLOCATED_TIME,\n"
                    + "     JobFixed.\"EMPLOYEE_COUNT\" AS JobFixed_EMPLOYEE_COUNT,\n"
                    + "     JobFixed.\"REMARKS\" AS JobFixed_REMARKS,\n"
                    + "     JobRunning.\"JOB_ID\" AS JobRunning_JOB_ID,\n"
                    + "     JobRunning.\"FIXED_JOB_ID\" AS JobRunning_FIXED_JOB_ID,\n"
                    + "     JobRunning.\"JOB_ALLOCATED_DATE\" AS JobRunning_JOB_ALLOCATED_DATE,\n"
                    + "     JobRunning.\"JOB_ALLOCATED_TIME\" AS JobRunning_JOB_ALLOCATED_TIME,\n"
                    + "     JobRunning.\"ALLOCATED_TIME\" AS JobRunning_ALLOCATED_TIME,\n"
                    + "     JobRunning.\"TAKEN_TIME\" AS JobRunning_TAKEN_TIME,\n"
                    + "     JobRunning.\"ASSIGNED_BY\" AS JobRunning_ASSIGNED_BY,\n"
                    + "     JobRunning.\"SUPERVISE_BY\" AS JobRunning_SUPERVISE_BY,\n"
                    + "     JobRunning.\"PRODUCT_LEVEL\" AS JobRunning_PRODUCT_LEVEL,\n"
                    + "     JobRunning.\"PRODUCT_LEVEL_ITEM_CODE\" AS JobRunning_PRODUCT_LEVEL_ITEM_CODE,\n"
                    + "     JobRunning.\"ITEM_COUNT\" AS JobRunning_ITEM_COUNT,\n"
                    + "     JobRunning.\"ITEM_COUNT_COMPLETED\" AS JobRunning_ITEM_COUNT_COMPLETED,\n"
                    + "     JobRunning.\"IS_NEW_ONGOING\" AS JobRunning_IS_NEW_ONGJobRunning_TAKEN_TIMEOING,\n"
                    + "     JobRunning.\"REMARKS\" AS JobRunning_REMARKS,\n"
                    + "     JobRunning.\"USER_ID\" AS JobRunning_USER_ID,\n"
                    + "     JobRunning.\"LOG_INSERT_DATE\" AS JobRunning_LOG_INSERT_DATE,\n"
                    + "     JobRunning.\"LOG_INSERT_TIME\" AS JobRunning_LOG_INSERT_TIME,\n"
                    + "     JobRunning.\"SHOULD_FINISHED_DATE\" AS JobRunning_SHOULD_FINISHED_DATE,\n"
                    + "     JobRunning.\"SHOULD_FINISHED_AT\" AS JobRunning_SHOULD_FINISHED_AT\n"
                    + "FROM\n"
                    + "     \"dbo\".\"JobFixed\" JobFixed INNER JOIN \"dbo\".\"JobRunning\" JobRunning ON JobFixed.\"JOB_FIXED_ID\" = JobRunning.\"FIXED_JOB_ID\"\n"
                    + "WHERE\n"
                    + "     JobRunning.\"IS_NEW_ONGOING\" = '" + statusOfJob + "'"
                    + " AND (JobRunning.\"JOB_ALLOCATED_DATE\" >= '" + startDate + "' AND JobRunning.\"JOB_ALLOCATED_DATE\" <= '" + endDate + "') ORDER BY " + orderOfShowingJobs + "";

            stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            reset = stmt.executeQuery(query);

            while (reset.next()) {
                model_TableJobs.addRow(new Object[model_TableJobs.getColumnCount()]);
                tableJobs.setValueAt(reset.getString("JobRunning_JOB_ID"), rowCount, 0);
                tableJobs.setValueAt(reset.getString("JobRunning_FIXED_JOB_ID"), rowCount, 1);
                tableJobs.setValueAt(reset.getString("JobFixed_JOB_FIXED_NAME"), rowCount, 2);
                tableJobs.setValueAt(reset.getString("JobRunning_JOB_ALLOCATED_DATE"), rowCount, 3);
                tableJobs.setValueAt(reset.getString("JobRunning_JOB_ALLOCATED_TIME"), rowCount, 4);
                tableJobs.setValueAt(reset.getString("JobRunning_ALLOCATED_TIME"), rowCount, 5);
                tableJobs.setValueAt(reset.getString("JobRunning_TAKEN_TIME"), rowCount, 6);
//                tableJobs.setValueAt(0, rowCount, 8);
                tableJobs.setValueAt(reset.getString("JobRunning_SHOULD_FINISHED_DATE"), rowCount, 7);
                tableJobs.setValueAt(reset.getString("JobRunning_SHOULD_FINISHED_AT"), rowCount, 8);
                tableJobs.setValueAt(reset.getString("JobRunning_ITEM_COUNT"), rowCount, 9);
                tableJobs.setValueAt(reset.getString("JobRunning_ITEM_COUNT_COMPLETED"), rowCount, 10);
                tableJobs.setValueAt(statusOfJob, rowCount, 11);
                rowCount++;
            }
            reset.close();
            textNumberTransactions.setText(String.valueOf(rowCount));

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void SearchCompleted(String comboOrder, String startDate, String endDate) {
        try {
            ResultSet reset;
            Statement stmt;
            int rowCount = 0;
            model_TableJobs.setRowCount(0);
            statusOfJob = "Completed";

            if (comboOrder.equals("Job ID")) {
                orderOfShowingJobs = "JobFinished.\"JOB_ID\"";
            } else if (comboOrder.equals("Fixed job ID")) {
                orderOfShowingJobs = "JobFinished.\"FIXED_JOB_ID\"";
            } else if (comboOrder.equals("Description")) {
                orderOfShowingJobs = "JobFixed.\"JOB_FIXED_NAME\"";
            } else if (comboOrder.equals("Date")) {
                orderOfShowingJobs = "JobFinished.\"JOB_ALLOCATED_DATE\"";
            }
            String query = "SELECT\n"
                    + "     JobFixed.\"JOB_FIXED_NAME\" AS JobFixed_JOB_FIXED_NAME,\n"
                    + "     JobFixed.\"PRODUCT_LEVEL\" AS JobFixed_PRODUCT_LEVEL,\n"
                    + "     JobFixed.\"PRODUCT_LEVEL_ITEM_CODE\" AS JobFixed_PRODUCT_LEVEL_ITEM_CODE,\n"
                    + "     JobFixed.\"ITEM_COUNT\" AS JobFixed_ITEM_COUNT,\n"
                    + "     JobFixed.\"ALLOCATED_TIME\" AS JobFixed_ALLOCATED_TIME,\n"
                    + "     JobFixed.\"EMPLOYEE_COUNT\" AS JobFixed_EMPLOYEE_COUNT,\n"
                    + "     JobFixed.\"REMARKS\" AS JobFixed_REMARKS,\n"
                    + "     JobFinished.\"JOB_ID\" AS JobFinished_JOB_ID,\n"
                    + "     JobFinished.\"FIXED_JOB_ID\" AS JobFinished_FIXED_JOB_ID,\n"
                    + "     JobFinished.\"JOB_ALLOCATED_DATE\" AS JobFinished_JOB_ALLOCATED_DATE,\n"
                    + "     JobFinished.\"JOB_ALLOCATED_TIME\" AS JobFinished_JOB_ALLOCATED_TIME,\n"
                    + "     JobFinished.\"ALLOCATED_TIME\" AS JobFinished_ALLOCATED_TIME,\n"
                    + "     JobFinished.\"TAKEN_TIME\" AS JobFinished_TAKEN_TIME,\n"
                    + "     JobFinished.\"JOB_FINISHED_DATE\" AS JobFinished_JOB_FINISHED_DATE,\n"
                    + "     JobFinished.\"JOB_FINISHED_TIME\" AS JobFinished_JOB_FINISHED_TIME,\n"
                    + "     JobFinished.\"ASSIGNED_BY\" AS JobFinished_ASSIGNED_BY,\n"
                    + "     JobFinished.\"SUPERVISE_BY\" AS JobFinished_SUPERVISE_BY,\n"
                    + "     JobFinished.\"PRODUCT_LEVEL\" AS JobFinished_PRODUCT_LEVEL,\n"
                    + "     JobFinished.\"PRODUCT_LEVEL_ITEM_CODE\" AS JobFinished_PRODUCT_LEVEL_ITEM_CODE,\n"
                    + "     JobFinished.\"ITEM_COUNT\" AS JobFinished_ITEM_COUNT,\n"
                    + "     JobFinished.\"ITEM_COUNT_COMPLETED\" AS JobFinished_ITEM_COUNT_COMPLETED,\n"
                    + "     JobFinished.\"IS_COMPLETE_CANCLE\" AS JobFinished_IS_COMPLETE_CANCLE,\n"
                    + "     JobFinished.\"REMARKS\" AS JobFinished_REMARKS,\n"
                    + "     JobFinished.\"USER_ID\" AS JobFinished_USER_ID,\n"
                    + "     JobFinished.\"LOG_INSERT_DATE\" AS JobFinished_LOG_INSERT_DATE,\n"
                    + "     JobFinished.\"LOG_INSERT_TIME\" AS JobFinished_LOG_INSERT_TIME\n"
                    + "FROM\n"
                    + "     \"dbo\".\"JobFixed\" JobFixed INNER JOIN \"dbo\".\"JobFinished\" JobFinished ON JobFixed.\"JOB_FIXED_ID\" = JobFinished.\"FIXED_JOB_ID\"\n"
                    + "WHERE\n"
                    + "     JobFinished.\"IS_COMPLETE_CANCLE\" = '" + statusOfJob + "'"
                    + " AND (JobFinished.\"JOB_ALLOCATED_DATE\" >= '" + startDate + "' AND JobFinished.\"JOB_ALLOCATED_DATE\" <= '" + endDate + "') ORDER BY " + orderOfShowingJobs + "";

            stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            reset = stmt.executeQuery(query);

            while (reset.next()) {
                model_TableJobs.addRow(new Object[model_TableJobs.getColumnCount()]);
                tableJobs.setValueAt(reset.getString("JobFinished_JOB_ID"), rowCount, 0);
                tableJobs.setValueAt(reset.getString("JobFinished_FIXED_JOB_ID"), rowCount, 1);
                tableJobs.setValueAt(reset.getString("JobFixed_JOB_FIXED_NAME"), rowCount, 2);
                tableJobs.setValueAt(reset.getString("JobFinished_JOB_ALLOCATED_DATE"), rowCount, 3);
                tableJobs.setValueAt(reset.getString("JobFinished_JOB_ALLOCATED_TIME"), rowCount, 4);
                tableJobs.setValueAt(reset.getString("JobFinished_ALLOCATED_TIME"), rowCount, 5);
                tableJobs.setValueAt(reset.getString("JobFinished_TAKEN_TIME"), rowCount, 6);
                tableJobs.setValueAt(reset.getString("JobFinished_JOB_FINISHED_DATE"), rowCount, 7);
                tableJobs.setValueAt(reset.getString("JobFinished_JOB_FINISHED_TIME"), rowCount, 8);
                tableJobs.setValueAt(reset.getString("JobFinished_ITEM_COUNT"), rowCount, 9);
                tableJobs.setValueAt(reset.getString("JobFinished_ITEM_COUNT_COMPLETED"), rowCount, 10);
                tableJobs.setValueAt(statusOfJob, rowCount, 11);
                rowCount++;
            }
            reset.close();
            textNumberTransactions.setText(String.valueOf(rowCount));

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void SearchIgnored(String comboOrder, String startDate, String endDate) {
        try {
            ResultSet reset;
            Statement stmt;
            int rowCount = 0;
            model_TableJobs.setRowCount(0);
            statusOfJob = "Ignored";

            if (comboOrder.equals("Job ID")) {
                orderOfShowingJobs = "JobFinished.\"JOB_ID\"";
            } else if (comboOrder.equals("Fixed job ID")) {
                orderOfShowingJobs = "JobFinished.\"FIXED_JOB_ID\"";
            } else if (comboOrder.equals("Description")) {
                orderOfShowingJobs = "JobFixed.\"JOB_FIXED_NAME\"";
            } else if (comboOrder.equals("Date")) {
                orderOfShowingJobs = "JobFinished.\"JOB_ALLOCATED_DATE\"";
            }

            String query = "SELECT\n"
                    + "     JobFixed.\"JOB_FIXED_NAME\" AS JobFixed_JOB_FIXED_NAME,\n"
                    + "     JobFixed.\"PRODUCT_LEVEL\" AS JobFixed_PRODUCT_LEVEL,\n"
                    + "     JobFixed.\"PRODUCT_LEVEL_ITEM_CODE\" AS JobFixed_PRODUCT_LEVEL_ITEM_CODE,\n"
                    + "     JobFixed.\"ITEM_COUNT\" AS JobFixed_ITEM_COUNT,\n"
                    + "     JobFixed.\"ALLOCATED_TIME\" AS JobFixed_ALLOCATED_TIME,\n"
                    + "     JobFixed.\"EMPLOYEE_COUNT\" AS JobFixed_EMPLOYEE_COUNT,\n"
                    + "     JobFixed.\"REMARKS\" AS JobFixed_REMARKS,\n"
                    + "     JobFinished.\"JOB_ID\" AS JobFinished_JOB_ID,\n"
                    + "     JobFinished.\"FIXED_JOB_ID\" AS JobFinished_FIXED_JOB_ID,\n"
                    + "     JobFinished.\"JOB_ALLOCATED_DATE\" AS JobFinished_JOB_ALLOCATED_DATE,\n"
                    + "     JobFinished.\"JOB_ALLOCATED_TIME\" AS JobFinished_JOB_ALLOCATED_TIME,\n"
                    + "     JobFinished.\"ALLOCATED_TIME\" AS JobFinished_ALLOCATED_TIME,\n"
                    + "     JobFinished.\"TAKEN_TIME\" AS JobFinished_TAKEN_TIME,\n"
                    + "     JobFinished.\"JOB_FINISHED_DATE\" AS JobFinished_JOB_FINISHED_DATE,\n"
                    + "     JobFinished.\"JOB_FINISHED_TIME\" AS JobFinished_JOB_FINISHED_TIME,\n"
                    + "     JobFinished.\"ASSIGNED_BY\" AS JobFinished_ASSIGNED_BY,\n"
                    + "     JobFinished.\"SUPERVISE_BY\" AS JobFinished_SUPERVISE_BY,\n"
                    + "     JobFinished.\"PRODUCT_LEVEL\" AS JobFinished_PRODUCT_LEVEL,\n"
                    + "     JobFinished.\"PRODUCT_LEVEL_ITEM_CODE\" AS JobFinished_PRODUCT_LEVEL_ITEM_CODE,\n"
                    + "     JobFinished.\"ITEM_COUNT\" AS JobFinished_ITEM_COUNT,\n"
                    + "     JobFinished.\"ITEM_COUNT_COMPLETED\" AS JobFinished_ITEM_COUNT_COMPLETED,\n"
                    + "     JobFinished.\"IS_COMPLETE_CANCLE\" AS JobFinished_IS_COMPLETE_CANCLE,\n"
                    + "     JobFinished.\"REMARKS\" AS JobFinished_REMARKS,\n"
                    + "     JobFinished.\"USER_ID\" AS JobFinished_USER_ID,\n"
                    + "     JobFinished.\"LOG_INSERT_DATE\" AS JobFinished_LOG_INSERT_DATE,\n"
                    + "     JobFinished.\"LOG_INSERT_TIME\" AS JobFinished_LOG_INSERT_TIME\n"
                    + "FROM\n"
                    + "     \"dbo\".\"JobFixed\" JobFixed INNER JOIN \"dbo\".\"JobFinished\" JobFinished ON JobFixed.\"JOB_FIXED_ID\" = JobFinished.\"FIXED_JOB_ID\"\n"
                    + "WHERE\n"
                    + "     JobFinished.\"IS_COMPLETE_CANCLE\" = '" + statusOfJob + "'"
                    + " AND (JobFinished.\"JOB_ALLOCATED_DATE\" >= '" + startDate + "' AND JobFinished.\"JOB_ALLOCATED_DATE\" <= '" + endDate + "') ORDER BY " + orderOfShowingJobs + "";

            stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            reset = stmt.executeQuery(query);

            while (reset.next()) {
                model_TableJobs.addRow(new Object[model_TableJobs.getColumnCount()]);
                tableJobs.setValueAt(reset.getString("JobFinished_JOB_ID"), rowCount, 0);
                tableJobs.setValueAt(reset.getString("JobFinished_FIXED_JOB_ID"), rowCount, 1);
                tableJobs.setValueAt(reset.getString("JobFixed_JOB_FIXED_NAME"), rowCount, 2);
                tableJobs.setValueAt(reset.getString("JobFinished_JOB_ALLOCATED_DATE"), rowCount, 3);
                tableJobs.setValueAt(reset.getString("JobFinished_JOB_ALLOCATED_TIME"), rowCount, 4);
                tableJobs.setValueAt(reset.getString("JobFinished_ALLOCATED_TIME"), rowCount, 5);
                tableJobs.setValueAt(reset.getString("JobFinished_TAKEN_TIME"), rowCount, 6);
                tableJobs.setValueAt(reset.getString("JobFinished_JOB_FINISHED_DATE"), rowCount, 7);
                tableJobs.setValueAt(reset.getString("JobFinished_JOB_FINISHED_TIME"), rowCount, 8);
                tableJobs.setValueAt(reset.getString("JobFinished_ITEM_COUNT"), rowCount, 9);
                tableJobs.setValueAt(reset.getString("JobFinished_ITEM_COUNT_COMPLETED"), rowCount, 10);
                tableJobs.setValueAt(statusOfJob, rowCount, 11);
                rowCount++;
            }
            reset.close();
            textNumberTransactions.setText(String.valueOf(rowCount));

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void CalendarStartDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CalendarStartDateActionPerformed
        if (!CalendarStartDate.getText().isEmpty()) {
            CalendarEndDate.requestFocus();
        }
    }//GEN-LAST:event_CalendarStartDateActionPerformed

    private void CalendarEndDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CalendarEndDateActionPerformed
        if (!CalendarEndDate.getText().isEmpty()) {
            ButtonView.requestFocus();
        }
    }//GEN-LAST:event_CalendarEndDateActionPerformed

    private void CalendarStartDatePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_CalendarStartDatePropertyChange
        if (evt.getNewValue() instanceof Date) {
            Date StartDate = (Date) evt.getNewValue();
            SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
            CalendarStartDate.setText(format.format(StartDate));
        }
    }//GEN-LAST:event_CalendarStartDatePropertyChange

    private void CalendarEndDatePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_CalendarEndDatePropertyChange
        if (evt.getNewValue() instanceof Date) {
            Date EndDate = (Date) evt.getNewValue();
            SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
            CalendarEndDate.setText(format.format(EndDate));
        }
    }//GEN-LAST:event_CalendarEndDatePropertyChange

    private void ButtonViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonViewActionPerformed
        String comboSelected = comboBoxFilter.getSelectedItem().toString(); //Ongoing, New, Completed, Ignored, All
        String comboOrder = comboBoxOrder.getSelectedItem().toString(); //Job ID, Fixed job ID, Description, Date
        startDate = CalendarStartDate.getText();
        endDate = CalendarEndDate.getText();

        if (comboSelected.equals("Ongoing")) {
            buttonAddDetails.setEnabled(true);
            SearchOngoing(comboOrder, startDate, endDate);
        } else if (comboSelected.equals("New")) {
            buttonAddDetails.setEnabled(true);
            SearchNew(comboOrder, startDate, endDate);
        } else if (comboSelected.equals("Completed")) {
            buttonAddDetails.setEnabled(false);
            SearchCompleted(comboOrder, startDate, endDate);
        } else if (comboSelected.equals("Ignored")) {
            buttonAddDetails.setEnabled(false);
            SearchIgnored(comboOrder, startDate, endDate);
        } else if (comboSelected.equals("All")) {
//            SeaarchAll(comboOrder);
        }
    }//GEN-LAST:event_ButtonViewActionPerformed

    private void ButtonRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonRefreshActionPerformed
        Refresh();
    }//GEN-LAST:event_ButtonRefreshActionPerformed

    private void formInternalFrameIconified(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameIconified
        jobStatus.toFront();
    }//GEN-LAST:event_formInternalFrameIconified

    private void buttonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSaveActionPerformed
        int RowCount = tableJobs.getRowCount();
        if (RowCount >= 1) {
            int x = JOptionPane.showConfirmDialog(this, "Are you sure to save status?", "Save?", JOptionPane.YES_NO_OPTION);
            if (x == JOptionPane.YES_OPTION) {
                loadDateTime();
            }
        } else if (RowCount < 1) {
            JOptionPane.showMessageDialog(this, "Jobs are not at the table.", "Not selected", JOptionPane.OK_OPTION);
        }
    }//GEN-LAST:event_buttonSaveActionPerformed

    private void buttonAddDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddDetailsActionPerformed
//        statusOfJob = comboBoxFilter.getSelectedItem().toString();
//        if (statusOfJob.equals("Ongoing") || statusOfJob.equals("New")) {
//            int selectedRowOfTable = tableJobs.getSelectedRow();
//            int selectedRowCountOfTable = tableJobs.getSelectedRowCount();
//            if (selectedRowCountOfTable == 1) {
//                try {
//                    fixedJobID = tableJobs.getValueAt(selectedRowOfTable, 1).toString();
//                    String query = "SELECT JOB_FIXED_EXCEPTION_CODE FROM JobFixedExceptions WHERE JOB_FIXED_ID = '" + fixedJobID + "'";
//                    Statement statement = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
//                    ResultSet resultset = statement.executeQuery(query);
//                    if (resultset.next()) {
//                        String finishedTime = textFinishedTime.getText();
//                        allocatedtime = formattedTextTakenTime.getText();
//                        itemCompleted = Integer.parseInt(formattedTextItemCompleted.getText());
//                        if (!finishedTime.equals("") && itemCompleted >= 0 && !allocatedtime.isEmpty()) {
//                            tableJobs.setValueAt(finishedTime, selectedRowOfTable, 8);
//                            tableJobs.setValueAt(itemCompleted, selectedRowOfTable, 10);
//                            tableJobs.setValueAt(allocatedtime, selectedRowOfTable, 6);
//                        } else if (finishedTime.equals("") || itemCompleted < 0 || allocatedtime.isEmpty()) {
//                            JOptionPane.showMessageDialog(this, "Row should be selected and the fields cannot be empty.", "Invalid attempt", JOptionPane.OK_OPTION);
//                        }
//                    } else if (!resultset.next()) {
//                        JOptionPane.showMessageDialog(this, "Exception is not exsist to this job process.", "Not exsist", JOptionPane.OK_OPTION);
//                    }
//                    statement.close();
//                    resultset.close();
//                } catch (SQLException ex) {
//                    JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
//                    JOptionPane.showMessageDialog(this, "please contact for support.");
//                }
//            } else if (selectedRowCountOfTable != 1) {
//                JOptionPane.showMessageDialog(this, "Please select a single row of the table.", "Invalid selection", JOptionPane.OK_OPTION);
//            }
//        } else if (statusOfJob.equals("Completed") || statusOfJob.equals("Ignored")) {
//            JOptionPane.showMessageDialog(this, "You cannot change the details of the completed or ignored jobs.", "Cannot change", JOptionPane.OK_OPTION);
//        }

        statusOfJob = comboBoxFilter.getSelectedItem().toString();
        if (statusOfJob.equals("Ongoing") || statusOfJob.equals("New")) {
            int selectedRowOfTable = tableJobs.getSelectedRow();
            int selectedRowCountOfTable = tableJobs.getSelectedRowCount();
            if (selectedRowCountOfTable == 1) {
                fixedJobID = tableJobs.getValueAt(selectedRowOfTable, 1).toString();
                String finishedTime = textFinishedTime.getText();
                allocatedtime = formattedTextTakenTime.getText();
                itemCompleted = Integer.parseInt(formattedTextItemCompleted.getText());
                if (!finishedTime.equals("") && itemCompleted >= 0 && !allocatedtime.isEmpty()) {
                    tableJobs.setValueAt(finishedTime, selectedRowOfTable, 8);
                    tableJobs.setValueAt(itemCompleted, selectedRowOfTable, 10);
                    tableJobs.setValueAt(allocatedtime, selectedRowOfTable, 6);
                } else if (finishedTime.equals("") || itemCompleted < 0 || allocatedtime.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Row should be selected and the fields cannot be empty.", "Invalid attempt", JOptionPane.OK_OPTION);
                }
            } else if (selectedRowCountOfTable != 1) {
                JOptionPane.showMessageDialog(this, "Please select a single row of the table.", "Invalid selection", JOptionPane.OK_OPTION);
            }
        } else if (statusOfJob.equals("Completed") || statusOfJob.equals("Ignored")) {
            JOptionPane.showMessageDialog(this, "You cannot change the details of the completed or ignored jobs.", "Cannot change", JOptionPane.OK_OPTION);
        }
    }//GEN-LAST:event_buttonAddDetailsActionPerformed

    private void checkBoxGetJobSavingTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxGetJobSavingTimeActionPerformed
        if (checkBoxGetJobSavingTime.isSelected()) {
            textFinishedTime.setEditable(false);
            String query = "SELECT GETDATE() AS CurrentDateTime";
            String Time;
            try {
                Statement statement = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
                ResultSet resultset = statement.executeQuery(query);

                if (resultset.next()) {
                    Time = resultset.getString("CurrentDateTime").split(" ")[1];
                    Time = Time.split("\\.")[0];
                    textFinishedTime.setText(Time);
                }
                statement.close();
                resultset.close();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                JOptionPane.showMessageDialog(this, "please contact for support.");
            }
        } else if (!checkBoxGetJobSavingTime.isSelected()) {
            textFinishedTime.setEditable(true);
            textFinishedTime.setText("hh:mm:ss");
            textFinishedTime.requestFocus();
            textFinishedTime.selectAll();
        }
    }//GEN-LAST:event_checkBoxGetJobSavingTimeActionPerformed

    private void textFinishedTimeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textFinishedTimeKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (textFinishedTime.getText().length() == 1) {
                textFinishedTime.setText("0" + textFinishedTime.getText() + ":00" + ":00");
            } else if (textFinishedTime.getText().length() == 2) {
                int time = Integer.parseInt(textFinishedTime.getText());
                if (time > 23) {
                    JOptionPane.showMessageDialog(this, "Please insert a valid time.");
                } else {
                    textFinishedTime.setText(textFinishedTime.getText() + ":00" + ":00");
                }
            } else if (textFinishedTime.getText().length() == 3) {
                String[] ttime = textFinishedTime.getText().split("\\.");
                textFinishedTime.setText("0" + ttime[0] + ":" + ttime[1] + "0");
            }
            buttonAddDetails.requestFocus();
        }
    }//GEN-LAST:event_textFinishedTimeKeyPressed

    private void textFinishedTimeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textFinishedTimeFocusGained
        textFinishedTime.selectAll();
    }//GEN-LAST:event_textFinishedTimeFocusGained

    private void tableJobsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableJobsMouseClicked
        selectedRowCountOfTableJobs = tableJobs.getSelectedRowCount();
        if (selectedRowCountOfTableJobs == 1) {
            selectedRowOfTableJobs = tableJobs.getSelectedRow();
            jobFinishTime = tableJobs.getValueAt(selectedRowOfTableJobs, 8).toString();
            takenTime = tableJobs.getValueAt(selectedRowOfTableJobs, 6).toString();
            itemCompleted = Integer.parseInt(tableJobs.getValueAt(selectedRowOfTableJobs, 10).toString());
            textFinishedTime.setText(jobFinishTime);
            formattedTextTakenTime.setText(takenTime);
            formattedTextItemCompleted.setText(String.valueOf(itemCompleted));
            formattedTextTakenTime.requestFocus();
        }
    }//GEN-LAST:event_tableJobsMouseClicked

    private void formattedTextItemCompletedFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formattedTextItemCompletedFocusGained
        formattedTextItemCompleted.selectAll();
    }//GEN-LAST:event_formattedTextItemCompletedFocusGained

    private void buttonEmployeeSuggestionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonEmployeeSuggestionsActionPerformed
        selectedRowOfTableJobs = tableJobs.getSelectedRow();
        fixedJobID = tableJobs.getValueAt(selectedRowOfTableJobs, 1).toString();
        labelFlobID.setText(fixedJobID);

        if (employeeSuggestionForBottleNeck != null) {
            if (!employeeSuggestionForBottleNeck.isVisible()) {
                employeeSuggestionForBottleNeck.setVisible(true);
            }
        } else {
            employeeSuggestionForBottleNeck = new EmployeeSuggestionForBottleNeck();
            dskPane_RightPanel.add(employeeSuggestionForBottleNeck);
            employeeSuggestionForBottleNeck.setVisible(true);
        }
    }//GEN-LAST:event_buttonEmployeeSuggestionsActionPerformed

    private void loadDateTime() {
        String query = "SELECT GETDATE() AS CurrentDateTime";
        String logTime;
        try {
            Statement statement = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
            ResultSet resultset = statement.executeQuery(query);
            if (resultset.next()) {
                logTime = resultset.getString("CurrentDateTime").split(" ")[1];
                logTime = logTime.split("\\.")[0];
                Save(logTime, logDate);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "please contact for support.");
        }
    }

    private void Save(String logTime, String logDate) {
        int RowCount = tableJobs.getRowCount();
        try {
            java.sql.Statement stmtMain = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            java.sql.Statement stmtEmp = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            java.sql.Statement stmtSelectJob = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            java.sql.Statement stmtSelectEmployeesAtJob = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            java.sql.Statement stmtDeleteRunningJob = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            java.sql.Statement stmtDeleteEmpInRunningJobs = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            java.sql.Statement stmtUpdateDetailsInRunningJobs = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            java.sql.Statement stmtCheckIfIssue = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            ResultSet resetSelectJob, resetSelectEmployeesAtJob, resetCheckIfIssue;
            for (int i = 0; i < RowCount; i++) {
                statusOfJob = tableJobs.getValueAt(i, 11).toString();
                jobID = tableJobs.getValueAt(i, 0).toString();
                if (statusOfJob.equals("Completed")) {
                    fixedJobID = tableJobs.getValueAt(i, 1).toString();
                    jobAllocatedDate = tableJobs.getValueAt(i, 3).toString();
                    jobAllocatedtime = tableJobs.getValueAt(i, 4).toString();
                    allocatedtime = tableJobs.getValueAt(i, 5).toString();
                    takenTime = tableJobs.getValueAt(i, 6).toString();
                    jobFinishedDate = tableJobs.getValueAt(i, 7).toString();
                    jobFinishedTime = tableJobs.getValueAt(i, 8).toString();
                    itemCount = Integer.parseInt(tableJobs.getValueAt(i, 9).toString());
                    itemCompleted = Integer.parseInt(tableJobs.getValueAt(i, 10).toString());

                    String CheckIfIssue = "SELECT\n"
                            + "     JobRunning.\"JOB_ID\" AS JobRunning_JOB_ID,\n"
                            + "     JobRunning.\"MRNID\" AS JobRunning_MRNID,\n"
                            + "     IssueMain.\"IssueID\" AS IssueMain_IssueID,\n"
                            + "     MRNmain.\"DepartmentCode\" AS MRNmain_DepartmentCode\n"
                            + "FROM\n"
                            + "     \"dbo\".\"MRNmain\" MRNmain INNER JOIN \"dbo\".\"JobRunning\" JobRunning ON MRNmain.\"MRNID\" = JobRunning.\"MRNID\"\n"
                            + "     INNER JOIN \"dbo\".\"IssueMain\" IssueMain ON MRNmain.\"MRNID\" = IssueMain.\"MRNID\"\n"
                            + "WHERE\n"
                            + "     JobRunning.\"JOB_ID\" = '" + jobID + "'";
                    resetCheckIfIssue = stmtCheckIfIssue.executeQuery(CheckIfIssue);
                    if (resetCheckIfIssue.next()) {
                        jobDepartmentCode = resetCheckIfIssue.getString("MRNmain_DepartmentCode");
                        String querySelectJob = "SELECT\n"
                                + "     JobRunning.\"JOB_ID\" AS JobRunning_JOB_ID,\n"
                                + "     JobRunning.\"FIXED_JOB_ID\" AS JobRunning_FIXED_JOB_ID,\n"
                                + "     JobRunning.\"ASSIGNED_BY\" AS JobRunning_ASSIGNED_BY,\n"
                                + "     JobRunning.\"SUPERVISE_BY\" AS JobRunning_SUPERVISE_BY,\n"
                                + "     JobRunning.\"PRODUCT_LEVEL\" AS JobRunning_PRODUCT_LEVEL,\n"
                                + "     JobRunning.\"PRODUCT_LEVEL_ITEM_CODE\" AS JobRunning_PRODUCT_LEVEL_ITEM_CODE,\n"
                                + "     JobRunning.\"REMARKS\" AS JobRunning_REMARKS,\n"
                                + "     JobRunning.\"USER_ID\" AS JobRunning_USER_ID,\n"
                                + "     JobRunning.\"LOG_INSERT_DATE\" AS JobRunning_LOG_INSERT_DATE,\n"
                                + "     JobRunning.\"LOG_INSERT_TIME\" AS JobRunning_LOG_INSERT_TIME,\n"
                                + "     JobRunning.\"SHOULD_FINISHED_DATE\" AS JobRunning_SHOULD_FINISHED_DATE,\n"
                                + "     JobRunning.\"SHOULD_FINISHED_AT\" AS JobRunning_SHOULD_FINISHED_AT,\n"
                                + "     JobRunning.\"IS_LATE\" AS JobRunning_IS_LATE,\n"
                                + "     JobRunning.\"MRNID\" AS JobRunning_MRNID\n"
                                + "FROM\n"
                                + "     \"dbo\".\"JobRunning\" JobRunning\n"
                                + "WHERE\n"
                                + "     JobRunning.\"JOB_ID\" = '" + jobID + "'";
                        resetSelectJob = stmtSelectJob.executeQuery(querySelectJob);

                        if (resetSelectJob.next()) {
                            productLevel = resetSelectJob.getString("JobRunning_PRODUCT_LEVEL");
                            productLevelItemCode = resetSelectJob.getString("JobRunning_PRODUCT_LEVEL_ITEM_CODE");
                            JobRunning_LOG_INSERT_DATE = resetSelectJob.getString("JobRunning_LOG_INSERT_DATE");
                            JobRunning_LOG_INSERT_TIME = resetSelectJob.getString("JobRunning_LOG_INSERT_TIME");
                            JobRunning_ASSIGNED_BY = resetSelectJob.getString("JobRunning_ASSIGNED_BY");
                            JobRunning_SUPERVISE_BY = resetSelectJob.getString("JobRunning_SUPERVISE_BY");
                            SHOULD_FINISHED_DATE = resetSelectJob.getString("JobRunning_SHOULD_FINISHED_DATE");
                            SHOULD_FINISHED_AT = resetSelectJob.getString("JobRunning_SHOULD_FINISHED_AT");
                            IS_LATE = resetSelectJob.getString("JobRunning_IS_LATE");
                            MRNID = resetSelectJob.getString("JobRunning_MRNID");

                            String MainInsertQuery = "INSERT INTO [JobFinished]\n"
                                    + "           ([JOB_ID]\n"
                                    + "           ,[FIXED_JOB_ID]\n"
                                    + "           ,[JOB_ALLOCATED_DATE]\n"
                                    + "           ,[JOB_ALLOCATED_TIME]\n"
                                    + "           ,[ALLOCATED_TIME]\n"
                                    + "           ,[TAKEN_TIME]\n"
                                    + "           ,[JOB_FINISHED_DATE]\n"
                                    + "           ,[JOB_FINISHED_TIME]\n"
                                    + "           ,[ASSIGNED_BY]\n"
                                    + "           ,[SUPERVISE_BY]\n"
                                    + "           ,[PRODUCT_LEVEL]\n"
                                    + "           ,[PRODUCT_LEVEL_ITEM_CODE]\n"
                                    + "           ,[ITEM_COUNT]\n"
                                    + "           ,[ITEM_COUNT_COMPLETED]\n"
                                    + "           ,[IS_COMPLETE_CANCLE]\n"
                                    + "           ,[REMARKS]\n"
                                    + "           ,[USER_ID]\n"
                                    + "           ,[LOG_INSERT_DATE_FROM_JOB_RUN]\n"
                                    + "           ,[LOG_INSERT_TIME_FROM_JOB_RUN]\n"
                                    + "           ,[LOG_INSERT_DATE]\n"
                                    + "           ,[LOG_INSERT_TIME]\n"
                                    + "           ,[SHOULD_FINISHED_DATE]\n"
                                    + "           ,[SHOULD_FINISHED_AT]\n"
                                    + "           ,[IS_LATE]\n"
                                    + "           ,[MRNID])\n"
                                    + "     VALUES\n"
                                    + "           ('" + jobID + "'\n"
                                    + "           ,'" + fixedJobID + "'\n"
                                    + "           ,'" + jobAllocatedDate + "'\n"
                                    + "           ,'" + jobAllocatedtime + "'\n"
                                    + "           ,'" + allocatedtime + "'\n"
                                    + "           ,'" + takenTime + "'\n"
                                    + "           ,'" + jobFinishedDate + "'\n"
                                    + "           ,'" + jobFinishedTime + "'\n"
                                    + "           ,'" + JobRunning_ASSIGNED_BY + "'\n"
                                    + "           ,'" + JobRunning_SUPERVISE_BY + "'\n"
                                    + "           ,'" + productLevel + "'\n"
                                    + "           ,'" + productLevelItemCode + "'\n"
                                    + "           ,'" + itemCount + "'\n"
                                    + "           ,'" + itemCompleted + "'\n"
                                    + "           ,'" + statusOfJob + "'\n"
                                    + "           ,'" + remarks + "'\n"
                                    + "           ,'" + logUser + "'\n"
                                    + "           ,'" + JobRunning_LOG_INSERT_DATE + "'\n"
                                    + "           ,'" + JobRunning_LOG_INSERT_TIME + "'\n"
                                    + "           ,'" + logDate + "'\n"
                                    + "           ,'" + logTime + "'\n"
                                    + "           ,'" + SHOULD_FINISHED_DATE + "'\n"
                                    + "           ,'" + SHOULD_FINISHED_AT + "'\n"
                                    + "           ,'" + IS_LATE + "'\n"
                                    + "           ,'" + MRNID + "')";
                            stmtMain.execute(MainInsertQuery);
                            AverageTimeOfPLItems.calculateAverageTimeOfPLItems(productLevelItemCode, productLevel, jobDepartmentCode);

                            if (itemCount != itemCompleted) {
                                plItemDifference = itemCount - itemCompleted;
                                if (plItemDifference > 0) {
                                    int x = JOptionPane.showConfirmDialog(this, "Do you want to save the '" + jobID + "' which occured wastage row items?", "Wastage?", JOptionPane.YES_NO_OPTION);
                                    if (x == JOptionPane.YES_OPTION) {
                                        IS_WASTAGE = "Yes";
                                    } else if (x == JOptionPane.NO_OPTION) {
                                        IS_WASTAGE = "No";
                                    }
                                } else if (plItemDifference < 0) {
                                    IS_WASTAGE = "No";
                                }
                                CalculatePLItemDifference.PLItemDifference(JobRunning_SUPERVISE_BY, jobID, plItemDifference, IS_WASTAGE, itemCount, productLevelItemCode, itemCompleted);
                            } else if (itemCount == itemCompleted) {
                                plItemDifference = 0;
                                IS_WASTAGE = "No";
                                CalculatePLItemDifference.PLItemDifference(JobRunning_SUPERVISE_BY, jobID, plItemDifference, IS_WASTAGE, itemCount, productLevelItemCode, itemCompleted);
                            }
                        }
                        String querySelectEmployeesAtJob = "SELECT\n"
                                + "     EmployeesAtRunningJob.\"JOB_ID\" AS EmployeesAtRunningJob_JOB_ID,\n"
                                + "     EmployeesAtRunningJob.\"EMPLOYEE_CODE\" AS EmployeesAtRunningJob_EMPLOYEE_CODE,\n"
                                + "     EmployeesAtRunningJob.\"TO_EMPLOYEE_REMARKS\" AS EmployeesAtRunningJob_TO_EMPLOYEE_REMARKS,\n"
                                + "     JobRunning.\"JOB_ID\" AS JobRunning_JOB_ID\n"
                                + "FROM\n"
                                + "     \"dbo\".\"EmployeesAtRunningJob\" EmployeesAtRunningJob INNER JOIN \"dbo\".\"JobRunning\" JobRunning ON EmployeesAtRunningJob.\"JOB_ID\" = JobRunning.\"JOB_ID\"\n"
                                + "WHERE\n"
                                + "     JobRunning.\"JOB_ID\" = '" + jobID + "'";
                        resetSelectEmployeesAtJob = stmtSelectEmployeesAtJob.executeQuery(querySelectEmployeesAtJob);

                        while (resetSelectEmployeesAtJob.next()) {
                            employeeID = resetSelectEmployeesAtJob.getString("EmployeesAtRunningJob_EMPLOYEE_CODE");
                            emptyFields = resetSelectEmployeesAtJob.getString("EmployeesAtRunningJob_TO_EMPLOYEE_REMARKS");
                            String empInsertQuery = "INSERT INTO [EmployeesAtFinishedJob]\n"
                                    + "           ([JOB_ID]\n"
                                    + "           ,[EMPLOYEE_CODE]\n"
                                    + "           ,[TO_EMPLOYEE_REMARKS])\n"
                                    + "     VALUES\n"
                                    + "           ('" + jobID + "'\n"
                                    + "           ,'" + employeeID + "'\n"
                                    + "           ,'" + emptyFields + "')";
                            stmtEmp.execute(empInsertQuery);
                        }
                        String queryDeleteJobs = "DELETE FROM [JobRunning]\n"
                                + "      WHERE JOB_ID = '" + jobID + "'";
                        stmtDeleteRunningJob.execute(queryDeleteJobs);

                        String queryDeleteEmployeesAtJobs = "DELETE FROM [EmployeesAtRunningJob]\n"
                                + "      WHERE JOB_ID = '" + jobID + "'";
                        stmtDeleteEmpInRunningJobs.execute(queryDeleteEmployeesAtJobs);
                    }else if (!resetCheckIfIssue.next()) {
                        JOptionPane.showMessageDialog(this, "Row items are not issued to complete.", "Not issued", JOptionPane.OK_OPTION);
                    }

                } else if (statusOfJob.equals("Ongoing") || statusOfJob.equals("New")) {
                    takenTime = tableJobs.getValueAt(i, 6).toString();
                    jobFinishedTime = tableJobs.getValueAt(i, 8).toString();
                    itemCompleted = Integer.parseInt(tableJobs.getValueAt(i, 10).toString());

                    String queryUpdateDetailsInRunningJobs = "UPDATE JobRunning SET TAKEN_TIME = '" + takenTime + "'"
                            + ", SHOULD_FINISHED_AT = '" + jobFinishedTime + "', ITEM_COUNT_COMPLETED = '" + itemCompleted + "', IS_NEW_ONGOING  = '" + statusOfJob + "' WHERE JOB_ID = '" + jobID + "'";
                    stmtUpdateDetailsInRunningJobs.execute(queryUpdateDetailsInRunningJobs);
                } else if (statusOfJob.equals("Ignored")) {
                    fixedJobID = tableJobs.getValueAt(i, 1).toString();
                    jobAllocatedDate = tableJobs.getValueAt(i, 3).toString();
                    jobAllocatedtime = tableJobs.getValueAt(i, 4).toString();
                    allocatedtime = tableJobs.getValueAt(i, 5).toString();
                    takenTime = tableJobs.getValueAt(i, 6).toString();
                    jobFinishedDate = tableJobs.getValueAt(i, 7).toString();
                    jobFinishedTime = tableJobs.getValueAt(i, 8).toString();
                    itemCount = Integer.parseInt(tableJobs.getValueAt(i, 9).toString());
                    itemCompleted = Integer.parseInt(tableJobs.getValueAt(i, 10).toString());
                    String querySelectJob = "SELECT\n"
                            + "     JobRunning.\"JOB_ID\" AS JobRunning_JOB_ID,\n"
                            + "     JobRunning.\"FIXED_JOB_ID\" AS JobRunning_FIXED_JOB_ID,\n"
                            + "     JobRunning.\"ASSIGNED_BY\" AS JobRunning_ASSIGNED_BY,\n"
                            + "     JobRunning.\"SUPERVISE_BY\" AS JobRunning_SUPERVISE_BY,\n"
                            + "     JobRunning.\"PRODUCT_LEVEL\" AS JobRunning_PRODUCT_LEVEL,\n"
                            + "     JobRunning.\"PRODUCT_LEVEL_ITEM_CODE\" AS JobRunning_PRODUCT_LEVEL_ITEM_CODE,\n"
                            + "     JobRunning.\"REMARKS\" AS JobRunning_REMARKS,\n"
                            + "     JobRunning.\"USER_ID\" AS JobRunning_USER_ID,\n"
                            + "     JobRunning.\"LOG_INSERT_DATE\" AS JobRunning_LOG_INSERT_DATE,\n"
                            + "     JobRunning.\"LOG_INSERT_TIME\" AS JobRunning_LOG_INSERT_TIME,\n"
                            + "     JobRunning.\"SHOULD_FINISHED_DATE\" AS JobRunning_SHOULD_FINISHED_DATE,\n"
                            + "     JobRunning.\"SHOULD_FINISHED_AT\" AS JobRunning_SHOULD_FINISHED_AT,\n"
                            + "     JobRunning.\"IS_LATE\" AS JobRunning_IS_LATE,\n"
                            + "     JobRunning.\"MRNID\" AS JobRunning_MRNID\n"
                            + "FROM\n"
                            + "     \"dbo\".\"JobRunning\" JobRunning\n"
                            + "WHERE\n"
                            + "     JobRunning.\"JOB_ID\" = '" + jobID + "'";
                    resetSelectJob = stmtSelectJob.executeQuery(querySelectJob);

                    if (resetSelectJob.next()) {
                        productLevel = resetSelectJob.getString("JobRunning_PRODUCT_LEVEL");
                        productLevelItemCode = resetSelectJob.getString("JobRunning_PRODUCT_LEVEL_ITEM_CODE");
                        JobRunning_LOG_INSERT_DATE = resetSelectJob.getString("JobRunning_LOG_INSERT_DATE");
                        JobRunning_LOG_INSERT_TIME = resetSelectJob.getString("JobRunning_LOG_INSERT_TIME");
                        JobRunning_ASSIGNED_BY = resetSelectJob.getString("JobRunning_ASSIGNED_BY");
                        JobRunning_SUPERVISE_BY = resetSelectJob.getString("JobRunning_SUPERVISE_BY");
                        SHOULD_FINISHED_DATE = resetSelectJob.getString("JobRunning_SHOULD_FINISHED_DATE");
                        SHOULD_FINISHED_AT = resetSelectJob.getString("JobRunning_SHOULD_FINISHED_AT");
                        IS_LATE = resetSelectJob.getString("JobRunning_IS_LATE");
                        MRNID = resetSelectJob.getString("JobRunning_MRNID");

                        String MainInsertQuery = "INSERT INTO [JobFinished]\n"
                                + "           ([JOB_ID]\n"
                                + "           ,[FIXED_JOB_ID]\n"
                                + "           ,[JOB_ALLOCATED_DATE]\n"
                                + "           ,[JOB_ALLOCATED_TIME]\n"
                                + "           ,[ALLOCATED_TIME]\n"
                                + "           ,[TAKEN_TIME]\n"
                                + "           ,[JOB_FINISHED_DATE]\n"
                                + "           ,[JOB_FINISHED_TIME]\n"
                                + "           ,[ASSIGNED_BY]\n"
                                + "           ,[SUPERVISE_BY]\n"
                                + "           ,[PRODUCT_LEVEL]\n"
                                + "           ,[PRODUCT_LEVEL_ITEM_CODE]\n"
                                + "           ,[ITEM_COUNT]\n"
                                + "           ,[ITEM_COUNT_COMPLETED]\n"
                                + "           ,[IS_COMPLETE_CANCLE]\n"
                                + "           ,[REMARKS]\n"
                                + "           ,[USER_ID]\n"
                                + "           ,[LOG_INSERT_DATE_FROM_JOB_RUN]\n"
                                + "           ,[LOG_INSERT_TIME_FROM_JOB_RUN]\n"
                                + "           ,[LOG_INSERT_DATE]\n"
                                + "           ,[LOG_INSERT_TIME]\n"
                                + "           ,[SHOULD_FINISHED_DATE]\n"
                                + "           ,[SHOULD_FINISHED_AT]\n"
                                + "           ,[IS_LATE]\n"
                                + "           ,[MRNID])\n"
                                + "     VALUES\n"
                                + "           ('" + jobID + "'\n"
                                + "           ,'" + fixedJobID + "'\n"
                                + "           ,'" + jobAllocatedDate + "'\n"
                                + "           ,'" + jobAllocatedtime + "'\n"
                                + "           ,'" + allocatedtime + "'\n"
                                + "           ,'" + takenTime + "'\n"
                                + "           ,'" + jobFinishedDate + "'\n"
                                + "           ,'" + jobFinishedTime + "'\n"
                                + "           ,'" + JobRunning_ASSIGNED_BY + "'\n"
                                + "           ,'" + JobRunning_SUPERVISE_BY + "'\n"
                                + "           ,'" + productLevel + "'\n"
                                + "           ,'" + productLevelItemCode + "'\n"
                                + "           ,'" + itemCount + "'\n"
                                + "           ,'" + itemCompleted + "'\n"
                                + "           ,'" + statusOfJob + "'\n"
                                + "           ,'" + remarks + "'\n"
                                + "           ,'" + logUser + "'\n"
                                + "           ,'" + JobRunning_LOG_INSERT_DATE + "'\n"
                                + "           ,'" + JobRunning_LOG_INSERT_TIME + "'\n"
                                + "           ,'" + logDate + "'\n"
                                + "           ,'" + logTime + "'\n"
                                + "           ,'" + SHOULD_FINISHED_DATE + "'\n"
                                + "           ,'" + SHOULD_FINISHED_AT + "'\n"
                                + "           ,'" + IS_LATE + "'\n"
                                + "           ,'" + MRNID + "')";
                        stmtMain.execute(MainInsertQuery);
                    }
                    String querySelectEmployeesAtJob = "SELECT\n"
                            + "     EmployeesAtRunningJob.\"JOB_ID\" AS EmployeesAtRunningJob_JOB_ID,\n"
                            + "     EmployeesAtRunningJob.\"EMPLOYEE_CODE\" AS EmployeesAtRunningJob_EMPLOYEE_CODE,\n"
                            + "     EmployeesAtRunningJob.\"TO_EMPLOYEE_REMARKS\" AS EmployeesAtRunningJob_TO_EMPLOYEE_REMARKS,\n"
                            + "     JobRunning.\"JOB_ID\" AS JobRunning_JOB_ID\n"
                            + "FROM\n"
                            + "     \"dbo\".\"EmployeesAtRunningJob\" EmployeesAtRunningJob INNER JOIN \"dbo\".\"JobRunning\" JobRunning ON EmployeesAtRunningJob.\"JOB_ID\" = JobRunning.\"JOB_ID\"\n"
                            + "WHERE\n"
                            + "     JobRunning.\"JOB_ID\" = '" + jobID + "'";
                    resetSelectEmployeesAtJob = stmtSelectEmployeesAtJob.executeQuery(querySelectEmployeesAtJob);

                    while (resetSelectEmployeesAtJob.next()) {
                        employeeID = resetSelectEmployeesAtJob.getString("EmployeesAtRunningJob_EMPLOYEE_CODE");
                        emptyFields = resetSelectEmployeesAtJob.getString("EmployeesAtRunningJob_TO_EMPLOYEE_REMARKS");
                        String empInsertQuery = "INSERT INTO [EmployeesAtFinishedJob]\n"
                                + "           ([JOB_ID]\n"
                                + "           ,[EMPLOYEE_CODE]\n"
                                + "           ,[TO_EMPLOYEE_REMARKS])\n"
                                + "     VALUES\n"
                                + "           ('" + jobID + "'\n"
                                + "           ,'" + employeeID + "'\n"
                                + "           ,'" + emptyFields + "')";
                        stmtEmp.execute(empInsertQuery);
                    }
                    String queryDeleteJobs = "DELETE FROM [JobRunning]\n"
                            + "      WHERE JOB_ID = '" + jobID + "'";
                    stmtDeleteRunningJob.execute(queryDeleteJobs);

                    String queryDeleteEmployeesAtJobs = "DELETE FROM [EmployeesAtRunningJob]\n"
                            + "      WHERE JOB_ID = '" + jobID + "'";
                    stmtDeleteEmpInRunningJobs.execute(queryDeleteEmployeesAtJobs);
                }
            }

            JOptionPane.showMessageDialog(this, "Details of job status are saved successfully.");
            buttonSave.setEnabled(false);
            stmtMain.close();
            stmtEmp.close();
            stmtDeleteEmpInRunningJobs.close();
            stmtDeleteRunningJob.close();
            stmtSelectEmployeesAtJob.close();
            stmtSelectJob.close();

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        } catch (HeadlessException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonRefresh;
    private javax.swing.JButton ButtonView;
    private org.sourceforge.jcalendarbutton.JCalendarButton CalendarEndDate;
    private org.sourceforge.jcalendarbutton.JCalendarButton CalendarStartDate;
    private javax.swing.JButton btnExit;
    private javax.swing.ButtonGroup btnGrup_yesNo;
    private javax.swing.JButton buttonAddDetails;
    private javax.swing.JButton buttonEmployeeSuggestions;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton buttonSave;
    private javax.swing.JCheckBox checkBoxGetJobSavingTime;
    private javax.swing.JComboBox comboBoxFilter;
    private javax.swing.JComboBox comboBoxOrder;
    private javax.swing.JFormattedTextField formattedTextItemCompleted;
    private javax.swing.JFormattedTextField formattedTextTakenTime;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    public static javax.swing.JLabel labelFlobID;
    private javax.swing.JLabel lableNoOfJobs;
    private javax.swing.JLabel lbl_accountType;
    private javax.swing.JLabel lbl_category;
    private javax.swing.JLabel lbl_category1;
    private javax.swing.JLabel lbl_category2;
    private javax.swing.JLabel lbl_description;
    private javax.swing.JLabel lbl_subAccount;
    private javax.swing.JPanel panel1;
    private javax.swing.JPanel pnl_Base;
    public static javax.swing.JTable tableJobs;
    private javax.swing.JTextField textFinishedTime;
    private javax.swing.JTextField textNumberTransactions;
    // End of variables declaration//GEN-END:variables

    private void exit() {
        if (jobStatus != null) {
            jobStatus = null;
        }
        this.dispose();
    }
}
