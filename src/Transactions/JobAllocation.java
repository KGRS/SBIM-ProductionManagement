/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Transactions;

import static MainFiles.IndexPage.jobAllocation;
import db.ConnectSql;
import java.awt.HeadlessException;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DecimalFormat;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Ravindu
 */
public class JobAllocation extends javax.swing.JInternalFrame {

    private final String select = "--Select--";
    private final DefaultTableModel model_TableStudentOfGroup;
    private final DefaultTableModel model_TableEmployee;
    private final DefaultTableModel model_TableFixedJobs;
    private final String spliter = "--";
    private final String menuName = "Job allocation";

    public JobAllocation() {
        initComponents();

        comboDepartment.requestFocus();
        model_TableStudentOfGroup = (DefaultTableModel) tableRankedEmployee.getModel();
        model_TableEmployee = (DefaultTableModel) tableEmployee.getModel();
        model_TableFixedJobs = (DefaultTableModel) tableFixedJobs.getModel();
        panel1.setToolTipText("Press right mouse click to refresh.");
        this.setTitle(menuName);

        loadDepartmentsToCombo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        panel1 = new javax.swing.JPanel();
        lbl_accountType1 = new javax.swing.JLabel();
        buttonView = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableEmployee = new javax.swing.JTable();
        comboDepartment = new javax.swing.JComboBox();
        lbl_subAccount = new javax.swing.JLabel();
        ButtonAddSelected = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableRankedEmployee = new javax.swing.JTable();
        ButtonRemoveSelected = new javax.swing.JButton();
        lbl_subAccount1 = new javax.swing.JLabel();
        lbl_subAccount2 = new javax.swing.JLabel();
        TextNumberOfEmpRanked = new javax.swing.JTextField();
        TextNumberOfEmpAtSubDepartment = new javax.swing.JTextField();
        comboSubDepartment = new javax.swing.JComboBox();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableFixedJobs = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        lbl_description5 = new javax.swing.JLabel();
        lbl_description2 = new javax.swing.JLabel();
        spinnerItemCount = new javax.swing.JSpinner();
        formatedTextAllocatedTime = new javax.swing.JFormattedTextField();
        lbl_description4 = new javax.swing.JLabel();
        lbl_description = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        textAreaRemarks = new javax.swing.JTextArea();
        spinnerEmpCount = new javax.swing.JSpinner();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jFormattedTextField1 = new javax.swing.JFormattedTextField();
        lbl_description6 = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();

        setIconifiable(true);
        setPreferredSize(new java.awt.Dimension(1070, 688));
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameIconified(evt);
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        panel1.setBackground(new java.awt.Color(255, 255, 255));
        panel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.TRAILING, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Calibri", 1, 14), new java.awt.Color(153, 153, 153))); // NOI18N
        panel1.setForeground(new java.awt.Color(255, 255, 255));
        panel1.setPreferredSize(new java.awt.Dimension(950, 688));
        panel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panel1MouseClicked(evt);
            }
        });
        panel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lbl_accountType1.setForeground(new java.awt.Color(102, 102, 102));
        lbl_accountType1.setText("Department *");
        panel1.add(lbl_accountType1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 80, 20));

        buttonView.setText("View");
        buttonView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonViewActionPerformed(evt);
            }
        });
        panel1.add(buttonView, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 60, 90, 20));

        btnSave.setMnemonic('s');
        btnSave.setText("Save");
        btnSave.setActionCommand("Delete");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        panel1.add(btnSave, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 610, 80, -1));

        btnRefresh.setMnemonic('d');
        btnRefresh.setText("Refresh");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });
        panel1.add(btnRefresh, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 610, 80, -1));

        btnExit.setMnemonic('e');
        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });
        btnExit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnExitKeyPressed(evt);
            }
        });
        panel1.add(btnExit, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 610, 80, -1));

        tableEmployee.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Employee code", "First name", "Name with initials", "Calling name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableEmployee.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tableEmployee);

        panel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 380, 440, 210));

        comboDepartment.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Select--" }));
        comboDepartment.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                comboDepartmentPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        comboDepartment.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                comboDepartmentKeyPressed(evt);
            }
        });
        panel1.add(comboDepartment, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 20, 230, 20));

        lbl_subAccount.setForeground(new java.awt.Color(102, 102, 102));
        lbl_subAccount.setText("Number of employees at selected sub department");
        panel1.add(lbl_subAccount, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 340, 250, 20));

        ButtonAddSelected.setText("-->>");
        ButtonAddSelected.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonAddSelectedActionPerformed(evt);
            }
        });
        panel1.add(ButtonAddSelected, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 470, 90, -1));

        tableRankedEmployee.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Employee code", "First name", "Name with initials", "Calling name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableRankedEmployee.getTableHeader().setReorderingAllowed(false);
        tableRankedEmployee.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableRankedEmployeeMouseClicked(evt);
            }
        });
        tableRankedEmployee.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tableRankedEmployeeKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(tableRankedEmployee);

        panel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 377, 440, 210));

        ButtonRemoveSelected.setText("<<--");
        ButtonRemoveSelected.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonRemoveSelectedActionPerformed(evt);
            }
        });
        panel1.add(ButtonRemoveSelected, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 500, 90, -1));

        lbl_subAccount1.setForeground(new java.awt.Color(102, 102, 102));
        lbl_subAccount1.setText("Sub department *");
        panel1.add(lbl_subAccount1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, 100, 20));

        lbl_subAccount2.setForeground(new java.awt.Color(102, 102, 102));
        lbl_subAccount2.setText("Number of employees allocated to the job");
        panel1.add(lbl_subAccount2, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 340, 220, 20));

        TextNumberOfEmpRanked.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        TextNumberOfEmpRanked.setEnabled(false);
        panel1.add(TextNumberOfEmpRanked, new org.netbeans.lib.awtextra.AbsoluteConstraints(960, 340, 70, -1));

        TextNumberOfEmpAtSubDepartment.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        TextNumberOfEmpAtSubDepartment.setEnabled(false);
        panel1.add(TextNumberOfEmpAtSubDepartment, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 340, 70, -1));

        comboSubDepartment.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Select--" }));
        comboSubDepartment.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                comboSubDepartmentPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        panel1.add(comboSubDepartment, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 60, 230, -1));

        tableFixedJobs.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Fixed job code", "Fixed job name", "Product level", "Product level item code"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableFixedJobs.getTableHeader().setReorderingAllowed(false);
        tableFixedJobs.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableFixedJobsMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tableFixedJobs);

        panel1.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 100, 440, 220));

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lbl_description5.setForeground(new java.awt.Color(102, 102, 102));
        lbl_description5.setText("Allocated time (minutes) *");
        jPanel1.add(lbl_description5, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 80, 140, 20));

        lbl_description2.setForeground(new java.awt.Color(102, 102, 102));
        lbl_description2.setText("Item count *");
        jPanel1.add(lbl_description2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 40, 130, 20));

        spinnerItemCount.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(1), Integer.valueOf(1), null, Integer.valueOf(1)));
        jPanel1.add(spinnerItemCount, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 40, 80, -1));

        formatedTextAllocatedTime.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        formatedTextAllocatedTime.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        formatedTextAllocatedTime.setText("30");
        jPanel1.add(formatedTextAllocatedTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 80, 80, -1));

        lbl_description4.setForeground(new java.awt.Color(102, 102, 102));
        lbl_description4.setText("Employee count *");
        jPanel1.add(lbl_description4, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 120, 140, 20));

        lbl_description.setForeground(new java.awt.Color(102, 102, 102));
        lbl_description.setText("Remarks");
        jPanel1.add(lbl_description, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 160, 100, 20));

        textAreaRemarks.setColumns(20);
        textAreaRemarks.setRows(5);
        jScrollPane4.setViewportView(textAreaRemarks);

        jPanel1.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 160, 320, 70));

        spinnerEmpCount.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(1), Integer.valueOf(1), null, Integer.valueOf(1)));
        jPanel1.add(spinnerEmpCount, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 120, 80, -1));

        jButton1.setText("Select");
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 250, 84, -1));

        jButton2.setText("Deselect");
        jPanel1.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 250, 84, -1));
        jPanel1.add(jFormattedTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 40, 86, -1));

        lbl_description6.setForeground(new java.awt.Color(102, 102, 102));
        lbl_description6.setText(" Start time *");
        jPanel1.add(lbl_description6, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 40, 70, 20));

        jCheckBox1.setForeground(new java.awt.Color(102, 102, 102));
        jCheckBox1.setSelected(true);
        jCheckBox1.setText("Get job saving time");
        jPanel1.add(jCheckBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 80, 140, -1));

        panel1.add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 20, 540, 300));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1054, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel1, javax.swing.GroupLayout.DEFAULT_SIZE, 658, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void RefreshTable() {
        try {
            int row = model_TableFixedJobs.getRowCount();
            for (int j = 0; j < row; j++) {
                model_TableFixedJobs.removeRow(0);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void loadFixedJobsToTable() {
        try {
            ResultSet reset;
            Statement stmt;
            String query;
            int rowCount = 0;
            RefreshTable();

            query = "SELECT JOB_FIXED_ID, JOB_FIXED_NAME, PRODUCT_LEVEL, PRODUCT_LEVEL_ITEM_CODE FROM JobFixed ORDER BY JOB_FIXED_ID";
            stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            reset = stmt.executeQuery(query);

            while (reset.next()) {
                model_TableFixedJobs.addRow(new Object[model_TableFixedJobs.getColumnCount()]);
                tableFixedJobs.setValueAt(reset.getString("JOB_FIXED_ID"), rowCount, 0);
                tableFixedJobs.setValueAt(reset.getString("JOB_FIXED_NAME"), rowCount, 1);
                tableFixedJobs.setValueAt(reset.getString("PRODUCT_LEVEL"), rowCount, 2);
                tableFixedJobs.setValueAt(reset.getString("PRODUCT_LEVEL_ITEM_CODE"), rowCount, 3);
                rowCount++;
            }
            reset.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void loadDepartmentsToCombo() {
        try {
            java.sql.Statement stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            String query = "select DepartmentCode, DepartmentName From Departments order by DepartmentName";
            ResultSet rset = stmt.executeQuery(query);

            comboDepartment.removeAllItems();
            comboDepartment.insertItemAt("--Select--", 0);
            int position = 1;
            if (rset.next()) {
                do {
                    comboDepartment.insertItemAt(rset.getString("DepartmentName") + "--" + rset.getString("DepartmentCode"), position); // 
                    position++;
                } while (rset.next());
            }
            comboDepartment.setSelectedIndex(0);

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", ERROR);
        }
    }

    private void loadSubDepartmentsToCombo() {
        try {
            String departmentCode[] = comboDepartment.getSelectedItem().toString().split(spliter);
            java.sql.Statement stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            String query = "select SUB_DEPARTMENT_CODE, SUB_DEPARTMENT_NAME From SubDepartments WHERE DepartmentCode = '" + departmentCode[1] + "' order by SUB_DEPARTMENT_NAME";
            ResultSet rset = stmt.executeQuery(query);

            comboSubDepartment.removeAllItems();
            comboSubDepartment.insertItemAt("--Select--", 0);
            int position = 1;
            if (rset.next()) {
                do {
                    comboSubDepartment.insertItemAt(rset.getString("SUB_DEPARTMENT_NAME") + "--" + rset.getString("SUB_DEPARTMENT_CODE"), position); // 
                    position++;
                } while (rset.next());
            }
            comboSubDepartment.setSelectedIndex(0);

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", ERROR);
        }
    }

    private void comboDepartmentKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_comboDepartmentKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String text = comboDepartment.getSelectedItem().toString();
            if (!text.equals(select)) {
                loadSubDepartmentsToCombo();
                btnSave.requestFocus();
            }
        }
    }//GEN-LAST:event_comboDepartmentKeyPressed

    private void comboDepartmentPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_comboDepartmentPopupMenuWillBecomeInvisible
        String text = comboDepartment.getSelectedItem().toString();
        if (!text.equals(select)) {
            loadSubDepartmentsToCombo();
            btnSave.requestFocus();
        }
    }//GEN-LAST:event_comboDepartmentPopupMenuWillBecomeInvisible

    private void btnExitKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnExitKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            exit();
        }
    }//GEN-LAST:event_btnExitKeyPressed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        exit();
    }//GEN-LAST:event_btnExitActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        Refresh();
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        CheckBeforeSave();
    }//GEN-LAST:event_btnSaveActionPerformed

    private void buttonViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonViewActionPerformed
        String Batch = comboDepartment.getSelectedItem().toString();
        if (!Batch.equals(select)) {
            loadFixedJobsToTable();
        } else if (Batch.equals(select)) {
            JOptionPane.showMessageDialog(this, "Batch is not selected.", "Not selected", JOptionPane.OK_OPTION);
            comboDepartment.requestFocus();
        }
    }//GEN-LAST:event_buttonViewActionPerformed

    private void panel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panel1MouseClicked
        if (SwingUtilities.isRightMouseButton(evt) || evt.isControlDown()) {
            Refresh();
        }
    }//GEN-LAST:event_panel1MouseClicked

    private void ButtonAddSelectedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonAddSelectedActionPerformed
        int SelectedRowCount = tableEmployee.getSelectedRowCount();
        if (SelectedRowCount == 1) {
            String studntFromBtch = tableEmployee.getValueAt(tableEmployee.getSelectedRow(), 0).toString();
            Object[] CheckStudentAlreadyAdded = CheckIfStudentAlreadyAdded(studntFromBtch);
            if ((Boolean) CheckStudentAlreadyAdded[0]) {
                JOptionPane.showMessageDialog(this, "Employee is already allocated.", "Already allocated.", JOptionPane.OK_OPTION);
            } else {
                addToAllocateTable();
            }
        }
    }//GEN-LAST:event_ButtonAddSelectedActionPerformed

    private void addToAllocateTable() {
        String Code, FirstName, NameWithIni, batchCode;
        int SelectedRow = tableEmployee.getSelectedRow();
        try {
            Code = tableEmployee.getValueAt(SelectedRow, 0).toString();
            FirstName = tableEmployee.getValueAt(SelectedRow, 1).toString();
            NameWithIni = tableEmployee.getValueAt(SelectedRow, 2).toString();
            batchCode = tableEmployee.getValueAt(SelectedRow, 3).toString();

            model_TableStudentOfGroup.addRow(new Object[]{Code, FirstName, NameWithIni, batchCode});
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void tableRankedEmployeeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableRankedEmployeeMouseClicked
        if (evt.getClickCount() == 2) {
            tableStudentsOfGroup();
        }
    }//GEN-LAST:event_tableRankedEmployeeMouseClicked

    private void tableStudentsOfGroup() {
        int x = JOptionPane.showConfirmDialog(this, "Are you sure To remove selected student?", "Remove student?", JOptionPane.YES_NO_OPTION);
        if (x == JOptionPane.YES_OPTION) {
            int i = tableRankedEmployee.getSelectedRow();
            try {
                String groupID[] = comboSubDepartment.getSelectedItem().toString().split("--");
                java.sql.Statement stmtIfExist = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                java.sql.Statement stmtDeleteExist = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                String Checkquery = "select * From event_student_attendees where GROUP_ID = '" + groupID[1] + "'";
                ResultSet IfExistRset = stmtIfExist.executeQuery(Checkquery);

                if (IfExistRset.next()) {
                    String studentID = tableRankedEmployee.getValueAt(i, 0).toString();
                    String deleteQuery = "delete From event_student_attendees where GROUP_ID = '" + groupID[1] + "' AND STUDENT_ID = '" + studentID + "'";
                    stmtDeleteExist.execute(deleteQuery);
                }
                model_TableStudentOfGroup.removeRow(i);
                int EditedRowCount = tableRankedEmployee.getRowCount();
                TextNumberOfEmpAtSubDepartment.setText(String.valueOf(EditedRowCount));
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                JOptionPane.showMessageDialog(this, "Please contact for support.");
            }
        }
    }

    private void tableRankedEmployeeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tableRankedEmployeeKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_DELETE) {
            tableStudentsOfGroup();
        }
    }//GEN-LAST:event_tableRankedEmployeeKeyPressed

    private void formInternalFrameIconified(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameIconified
        jobAllocation.toFront();
    }//GEN-LAST:event_formInternalFrameIconified

    private void comboSubDepartmentPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_comboSubDepartmentPopupMenuWillBecomeInvisible
        String subDepartment = comboSubDepartment.getSelectedItem().toString();
        if (!subDepartment.equals(select)) {
            buttonView.requestFocus();
        }
    }//GEN-LAST:event_comboSubDepartmentPopupMenuWillBecomeInvisible

    private void ButtonRemoveSelectedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonRemoveSelectedActionPerformed
        tableStudentsOfGroup();
    }//GEN-LAST:event_ButtonRemoveSelectedActionPerformed

    private void tableFixedJobsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableFixedJobsMouseClicked
        String Code = "", Name = "", productLevel = "",productLevelItemCode = "", remarks = "";
        int itemCount = 0, allocateTime = 0, employeeCount = 0;

        Code = tableFixedJobs.getValueAt(tableFixedJobs.getSelectedRow(), 0).toString();
        Name = tableFixedJobs.getValueAt(tableFixedJobs.getSelectedRow(), 1).toString();
        productLevel = tableFixedJobs.getValueAt(tableFixedJobs.getSelectedRow(), 2).toString();
        productLevelItemCode = tableFixedJobs.getValueAt(tableFixedJobs.getSelectedRow(), 3).toString();

        try {
            ResultSet reset;
            Statement stmt;
            String query;

            query = "SELECT\n"
                    + "     JobFixed.\"JOB_FIXED_ID\" AS JobFixed_JOB_FIXED_ID,\n"
                    + "     JobFixed.\"JOB_FIXED_NAME\" AS JobFixed_JOB_FIXED_NAME,\n"
                    + "     JobFixed.\"PRODUCT_LEVEL\" AS JobFixed_PRODUCT_LEVEL,\n"
                    + "     JobFixed.\"PRODUCT_LEVEL_ITEM_CODE\" AS JobFixed_PRODUCT_LEVEL_ITEM_CODE,\n"
                    + "     JobFixed.\"ITEM_COUNT\" AS JobFixed_ITEM_COUNT,\n"
                    + "     JobFixed.\"ALLOCATED_TIME\" AS JobFixed_ALLOCATED_TIME,\n"
                    + "     JobFixed.\"EMPLOYEE_COUNT\" AS JobFixed_EMPLOYEE_COUNT,\n"
                    + "     JobFixed.\"REMARKS\" AS JobFixed_REMARKS\n"
                    + "FROM\n"
                    + "     \"dbo\".\"JobFixed\" JobFixed \n"
                    + "WHERE\n"
                    + "     JobFixed.\"JOB_FIXED_ID\" = '" + Code + "'";

            stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            reset = stmt.executeQuery(query);

            if (reset.next()) {
                itemCount = reset.getInt("JobFixed_ITEM_COUNT");
                allocateTime = reset.getInt("JobFixed_ALLOCATED_TIME");
                employeeCount = reset.getInt("JobFixed_EMPLOYEE_COUNT");
                remarks = reset.getString("JobFixed_REMARKS");

                spinnerItemCount.setValue(itemCount);
                formatedTextAllocatedTime.setText(String.valueOf(allocateTime));
                spinnerEmpCount.setValue(employeeCount);
                textAreaRemarks.setText(remarks);
            }
            reset.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }//GEN-LAST:event_tableFixedJobsMouseClicked

    private void loadStudentsOfGroup(String groupID) {
        try {
            int rowi = model_TableStudentOfGroup.getRowCount();
            for (int i = 0; i < rowi; i++) {
                model_TableStudentOfGroup.removeRow(0);
            }
            ResultSet RSETStudentsOfGroup;
            int rowCount = 0;
            java.sql.Statement stmtStudentsOfGroup = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            String StudentsOfGroupQuery = "SELECT\n"
                    + "     events.`EVENT_NAME` AS events_EVENT_NAME,\n"
                    + "     event_student_attendees.`GROUP_ID` AS event_student_attendees_GROUP_ID,\n"
                    + "     event_student_attendees.`STUDENT_ID` AS event_student_attendees_STUDENT_ID,\n"
                    + "     event_student_attendees.`EVENT_CODE` AS event_student_attendees_EVENT_CODE,\n"
                    + "     event_student_attendees.`IS_CONFERMATION_SENT_TO_STUDENT` AS event_student_attendees_IS_CONFERMATION_SENT_TO_STUDENT,\n"
                    + "     event_student_attendees.`student_event_groups_GROUP_ID` AS event_student_attendees_student_event_groups_GROUP_ID,\n"
                    + "     students.`STUDENT_FIRST_NAME` AS students_STUDENT_FIRST_NAME,\n"
                    + "     students.`STUDENT_NAME_INITIAL` AS students_STUDENT_NAME_INITIAL,\n"
                    + "     students.`student_batch_BATCH_WITH_DEPARTMENT_CODE` AS students_student_batch_BATCH_WITH_DEPARTMENT_CODE\n"
                    + "FROM\n"
                    + "     `events` events INNER JOIN `event_student_attendees` event_student_attendees ON events.`EVENT_CODE` = event_student_attendees.`EVENT_CODE`\n"
                    + "     INNER JOIN `students` students ON event_student_attendees.`STUDENT_ID` = students.`STUDENT_ID`\n"
                    + "WHERE\n"
                    + "     event_student_attendees.`GROUP_ID` = '" + groupID + "'";
            RSETStudentsOfGroup = stmtStudentsOfGroup.executeQuery(StudentsOfGroupQuery);
            while (RSETStudentsOfGroup.next()) {
                model_TableStudentOfGroup.addRow(new Object[model_TableStudentOfGroup.getColumnCount()]);
                tableRankedEmployee.setValueAt(RSETStudentsOfGroup.getString("event_student_attendees_STUDENT_ID"), rowCount, 0);
                tableRankedEmployee.setValueAt(RSETStudentsOfGroup.getString("students_STUDENT_FIRST_NAME"), rowCount, 1);
                tableRankedEmployee.setValueAt(RSETStudentsOfGroup.getString("students_STUDENT_NAME_INITIAL"), rowCount, 2);
                tableRankedEmployee.setValueAt(RSETStudentsOfGroup.getString("students_student_batch_BATCH_WITH_DEPARTMENT_CODE"), rowCount, 3);
                rowCount++;

                String eventCode = RSETStudentsOfGroup.getString("event_student_attendees_EVENT_CODE");
                String eventName = RSETStudentsOfGroup.getString("events_EVENT_NAME");
            }

//            if (RSETStudentsOfGroup.next()) {
//
//            }
            TextNumberOfEmpRanked.setText(String.valueOf(rowCount));
            comboDepartment.setEnabled(false);
            buttonView.setEnabled(false);

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        } catch (HeadlessException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    protected Object[] CheckIfStudentAlreadyAdded(String studntFromBtch) {
        int rowCount = model_TableStudentOfGroup.getRowCount();
        Object[] data = new Object[2];
        data[0] = false;
        data[1] = -1;

        for (int i = 0; i < rowCount; i++) {
            String studentAllocateToEvent = model_TableStudentOfGroup.getValueAt(i, 0).toString();
            if (studntFromBtch.equals(studentAllocateToEvent)) {
                data[0] = true;
                data[1] = i;
            }
        }
        return data;
    }

    private void loadBatchCodeToCombo() {
        try {
            java.sql.Statement stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            String query = "select BATCH_WITH_DEPARTMENT_CODE, BATCH_YEAR From student_batch order by BATCH_WITH_DEPARTMENT_CODE DESC";
            ResultSet rset = stmt.executeQuery(query);

            comboDepartment.removeAllItems();
            comboDepartment.insertItemAt("--Select--", 0);
            int position = 1;
            if (rset.next()) {
                do {
                    comboDepartment.insertItemAt(rset.getString("BATCH_WITH_DEPARTMENT_CODE") + "--" + rset.getString("BATCH_YEAR"), position);
                    position++;
                } while (rset.next());
            }
            comboDepartment.setSelectedIndex(0);

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", ERROR);
        }
    }

    private void CheckBeforeSave() {
        int RowCount = tableRankedEmployee.getRowCount();
        String Batch = comboDepartment.getSelectedItem().toString();
        String group = comboSubDepartment.getSelectedItem().toString();

        if (Batch.equals(select) || group.equals(select)) {
            JOptionPane.showMessageDialog(this, "Batch or group is not selected.", "Not selected", JOptionPane.OK_OPTION);
        } else if (RowCount <= 0) {
            JOptionPane.showMessageDialog(this, "Students are not available at table.", "No students", JOptionPane.OK_OPTION);
        } else if (!Batch.equals(select) && RowCount > 0 && !group.equals(select)) {
            int x = JOptionPane.showConfirmDialog(this, "Are you sure to allocate these stduents?", "Save?", JOptionPane.YES_NO_OPTION);
            if (x == JOptionPane.YES_OPTION) {
                allocateStudents();
            }
        }
    }

    private void allocateStudents() {
        String studentID, event;
        int RowCount = tableRankedEmployee.getRowCount();
        String groupID[] = comboSubDepartment.getSelectedItem().toString().split("--");
        String eventCode[] = comboSubDepartment.getSelectedItem().toString().split("--");
        event = "";
        String SENT_TO_STUDENT = "No";

        try {
            java.sql.Statement stmtMain = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            java.sql.Statement stmtDeleteExist = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            java.sql.Statement stmtIfExist = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            String Checkquery = "select * From event_student_attendees where GROUP_ID = '" + groupID[1] + "'";
            ResultSet IfExistRset = stmtIfExist.executeQuery(Checkquery);

            for (int i = 0; i < RowCount; i++) {
                studentID = tableRankedEmployee.getValueAt(i, 0).toString();

                if (IfExistRset.next()) {
                    String deleteQuery = "delete From event_student_attendees where GROUP_ID = '" + groupID[1] + "' AND STUDENT_ID = '" + studentID + "'";
                    stmtDeleteExist.execute(deleteQuery);
                }

                String MainInsertQuery = "INSERT INTO `event_student_attendees`\n"
                        + "(`GROUP_ID`,\n"
                        + "`STUDENT_ID`,\n"
                        + "`EVENT_CODE`,\n"
                        + "`IS_CONFERMATION_SENT_TO_STUDENT`,\n"
                        + "`student_event_groups_GROUP_ID`)\n"
                        + "VALUES\n"
                        + "(\n"
                        + "'" + groupID[1] + "',\n"
                        + "'" + studentID + "',\n"
                        + "'" + eventCode[1] + "',\n"
                        + "'" + SENT_TO_STUDENT + "',\n"
                        + "'" + groupID[1] + "'\n"
                        + ")";
                stmtMain.execute(MainInsertQuery);
            }

            JOptionPane.showMessageDialog(this, "Selected students are allocated to '" + event + "' successfully.");
            btnSave.setEnabled(false);
            stmtMain.close();
            stmtDeleteExist.close();
            stmtIfExist.close();

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        } catch (HeadlessException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    public double roundTwoDecimals(double d) {
        DecimalFormat twoDForm = new DecimalFormat("#.##");
        return Double.valueOf(twoDForm.format(d));
    }

    public double roundThreeDecimals(double d) {
        DecimalFormat threeDForm = new DecimalFormat("#.###");
        return Double.valueOf(threeDForm.format(d));
    }

    private void Refresh() {
        int x = JOptionPane.showConfirmDialog(this, "Refresh Stock Eidt window?", "Refresh", JOptionPane.YES_NO_OPTION);
        if (x == JOptionPane.YES_OPTION) {
            comboDepartment.setEnabled(true);
            buttonView.setEnabled(true);
            comboDepartment.setSelectedItem(select);
            comboSubDepartment.setSelectedItem(select);

            TextNumberOfEmpRanked.setText("");
            TextNumberOfEmpAtSubDepartment.setText("");

            try {
                int rowi = model_TableEmployee.getRowCount();
                for (int i = 0; i < rowi; i++) {
                    model_TableEmployee.removeRow(0);
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                JOptionPane.showMessageDialog(this, "Please contact for support.");
            }

            try {
                int rowi = model_TableStudentOfGroup.getRowCount();
                for (int i = 0; i < rowi; i++) {
                    model_TableStudentOfGroup.removeRow(0);
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                JOptionPane.showMessageDialog(this, "Please contact for support.");
            }
        }
    }

    private void exit() {
        if (jobAllocation != null) {
            jobAllocation = null;
        }
        this.dispose();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonAddSelected;
    private javax.swing.JButton ButtonRemoveSelected;
    private javax.swing.JTextField TextNumberOfEmpAtSubDepartment;
    private javax.swing.JTextField TextNumberOfEmpRanked;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnSave;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton buttonView;
    private javax.swing.JComboBox comboDepartment;
    private javax.swing.JComboBox comboSubDepartment;
    private javax.swing.JFormattedTextField formatedTextAllocatedTime;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JFormattedTextField jFormattedTextField1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel lbl_accountType1;
    private javax.swing.JLabel lbl_description;
    private javax.swing.JLabel lbl_description2;
    private javax.swing.JLabel lbl_description4;
    private javax.swing.JLabel lbl_description5;
    private javax.swing.JLabel lbl_description6;
    private javax.swing.JLabel lbl_subAccount;
    private javax.swing.JLabel lbl_subAccount1;
    private javax.swing.JLabel lbl_subAccount2;
    private javax.swing.JPanel panel1;
    private javax.swing.JSpinner spinnerEmpCount;
    private javax.swing.JSpinner spinnerItemCount;
    private javax.swing.JTable tableEmployee;
    private javax.swing.JTable tableFixedJobs;
    private javax.swing.JTable tableRankedEmployee;
    private javax.swing.JTextArea textAreaRemarks;
    // End of variables declaration//GEN-END:variables
}
