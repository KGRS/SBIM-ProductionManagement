/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Transactions;

import static MainFiles.IndexPage.allocateStudentsForEventGroup;
import db.ConnectSql;
import java.awt.HeadlessException;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DecimalFormat;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Ravindu
 */
public class JobAllocation extends javax.swing.JInternalFrame {

    private final String select = "--Select--";
    private final DefaultTableModel model_TableStudentOfGroup;
    private final DefaultTableModel model_TableStudentOfBatch;
    private final String spliter = "--";
    private final String menuName = "Job allocation";

    public JobAllocation() {
        initComponents();
//        loadBatchCodeToCombo();

        cmbDepartment.requestFocus();
        model_TableStudentOfGroup = (DefaultTableModel) tableRankedEmployee.getModel();
        model_TableStudentOfBatch = (DefaultTableModel) tableEmployee.getModel();
        panel1.setToolTipText("Press right mouse click to refresh.");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        panel1 = new javax.swing.JPanel();
        lbl_accountType1 = new javax.swing.JLabel();
        buttonView = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableEmployee = new javax.swing.JTable();
        cmbDepartment = new javax.swing.JComboBox();
        lbl_subAccount = new javax.swing.JLabel();
        ButtonAddSelected = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableRankedEmployee = new javax.swing.JTable();
        ButtonRemoveSelected = new javax.swing.JButton();
        lbl_subAccount1 = new javax.swing.JLabel();
        lbl_subAccount2 = new javax.swing.JLabel();
        TextNumberOfEmpRanked = new javax.swing.JTextField();
        TextNumberOfEmpAtSubDepartment = new javax.swing.JTextField();
        cmbSubDepartment = new javax.swing.JComboBox();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableDesignationRank = new javax.swing.JTable();

        setIconifiable(true);
        setTitle("Employee tree");
        setPreferredSize(new java.awt.Dimension(990, 688));
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameIconified(evt);
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        panel1.setBackground(new java.awt.Color(255, 255, 255));
        panel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.TRAILING, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Calibri", 1, 14), new java.awt.Color(153, 153, 153))); // NOI18N
        panel1.setForeground(new java.awt.Color(255, 255, 255));
        panel1.setPreferredSize(new java.awt.Dimension(950, 688));
        panel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panel1MouseClicked(evt);
            }
        });
        panel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lbl_accountType1.setForeground(new java.awt.Color(102, 102, 102));
        lbl_accountType1.setText("Department *");
        panel1.add(lbl_accountType1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 80, 20));

        buttonView.setText("View");
        buttonView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonViewActionPerformed(evt);
            }
        });
        panel1.add(buttonView, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 20, 90, 20));

        btnSave.setMnemonic('s');
        btnSave.setText("Save");
        btnSave.setActionCommand("Delete");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        panel1.add(btnSave, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 610, 80, -1));

        btnRefresh.setMnemonic('d');
        btnRefresh.setText("Refresh");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });
        panel1.add(btnRefresh, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 610, 80, -1));

        btnExit.setMnemonic('e');
        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });
        btnExit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnExitKeyPressed(evt);
            }
        });
        panel1.add(btnExit, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 610, 80, -1));

        tableEmployee.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Employee code", "First name", "Name with initials", "Calling name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableEmployee.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tableEmployee);
        if (tableEmployee.getColumnModel().getColumnCount() > 0) {
            tableEmployee.getColumnModel().getColumn(1).setPreferredWidth(100);
            tableEmployee.getColumnModel().getColumn(2).setPreferredWidth(200);
            tableEmployee.getColumnModel().getColumn(3).setPreferredWidth(100);
        }

        panel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, 510, 230));

        cmbDepartment.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Select--" }));
        cmbDepartment.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                cmbDepartmentPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        cmbDepartment.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmbDepartmentKeyPressed(evt);
            }
        });
        panel1.add(cmbDepartment, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 20, 250, 20));

        lbl_subAccount.setForeground(new java.awt.Color(102, 102, 102));
        lbl_subAccount.setText("Number of employees at selected sub department");
        panel1.add(lbl_subAccount, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 320, 250, 20));

        ButtonAddSelected.setText("Add selected");
        ButtonAddSelected.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonAddSelectedActionPerformed(evt);
            }
        });
        panel1.add(ButtonAddSelected, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 320, 130, -1));

        tableRankedEmployee.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Rank code", "Designation code", "Designation name", "Employee code", "First name", "Calling name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableRankedEmployee.getTableHeader().setReorderingAllowed(false);
        tableRankedEmployee.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableRankedEmployeeMouseClicked(evt);
            }
        });
        tableRankedEmployee.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tableRankedEmployeeKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(tableRankedEmployee);
        if (tableRankedEmployee.getColumnModel().getColumnCount() > 0) {
            tableRankedEmployee.getColumnModel().getColumn(4).setPreferredWidth(130);
            tableRankedEmployee.getColumnModel().getColumn(5).setPreferredWidth(130);
        }

        panel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 357, 930, 230));

        ButtonRemoveSelected.setText("Remove selected");
        ButtonRemoveSelected.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonRemoveSelectedActionPerformed(evt);
            }
        });
        panel1.add(ButtonRemoveSelected, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 320, 120, -1));

        lbl_subAccount1.setForeground(new java.awt.Color(102, 102, 102));
        lbl_subAccount1.setText("Sub department *");
        panel1.add(lbl_subAccount1, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 20, 100, 20));

        lbl_subAccount2.setForeground(new java.awt.Color(102, 102, 102));
        lbl_subAccount2.setText("Number of employees who given rank code");
        panel1.add(lbl_subAccount2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 610, 220, 20));

        TextNumberOfEmpRanked.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        TextNumberOfEmpRanked.setEnabled(false);
        panel1.add(TextNumberOfEmpRanked, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 610, 70, -1));

        TextNumberOfEmpAtSubDepartment.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        TextNumberOfEmpAtSubDepartment.setEnabled(false);
        panel1.add(TextNumberOfEmpAtSubDepartment, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 320, 70, -1));

        cmbSubDepartment.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Select--" }));
        cmbSubDepartment.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                cmbSubDepartmentPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        panel1.add(cmbSubDepartment, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 20, 240, -1));

        tableDesignationRank.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Rank code", "Designation code", "Designation name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableDesignationRank.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(tableDesignationRank);

        panel1.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(552, 70, 400, 230));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel1, javax.swing.GroupLayout.PREFERRED_SIZE, 973, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel1, javax.swing.GroupLayout.DEFAULT_SIZE, 659, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void RefreshTable() {
        try {
            int row = model_TableStudentOfBatch.getRowCount();
            for (int j = 0; j < row; j++) {
                model_TableStudentOfBatch.removeRow(0);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void loadStudentByBatch(String studentID) {
        try {
            ResultSet reset;
            Statement stmt;
            String query;
            int rowCount = 0;
            RefreshTable();
            query = "SELECT STUDENT_ID, STUDENT_FIRST_NAME, STUDENT_NAME_INITIAL"
                    + ", student_batch_BATCH_WITH_DEPARTMENT_CODE FROM students WHERE "
                    + "student_batch_BATCH_WITH_DEPARTMENT_CODE = '" + studentID + "' "
                    + "AND IS_ACTIVE = 'Yes'";

            stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            reset = stmt.executeQuery(query);

            while (reset.next()) {
                model_TableStudentOfBatch.addRow(new Object[model_TableStudentOfBatch.getColumnCount()]);
                tableEmployee.setValueAt(reset.getString("STUDENT_ID"), rowCount, 0);
                tableEmployee.setValueAt(reset.getString("STUDENT_FIRST_NAME"), rowCount, 1);
                tableEmployee.setValueAt(reset.getString("STUDENT_NAME_INITIAL"), rowCount, 2);
                tableEmployee.setValueAt(reset.getString("student_batch_BATCH_WITH_DEPARTMENT_CODE"), rowCount, 3);
                rowCount++;
            }
            TextNumberOfEmpAtSubDepartment.setText(String.valueOf(rowCount));
            reset.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void cmbDepartmentKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmbDepartmentKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String text = cmbDepartment.getSelectedItem().toString();
            if (!text.equals(select)) {
                loadGroupsToCombo();
                btnSave.requestFocus();
            }
        }
    }//GEN-LAST:event_cmbDepartmentKeyPressed

    private void cmbDepartmentPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_cmbDepartmentPopupMenuWillBecomeInvisible
        String text = cmbDepartment.getSelectedItem().toString();
        if (!text.equals(select)) {
            loadGroupsToCombo();
            btnSave.requestFocus();
        }
    }//GEN-LAST:event_cmbDepartmentPopupMenuWillBecomeInvisible

    private void btnExitKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnExitKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            exit();
        }
    }//GEN-LAST:event_btnExitKeyPressed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        exit();
    }//GEN-LAST:event_btnExitActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        Refresh();
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        CheckBeforeSave();
    }//GEN-LAST:event_btnSaveActionPerformed

    private void buttonViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonViewActionPerformed
        String Batch = cmbDepartment.getSelectedItem().toString();
        if (!Batch.equals(select)) {
            String BatchCode[] = cmbDepartment.getSelectedItem().toString().split("--");
            loadStudentByBatch(BatchCode[0]);
        } else if (Batch.equals(select)) {
            JOptionPane.showMessageDialog(this, "Batch is not selected.", "Not selected", JOptionPane.OK_OPTION);
            cmbDepartment.requestFocus();
        }
    }//GEN-LAST:event_buttonViewActionPerformed

    private void panel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panel1MouseClicked
        if (SwingUtilities.isRightMouseButton(evt) || evt.isControlDown()) {
            Refresh();
        }
    }//GEN-LAST:event_panel1MouseClicked

    private void ButtonAddSelectedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonAddSelectedActionPerformed
        int SelectedRowCount = tableEmployee.getSelectedRowCount();
        if (SelectedRowCount == 1) {
            String studntFromBtch = tableEmployee.getValueAt(tableEmployee.getSelectedRow(), 0).toString();
            Object[] CheckStudentAlreadyAdded = CheckIfStudentAlreadyAdded(studntFromBtch);
            if ((Boolean) CheckStudentAlreadyAdded[0]) {
                JOptionPane.showMessageDialog(this, "Student is already allocated.", "Already allocated.", JOptionPane.OK_OPTION);
            } else {
                addToAllocateTable();
            }
        }
    }//GEN-LAST:event_ButtonAddSelectedActionPerformed

    private void addToAllocateTable() {
        String Code, FirstName, NameWithIni, batchCode;
        int SelectedRow = tableEmployee.getSelectedRow();
        try {
            Code = tableEmployee.getValueAt(SelectedRow, 0).toString();
            FirstName = tableEmployee.getValueAt(SelectedRow, 1).toString();
            NameWithIni = tableEmployee.getValueAt(SelectedRow, 2).toString();
            batchCode = tableEmployee.getValueAt(SelectedRow, 3).toString();

            model_TableStudentOfGroup.addRow(new Object[]{Code, FirstName, NameWithIni, batchCode});
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void tableRankedEmployeeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableRankedEmployeeMouseClicked
        if (evt.getClickCount() == 2) {
            tableStudentsOfGroup();
        }
    }//GEN-LAST:event_tableRankedEmployeeMouseClicked

    private void tableStudentsOfGroup() {
        int x = JOptionPane.showConfirmDialog(this, "Are you sure To remove selected student?", "Remove student?", JOptionPane.YES_NO_OPTION);
        if (x == JOptionPane.YES_OPTION) {
            int i = tableRankedEmployee.getSelectedRow();
            try {
                String groupID[] = cmbSubDepartment.getSelectedItem().toString().split("--");
                java.sql.Statement stmtIfExist = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                java.sql.Statement stmtDeleteExist = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                String Checkquery = "select * From event_student_attendees where GROUP_ID = '" + groupID[1] + "'";
                ResultSet IfExistRset = stmtIfExist.executeQuery(Checkquery);

                if (IfExistRset.next()) {
                    String studentID = tableRankedEmployee.getValueAt(i, 0).toString();
                    String deleteQuery = "delete From event_student_attendees where GROUP_ID = '" + groupID[1] + "' AND STUDENT_ID = '" + studentID + "'";
                    stmtDeleteExist.execute(deleteQuery);
                }
                model_TableStudentOfGroup.removeRow(i);
                int EditedRowCount = tableRankedEmployee.getRowCount();
                TextNumberOfEmpAtSubDepartment.setText(String.valueOf(EditedRowCount));
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                JOptionPane.showMessageDialog(this, "Please contact for support.");
            }
        }
    }

    private void tableRankedEmployeeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tableRankedEmployeeKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_DELETE) {
            tableStudentsOfGroup();
        }
    }//GEN-LAST:event_tableRankedEmployeeKeyPressed

    private void formInternalFrameIconified(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameIconified
        allocateStudentsForEventGroup.toFront();
    }//GEN-LAST:event_formInternalFrameIconified

    private void cmbSubDepartmentPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_cmbSubDepartmentPopupMenuWillBecomeInvisible
        String group = cmbSubDepartment.getSelectedItem().toString();
        if (!group.equals(select)) {
            String groupID[] = cmbSubDepartment.getSelectedItem().toString().split("--");
            loadStudentsOfGroup(groupID[1]);
        }
    }//GEN-LAST:event_cmbSubDepartmentPopupMenuWillBecomeInvisible

    private void ButtonRemoveSelectedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonRemoveSelectedActionPerformed
        tableStudentsOfGroup();
    }//GEN-LAST:event_ButtonRemoveSelectedActionPerformed

    private void loadStudentsOfGroup(String groupID) {
        try {
            int rowi = model_TableStudentOfGroup.getRowCount();
            for (int i = 0; i < rowi; i++) {
                model_TableStudentOfGroup.removeRow(0);
            }
            ResultSet RSETStudentsOfGroup;
            int rowCount = 0;
            java.sql.Statement stmtStudentsOfGroup = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            String StudentsOfGroupQuery = "SELECT\n"
                    + "     events.`EVENT_NAME` AS events_EVENT_NAME,\n"
                    + "     event_student_attendees.`GROUP_ID` AS event_student_attendees_GROUP_ID,\n"
                    + "     event_student_attendees.`STUDENT_ID` AS event_student_attendees_STUDENT_ID,\n"
                    + "     event_student_attendees.`EVENT_CODE` AS event_student_attendees_EVENT_CODE,\n"
                    + "     event_student_attendees.`IS_CONFERMATION_SENT_TO_STUDENT` AS event_student_attendees_IS_CONFERMATION_SENT_TO_STUDENT,\n"
                    + "     event_student_attendees.`student_event_groups_GROUP_ID` AS event_student_attendees_student_event_groups_GROUP_ID,\n"
                    + "     students.`STUDENT_FIRST_NAME` AS students_STUDENT_FIRST_NAME,\n"
                    + "     students.`STUDENT_NAME_INITIAL` AS students_STUDENT_NAME_INITIAL,\n"
                    + "     students.`student_batch_BATCH_WITH_DEPARTMENT_CODE` AS students_student_batch_BATCH_WITH_DEPARTMENT_CODE\n"
                    + "FROM\n"
                    + "     `events` events INNER JOIN `event_student_attendees` event_student_attendees ON events.`EVENT_CODE` = event_student_attendees.`EVENT_CODE`\n"
                    + "     INNER JOIN `students` students ON event_student_attendees.`STUDENT_ID` = students.`STUDENT_ID`\n"
                    + "WHERE\n"
                    + "     event_student_attendees.`GROUP_ID` = '" + groupID + "'";
            RSETStudentsOfGroup = stmtStudentsOfGroup.executeQuery(StudentsOfGroupQuery);
            while (RSETStudentsOfGroup.next()) {
                model_TableStudentOfGroup.addRow(new Object[model_TableStudentOfGroup.getColumnCount()]);
                tableRankedEmployee.setValueAt(RSETStudentsOfGroup.getString("event_student_attendees_STUDENT_ID"), rowCount, 0);
                tableRankedEmployee.setValueAt(RSETStudentsOfGroup.getString("students_STUDENT_FIRST_NAME"), rowCount, 1);
                tableRankedEmployee.setValueAt(RSETStudentsOfGroup.getString("students_STUDENT_NAME_INITIAL"), rowCount, 2);
                tableRankedEmployee.setValueAt(RSETStudentsOfGroup.getString("students_student_batch_BATCH_WITH_DEPARTMENT_CODE"), rowCount, 3);
                rowCount++;

                String eventCode = RSETStudentsOfGroup.getString("event_student_attendees_EVENT_CODE");
                String eventName = RSETStudentsOfGroup.getString("events_EVENT_NAME");
            }

//            if (RSETStudentsOfGroup.next()) {
//
//            }
            TextNumberOfEmpRanked.setText(String.valueOf(rowCount));
            cmbDepartment.setEnabled(false);
            buttonView.setEnabled(false);

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        } catch (HeadlessException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    protected Object[] CheckIfStudentAlreadyAdded(String studntFromBtch) {
        int rowCount = model_TableStudentOfGroup.getRowCount();
        Object[] data = new Object[2];
        data[0] = false;
        data[1] = -1;

        for (int i = 0; i < rowCount; i++) {
            String studentAllocateToEvent = model_TableStudentOfGroup.getValueAt(i, 0).toString();
            if (studntFromBtch.equals(studentAllocateToEvent)) {
                data[0] = true;
                data[1] = i;
            }
        }
        return data;
    }

    private void loadBatchCodeToCombo() {
        try {
            java.sql.Statement stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            String query = "select BATCH_WITH_DEPARTMENT_CODE, BATCH_YEAR From student_batch order by BATCH_WITH_DEPARTMENT_CODE DESC";
            ResultSet rset = stmt.executeQuery(query);

            cmbDepartment.removeAllItems();
            cmbDepartment.insertItemAt("--Select--", 0);
            int position = 1;
            if (rset.next()) {
                do {
                    cmbDepartment.insertItemAt(rset.getString("BATCH_WITH_DEPARTMENT_CODE") + "--" + rset.getString("BATCH_YEAR"), position);
                    position++;
                } while (rset.next());
            }
            cmbDepartment.setSelectedIndex(0);

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", ERROR);
        }
    }

    private void loadGroupsToCombo() {
        try {
            String batchCode[] = cmbDepartment.getSelectedItem().toString().split("--");
            java.sql.Statement stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            String query = "SELECT GROUP_ID, GROUP_NAME FROM student_event_groups WHERE student_batch_BATCH_WITH_DEPARTMENT_CODE = '" + batchCode[0] + "' AND STATUS = 'Pending' ORDER BY GROUP_NAME";
            ResultSet rset = stmt.executeQuery(query);

            cmbSubDepartment.removeAllItems();
            cmbSubDepartment.insertItemAt("--Select--", 0);
            int position = 1;
            if (rset.next()) {
                do {
                    cmbSubDepartment.insertItemAt(rset.getString("GROUP_NAME") + "--" + rset.getString("GROUP_ID"), position);
                    position++;
                } while (rset.next());
            }
            cmbSubDepartment.setSelectedIndex(0);

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", ERROR);
        }
    }

    private void CheckBeforeSave() {
        int RowCount = tableRankedEmployee.getRowCount();
        String Batch = cmbDepartment.getSelectedItem().toString();
        String group = cmbSubDepartment.getSelectedItem().toString();

        if (Batch.equals(select) || group.equals(select)) {
            JOptionPane.showMessageDialog(this, "Batch or group is not selected.", "Not selected", JOptionPane.OK_OPTION);
        } else if (RowCount <= 0) {
            JOptionPane.showMessageDialog(this, "Students are not available at table.", "No students", JOptionPane.OK_OPTION);
        } else if (!Batch.equals(select) && RowCount > 0 && !group.equals(select)) {
            int x = JOptionPane.showConfirmDialog(this, "Are you sure to allocate these stduents?", "Save?", JOptionPane.YES_NO_OPTION);
            if (x == JOptionPane.YES_OPTION) {
                allocateStudents();
            }
        }
    }

    private void allocateStudents() {
        String studentID, event;
        int RowCount = tableRankedEmployee.getRowCount();
        String groupID[] = cmbSubDepartment.getSelectedItem().toString().split("--");
        String eventCode[] = cmbSubDepartment.getSelectedItem().toString().split("--");
        event = "";
        String SENT_TO_STUDENT = "No";

        try {
            java.sql.Statement stmtMain = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            java.sql.Statement stmtDeleteExist = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            java.sql.Statement stmtIfExist = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            String Checkquery = "select * From event_student_attendees where GROUP_ID = '" + groupID[1] + "'";
            ResultSet IfExistRset = stmtIfExist.executeQuery(Checkquery);

            for (int i = 0; i < RowCount; i++) {
                studentID = tableRankedEmployee.getValueAt(i, 0).toString();

                if (IfExistRset.next()) {
                    String deleteQuery = "delete From event_student_attendees where GROUP_ID = '" + groupID[1] + "' AND STUDENT_ID = '" + studentID + "'";
                    stmtDeleteExist.execute(deleteQuery);
                }

                String MainInsertQuery = "INSERT INTO `event_student_attendees`\n"
                        + "(`GROUP_ID`,\n"
                        + "`STUDENT_ID`,\n"
                        + "`EVENT_CODE`,\n"
                        + "`IS_CONFERMATION_SENT_TO_STUDENT`,\n"
                        + "`student_event_groups_GROUP_ID`)\n"
                        + "VALUES\n"
                        + "(\n"
                        + "'" + groupID[1] + "',\n"
                        + "'" + studentID + "',\n"
                        + "'" + eventCode[1] + "',\n"
                        + "'" + SENT_TO_STUDENT + "',\n"
                        + "'" + groupID[1] + "'\n"
                        + ")";
                stmtMain.execute(MainInsertQuery);
            }

            JOptionPane.showMessageDialog(this, "Selected students are allocated to '" + event + "' successfully.");
            btnSave.setEnabled(false);
            stmtMain.close();
            stmtDeleteExist.close();
            stmtIfExist.close();

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        } catch (HeadlessException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    public double roundTwoDecimals(double d) {
        DecimalFormat twoDForm = new DecimalFormat("#.##");
        return Double.valueOf(twoDForm.format(d));
    }

    public double roundThreeDecimals(double d) {
        DecimalFormat threeDForm = new DecimalFormat("#.###");
        return Double.valueOf(threeDForm.format(d));
    }

    private void Refresh() {
        int x = JOptionPane.showConfirmDialog(this, "Refresh Stock Eidt window?", "Refresh", JOptionPane.YES_NO_OPTION);
        if (x == JOptionPane.YES_OPTION) {
            cmbDepartment.setEnabled(true);
            buttonView.setEnabled(true);
            cmbDepartment.setSelectedItem(select);
            cmbSubDepartment.setSelectedItem(select);

            TextNumberOfEmpRanked.setText("");
            TextNumberOfEmpAtSubDepartment.setText("");

            try {
                int rowi = model_TableStudentOfBatch.getRowCount();
                for (int i = 0; i < rowi; i++) {
                    model_TableStudentOfBatch.removeRow(0);
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                JOptionPane.showMessageDialog(this, "Please contact for support.");
            }

            try {
                int rowi = model_TableStudentOfGroup.getRowCount();
                for (int i = 0; i < rowi; i++) {
                    model_TableStudentOfGroup.removeRow(0);
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                JOptionPane.showMessageDialog(this, "Please contact for support.");
            }
        }
    }

    private void exit() {
        if (allocateStudentsForEventGroup != null) {
            allocateStudentsForEventGroup = null;
        }
        this.dispose();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonAddSelected;
    private javax.swing.JButton ButtonRemoveSelected;
    private javax.swing.JTextField TextNumberOfEmpAtSubDepartment;
    private javax.swing.JTextField TextNumberOfEmpRanked;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnSave;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton buttonView;
    private javax.swing.JComboBox cmbDepartment;
    private javax.swing.JComboBox cmbSubDepartment;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lbl_accountType1;
    private javax.swing.JLabel lbl_subAccount;
    private javax.swing.JLabel lbl_subAccount1;
    private javax.swing.JLabel lbl_subAccount2;
    private javax.swing.JPanel panel1;
    private javax.swing.JTable tableDesignationRank;
    private javax.swing.JTable tableEmployee;
    private javax.swing.JTable tableRankedEmployee;
    // End of variables declaration//GEN-END:variables
}
