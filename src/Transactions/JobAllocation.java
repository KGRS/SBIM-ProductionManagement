/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Transactions;

import MainFiles.IndexPage;
import static MainFiles.IndexPage.dskPane_RightPanel;
import static MainFiles.IndexPage.jobAllocation;
import static MainFiles.IndexPage.materialRequisitionNoteForProItems;
import db.ConnectSql;
import functions.AverageTimeOfPLItems;
import functions.DocNumGenerator;
import java.awt.HeadlessException;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Ravindu
 */
public class JobAllocation extends javax.swing.JInternalFrame {

    private final String select = "--Select--";
    private final DefaultTableModel model_TableAllocatedEmployees;
    private final DefaultTableModel model_TableEmployee;
    private final DefaultTableModel model_TableFixedJobs;
    private final String spliter = "--";
    private final String menuName = "Job allocation";
    private final String logUser = IndexPage.LabelUser.getText();
    private DocNumGenerator AutoID;
    String jobID = "", Name = "", productLevel = "", productLevelItemCode = "", productLevelItemName = "", remarks = "", jobAllocatedDate = "", jobAllocatedtime = "", allocatedtime = "", emptyFields = "", employeeID = "", FirstName = "", NameWithIni = "", callName = "", fixedJobID = "", statusOfJob = "", emptyField = "", jobFinishedTime = "", jobFinishedDate = "", superviseBy;
    int itemCount, itemCompleted = 0;
    String JOB_ALLOCATED_TIME, JOB_ALLOCATED_DATE, isLate;
    int ALLOCATED_TIME;
    long millisecondsjobAllocatedTime, millisecondsAllocatedTime, millisecondsAllocatedFinishingTime, millisecondsCurrentTime;
    SimpleDateFormat commonTimeFormate = new SimpleDateFormat("hh:mm:ss");
    private final String logDate = IndexPage.LabelDate.getText();

    public JobAllocation() {
        initComponents();
        comboDepartment.requestFocus();
        model_TableAllocatedEmployees = (DefaultTableModel) tableAllocatedEmployee.getModel();
        model_TableEmployee = (DefaultTableModel) tableEmployee.getModel();
        model_TableFixedJobs = (DefaultTableModel) tableFixedJobs.getModel();
        panel1.setToolTipText("Press right mouse click to refresh.");
        this.setTitle(menuName);
        loadDepartmentsToCombo();
        rBtnProductLevel1.setSelected(true);
        textStartTime.setEditable(false);
        calendarButtonStartDate.setText(logDate);
        calendarButtonEndDate.setText(logDate);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        panel1 = new javax.swing.JPanel();
        lbl_accountType1 = new javax.swing.JLabel();
        buttonView = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableEmployee = new javax.swing.JTable();
        comboDepartment = new javax.swing.JComboBox();
        lbl_subAccount = new javax.swing.JLabel();
        ButtonAddSelected = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableAllocatedEmployee = new javax.swing.JTable();
        ButtonRemoveSelected = new javax.swing.JButton();
        lbl_subAccount1 = new javax.swing.JLabel();
        lbl_subAccount2 = new javax.swing.JLabel();
        textNumberOfEmpAllocatedToJob = new javax.swing.JTextField();
        TextNumberOfEmpAtDepartment = new javax.swing.JTextField();
        comboSubDepartment = new javax.swing.JComboBox();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableFixedJobs = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        lbl_description5 = new javax.swing.JLabel();
        lbl_description2 = new javax.swing.JLabel();
        spinnerItemCount = new javax.swing.JSpinner();
        formatedTextAllocatedTime = new javax.swing.JFormattedTextField();
        lbl_description4 = new javax.swing.JLabel();
        lbl_description = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        textAreaRemarks = new javax.swing.JTextArea();
        spinnerEmpCount = new javax.swing.JSpinner();
        textStartTime = new javax.swing.JFormattedTextField();
        lbl_description6 = new javax.swing.JLabel();
        checkBoxGetJobSavingTime = new javax.swing.JCheckBox();
        lbl_description7 = new javax.swing.JLabel();
        lbl_description8 = new javax.swing.JLabel();
        calendarButtonStartDate = new net.sourceforge.jcalendarbutton.JCalendarButton();
        textEndTime = new javax.swing.JTextField();
        lbl_description9 = new javax.swing.JLabel();
        calendarButtonEndDate = new net.sourceforge.jcalendarbutton.JCalendarButton();
        buttonGetSuggestTime = new javax.swing.JButton();
        lbl_description3 = new javax.swing.JLabel();
        comboSuperviousBy = new javax.swing.JComboBox();
        rBtnProductLevel1 = new javax.swing.JRadioButton();
        rBtnProductLevel2 = new javax.swing.JRadioButton();
        textFieldJobCode = new javax.swing.JTextField();
        buttonPrepareMRN = new javax.swing.JButton();

        setIconifiable(true);
        setPreferredSize(new java.awt.Dimension(1070, 675));
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameIconified(evt);
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        panel1.setBackground(new java.awt.Color(255, 255, 255));
        panel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.TRAILING, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Calibri", 1, 14), new java.awt.Color(153, 153, 153))); // NOI18N
        panel1.setForeground(new java.awt.Color(255, 255, 255));
        panel1.setPreferredSize(new java.awt.Dimension(950, 688));
        panel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panel1MouseClicked(evt);
            }
        });
        panel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lbl_accountType1.setForeground(new java.awt.Color(102, 102, 102));
        lbl_accountType1.setText("Department *");
        panel1.add(lbl_accountType1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 80, 20));

        buttonView.setText("View");
        buttonView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonViewActionPerformed(evt);
            }
        });
        panel1.add(buttonView, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 100, 90, 20));

        btnSave.setMnemonic('s');
        btnSave.setText("Save");
        btnSave.setActionCommand("Delete");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        panel1.add(btnSave, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 610, 80, -1));

        btnRefresh.setMnemonic('d');
        btnRefresh.setText("Refresh");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });
        panel1.add(btnRefresh, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 610, 80, -1));

        btnExit.setMnemonic('e');
        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });
        btnExit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnExitKeyPressed(evt);
            }
        });
        panel1.add(btnExit, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 610, 80, -1));

        tableEmployee.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Employee code", "First name", "Name with initials", "Calling name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableEmployee.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tableEmployee);

        panel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 380, 440, 210));

        comboDepartment.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Select--" }));
        comboDepartment.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                comboDepartmentPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        comboDepartment.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                comboDepartmentKeyPressed(evt);
            }
        });
        panel1.add(comboDepartment, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 20, 330, 20));

        lbl_subAccount.setForeground(new java.awt.Color(102, 102, 102));
        lbl_subAccount.setText("Number of employees at selected department");
        panel1.add(lbl_subAccount, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 340, 230, 20));

        ButtonAddSelected.setText("-->>");
        ButtonAddSelected.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonAddSelectedActionPerformed(evt);
            }
        });
        panel1.add(ButtonAddSelected, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 470, 90, -1));

        tableAllocatedEmployee.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Employee code", "First name", "Name with initials", "Calling name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableAllocatedEmployee.getTableHeader().setReorderingAllowed(false);
        tableAllocatedEmployee.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableAllocatedEmployeeMouseClicked(evt);
            }
        });
        tableAllocatedEmployee.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tableAllocatedEmployeeKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(tableAllocatedEmployee);

        panel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 377, 440, 210));

        ButtonRemoveSelected.setText("<<--");
        ButtonRemoveSelected.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonRemoveSelectedActionPerformed(evt);
            }
        });
        panel1.add(ButtonRemoveSelected, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 500, 90, -1));

        lbl_subAccount1.setForeground(new java.awt.Color(102, 102, 102));
        lbl_subAccount1.setText("Sub department *");
        panel1.add(lbl_subAccount1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, 100, 20));

        lbl_subAccount2.setForeground(new java.awt.Color(102, 102, 102));
        lbl_subAccount2.setText("Number of employees allocated to the job");
        panel1.add(lbl_subAccount2, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 340, 220, 20));

        textNumberOfEmpAllocatedToJob.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        textNumberOfEmpAllocatedToJob.setEnabled(false);
        panel1.add(textNumberOfEmpAllocatedToJob, new org.netbeans.lib.awtextra.AbsoluteConstraints(960, 340, 70, -1));

        TextNumberOfEmpAtDepartment.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        TextNumberOfEmpAtDepartment.setEnabled(false);
        panel1.add(TextNumberOfEmpAtDepartment, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 340, 70, -1));

        comboSubDepartment.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Select--" }));
        comboSubDepartment.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                comboSubDepartmentPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        panel1.add(comboSubDepartment, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 60, 330, -1));

        tableFixedJobs.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Fixed job/ Process code", "Fixed job/ Process name", "Item count", "Product level item code"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableFixedJobs.getTableHeader().setReorderingAllowed(false);
        tableFixedJobs.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableFixedJobsMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tableFixedJobs);
        if (tableFixedJobs.getColumnModel().getColumnCount() > 0) {
            tableFixedJobs.getColumnModel().getColumn(2).setPreferredWidth(30);
        }

        panel1.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 140, 440, 180));

        lbl_description5.setForeground(new java.awt.Color(102, 102, 102));
        lbl_description5.setText("Allocated time (minutes) *");

        lbl_description2.setForeground(new java.awt.Color(102, 102, 102));
        lbl_description2.setText("Item count *");

        spinnerItemCount.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(1), Integer.valueOf(1), null, Integer.valueOf(1)));

        formatedTextAllocatedTime.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        formatedTextAllocatedTime.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        formatedTextAllocatedTime.setText("30");

        lbl_description4.setForeground(new java.awt.Color(102, 102, 102));
        lbl_description4.setText("Employee count *");

        lbl_description.setForeground(new java.awt.Color(102, 102, 102));
        lbl_description.setText("Remarks");

        textAreaRemarks.setColumns(20);
        textAreaRemarks.setRows(5);
        jScrollPane4.setViewportView(textAreaRemarks);

        spinnerEmpCount.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(1), Integer.valueOf(1), null, Integer.valueOf(1)));

        textStartTime.setText("Saving time");

        lbl_description6.setForeground(new java.awt.Color(102, 102, 102));
        lbl_description6.setText("Start time *");

        checkBoxGetJobSavingTime.setForeground(new java.awt.Color(102, 102, 102));
        checkBoxGetJobSavingTime.setSelected(true);
        checkBoxGetJobSavingTime.setText("Get saving time as start time");
        checkBoxGetJobSavingTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxGetJobSavingTimeActionPerformed(evt);
            }
        });

        lbl_description7.setForeground(new java.awt.Color(102, 102, 102));
        lbl_description7.setText("End time *");

        lbl_description8.setForeground(new java.awt.Color(102, 102, 102));
        lbl_description8.setText("End date *");

        calendarButtonStartDate.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                calendarButtonStartDatePropertyChange(evt);
            }
        });

        lbl_description9.setForeground(new java.awt.Color(102, 102, 102));
        lbl_description9.setText("Start date *");

        calendarButtonEndDate.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                calendarButtonEndDatePropertyChange(evt);
            }
        });

        buttonGetSuggestTime.setText("Get suggest time for allocation");
        buttonGetSuggestTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGetSuggestTimeActionPerformed(evt);
            }
        });

        lbl_description3.setForeground(new java.awt.Color(102, 102, 102));
        lbl_description3.setText("Supervious by *");

        comboSuperviousBy.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Select--" }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(41, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lbl_description3, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(comboSuperviousBy, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(lbl_description8, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(calendarButtonEndDate, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(lbl_description2, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(26, 26, 26))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(lbl_description9, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(spinnerItemCount, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(calendarButtonStartDate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(lbl_description5, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10)
                                .addComponent(formatedTextAllocatedTime, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(lbl_description, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(48, 48, 48)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(lbl_description6, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lbl_description4, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(textStartTime, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(spinnerEmpCount, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(lbl_description7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(25, 25, 25)
                                .addComponent(textEndTime, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(checkBoxGetJobSavingTime, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(buttonGetSuggestTime, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(32, 32, 32))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(22, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_description3, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboSuperviousBy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbl_description2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(spinnerItemCount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(calendarButtonStartDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lbl_description9, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lbl_description5, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(formatedTextAllocatedTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lbl_description8, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(calendarButtonEndDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lbl_description6, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(textStartTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(59, 59, 59)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lbl_description7, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(textEndTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lbl_description, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(checkBoxGetJobSavingTime)
                                .addGap(18, 18, 18)
                                .addComponent(buttonGetSuggestTime))))
                    .addComponent(lbl_description4, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spinnerEmpCount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        panel1.add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 20, 540, 300));

        rBtnProductLevel1.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(rBtnProductLevel1);
        rBtnProductLevel1.setForeground(new java.awt.Color(102, 102, 102));
        rBtnProductLevel1.setText("Product level 1");
        panel1.add(rBtnProductLevel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 100, 120, -1));

        rBtnProductLevel2.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(rBtnProductLevel2);
        rBtnProductLevel2.setForeground(new java.awt.Color(102, 102, 102));
        rBtnProductLevel2.setText("Product level 2");
        panel1.add(rBtnProductLevel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 100, 120, -1));

        textFieldJobCode.setEditable(false);
        panel1.add(textFieldJobCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 610, 110, -1));

        buttonPrepareMRN.setText("Prepare MRN");
        buttonPrepareMRN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPrepareMRNActionPerformed(evt);
            }
        });
        panel1.add(buttonPrepareMRN, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 610, 130, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1054, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel1, javax.swing.GroupLayout.DEFAULT_SIZE, 645, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void RefreshTable() {
        try {
            int row = model_TableFixedJobs.getRowCount();
            for (int j = 0; j < row; j++) {
                model_TableFixedJobs.removeRow(0);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void RefreshEmployeeTable() {
        try {
            int row = model_TableEmployee.getRowCount();
            for (int j = 0; j < row; j++) {
                model_TableEmployee.removeRow(0);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void loadFixedJobsToTable(String subDepartmentCode) {
        if (rBtnProductLevel1.isSelected()) {
            try {
                ResultSet reset;
                Statement stmt;
                String query;
                int rowCount = 0;
                RefreshTable();

                query = "SELECT DISTINCT\n"
                        + "     ProductLevel1.\"PL1_ITEM_NAME\" AS ProductLevel1_PL1_ITEM_NAME,\n"
                        + "     JobFixed.\"JOB_FIXED_ID\" AS JobFixed_JOB_FIXED_ID,\n"
                        + "     JobFixed.\"JOB_FIXED_NAME\" AS JobFixed_JOB_FIXED_NAME,\n"
                        + "     JobFixed.\"PRODUCT_LEVEL\" AS JobFixed_PRODUCT_LEVEL,\n"
                        + "     JobFixed.\"PRODUCT_LEVEL_ITEM_CODE\" AS JobFixed_PRODUCT_LEVEL_ITEM_CODE,\n"
                        + "     JobFixed.\"ITEM_COUNT\" AS JobFixed_ITEM_COUNT,\n"
                        + "     JobFixed.\"ALLOCATED_TIME\" AS JobFixed_ALLOCATED_TIME,\n"
                        + "     JobFixed.\"EMPLOYEE_COUNT\" AS JobFixed_EMPLOYEE_COUNT,\n"
                        + "     JobFixed.\"REMARKS\" AS JobFixed_REMARKS,\n"
                        + "     JobFixed.\"SUB_DEPARTMENT_CODE\" AS JobFixed_SUB_DEPARTMENT_CODE,\n"
                        + "     ProductLevel1.\"UnitCode\" AS ProductLevel1_UnitCode,\n"
                        + "     ProductLevel1.\"VISIBILITY\" AS ProductLevel1_VISIBILITY \n"
                        + "FROM\n"
                        + "     \"dbo\".\"ProductLevel1\" ProductLevel1 INNER JOIN \"dbo\".\"JobFixed\" JobFixed ON ProductLevel1.\"PL1_ITEM_CODE\" = JobFixed.\"PRODUCT_LEVEL_ITEM_CODE\"\n"
                        + "WHERE\n"
                        + "     JobFixed.\"SUB_DEPARTMENT_CODE\" = '" + subDepartmentCode + "' AND ProductLevel1.\"VISIBILITY\"= 'Yes'";
                stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                reset = stmt.executeQuery(query);

                while (reset.next()) {
                    model_TableFixedJobs.addRow(new Object[model_TableFixedJobs.getColumnCount()]);
                    tableFixedJobs.setValueAt(reset.getString("JobFixed_JOB_FIXED_ID"), rowCount, 0);
                    tableFixedJobs.setValueAt(reset.getString("JobFixed_JOB_FIXED_NAME"), rowCount, 1);
                    tableFixedJobs.setValueAt(reset.getString("JobFixed_ITEM_COUNT"), rowCount, 2);
                    tableFixedJobs.setValueAt(reset.getString("JobFixed_PRODUCT_LEVEL_ITEM_CODE"), rowCount, 3);
                    rowCount++;
                }
                reset.close();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                JOptionPane.showMessageDialog(this, "Please contact for support.");
            }
        } else if (rBtnProductLevel2.isSelected()) {
            try {
                ResultSet reset;
                Statement stmt;
                String query;
                int rowCount = 0;
                RefreshTable();

                query = "SELECT DISTINCT\n"
                        + "     JobFixed.\"JOB_FIXED_ID\" AS JobFixed_JOB_FIXED_ID,\n"
                        + "     JobFixed.\"JOB_FIXED_NAME\" AS JobFixed_JOB_FIXED_NAME,\n"
                        + "     JobFixed.\"PRODUCT_LEVEL\" AS JobFixed_PRODUCT_LEVEL,\n"
                        + "     JobFixed.\"PRODUCT_LEVEL_ITEM_CODE\" AS JobFixed_PRODUCT_LEVEL_ITEM_CODE,\n"
                        + "     JobFixed.\"ITEM_COUNT\" AS JobFixed_ITEM_COUNT,\n"
                        + "     JobFixed.\"ALLOCATED_TIME\" AS JobFixed_ALLOCATED_TIME,\n"
                        + "     JobFixed.\"EMPLOYEE_COUNT\" AS JobFixed_EMPLOYEE_COUNT,\n"
                        + "     JobFixed.\"REMARKS\" AS JobFixed_REMARKS,\n"
                        + "     JobFixed.\"SUB_DEPARTMENT_CODE\" AS JobFixed_SUB_DEPARTMENT_CODE,\n"
                        + "     ProductLevel2.\"PL2_ITEM_NAME\" AS ProductLevel2_PL2_ITEM_NAME,\n"
                        + "     ProductLevel2.\"UnitCode\" AS ProductLevel2_UnitCode,\n"
                        + "     ProductLevel2.\"VISIBILITY\" AS ProductLevel2_VISIBILITY\n"
                        + "FROM\n"
                        + "     \"dbo\".\"ProductLevel2\" ProductLevel2 INNER JOIN \"dbo\".\"JobFixed\" JobFixed ON ProductLevel2.\"PL2_ITEM_CODE\" = JobFixed.\"PRODUCT_LEVEL_ITEM_CODE\"\n"
                        + "WHERE\n"
                        + "     JobFixed.\"SUB_DEPARTMENT_CODE\" = '" + subDepartmentCode + "' AND ProductLevel2.\"VISIBILITY\" = 'Yes'";
                stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                reset = stmt.executeQuery(query);

                while (reset.next()) {
                    model_TableFixedJobs.addRow(new Object[model_TableFixedJobs.getColumnCount()]);
                    tableFixedJobs.setValueAt(reset.getString("JobFixed_JOB_FIXED_ID"), rowCount, 0);
                    tableFixedJobs.setValueAt(reset.getString("JobFixed_JOB_FIXED_NAME"), rowCount, 1);
                    tableFixedJobs.setValueAt(reset.getString("JobFixed_ITEM_COUNT"), rowCount, 2);
                    tableFixedJobs.setValueAt(reset.getString("JobFixed_PRODUCT_LEVEL_ITEM_CODE"), rowCount, 3);
                    rowCount++;
                }
                reset.close();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                JOptionPane.showMessageDialog(this, "Please contact for support.");
            }
        }

    }

    private void loadDepartmentsToCombo() {
        try {
            java.sql.Statement stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            String query = "select DepartmentCode, DepartmentName From Departments order by DepartmentName";
            ResultSet rset = stmt.executeQuery(query);

            comboDepartment.removeAllItems();
            comboDepartment.insertItemAt(select, 0);
            int position = 1;
            if (rset.next()) {
                do {
                    comboDepartment.insertItemAt(rset.getString("DepartmentName") + spliter + rset.getString("DepartmentCode"), position); // 
                    position++;
                } while (rset.next());
            }
            comboDepartment.setSelectedIndex(0);

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void loadSubDepartmentsToCombo() {
        try {
            String departmentCode[] = comboDepartment.getSelectedItem().toString().split(spliter);
            java.sql.Statement stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            String query = "select SUB_DEPARTMENT_CODE, SUB_DEPARTMENT_NAME From SubDepartments WHERE DepartmentCode = '" + departmentCode[1] + "' order by SUB_DEPARTMENT_NAME";
            ResultSet rset = stmt.executeQuery(query);

            comboSubDepartment.removeAllItems();
            comboSubDepartment.insertItemAt(select, 0);
            int position = 1;
            if (rset.next()) {
                do {
                    comboSubDepartment.insertItemAt(rset.getString("SUB_DEPARTMENT_NAME") + spliter + rset.getString("SUB_DEPARTMENT_CODE"), position);
                    position++;
                } while (rset.next());
            }
            comboSubDepartment.setSelectedIndex(0);

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void loadSuperviseByToCombo(String subDepartmentCode) {
        try {
            java.sql.Statement stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            String query = "SELECT\n"
                    + "     EmployeeDesignationTree.\"SUB_DEPARTMENT_CODE\" AS EmployeeDesignationTree_SUB_DEPARTMENT_CODE,\n"
                    + "     EmployeeTree.\"EMPLOYEE_CODE\" AS EmployeeTree_EMPLOYEE_CODE,\n"
                    + "     EmployeeTree.\"RANK_CODE\" AS EmployeeTree_RANK_CODE,\n"
                    + "     EmployeeDesignation.\"EMPLOYEE_DESIGNATION_CODE\" AS EmployeeDesignation_EMPLOYEE_DESIGNATION_CODE,\n"
                    + "     EmployeeDesignation.\"IS_SUPERVISING\" AS EmployeeDesignation_IS_SUPERVISING,\n"
                    + "     Employees.\"FIRST_NAME\" AS Employees_FIRST_NAME,\n"
                    + "     Employees.\"SUR_NAME\" AS Employees_SUR_NAME\n"
                    + "FROM\n"
                    + "     \"dbo\".\"EmployeeDesignationTree\" EmployeeDesignationTree INNER JOIN \"dbo\".\"EmployeeTree\" EmployeeTree ON EmployeeDesignationTree.\"RANK_CODE\" = EmployeeTree.\"RANK_CODE\"\n"
                    + "     INNER JOIN \"dbo\".\"Employees\" Employees ON EmployeeTree.\"EMPLOYEE_CODE\" = Employees.\"EMPLOYEE_CODE\"\n"
                    + "     INNER JOIN \"dbo\".\"EmployeeDesignation\" EmployeeDesignation ON EmployeeDesignationTree.\"EMPLOYEE_DESIGNATION_CODE\" = EmployeeDesignation.\"EMPLOYEE_DESIGNATION_CODE\"\n"
                    + "WHERE\n"
                    + "     EmployeeDesignationTree.\"SUB_DEPARTMENT_CODE\" = '"+subDepartmentCode+"'\n"
                    + " AND EmployeeDesignation.\"IS_SUPERVISING\" = 'Yes'\n"
                    + "ORDER BY Employees.\"FIRST_NAME\"";
            ResultSet rset = stmt.executeQuery(query);
            comboSuperviousBy.removeAllItems();
            comboSuperviousBy.insertItemAt(select, 0);
            int position = 1;
            if (rset.next()) {
                do {
                    comboSuperviousBy.insertItemAt(rset.getString("Employees_FIRST_NAME") + spliter + rset.getString("Employees_SUR_NAME") + spliter + rset.getString("EmployeeTree_EMPLOYEE_CODE"), position);
                    position++;
                } while (rset.next());
            }
            comboSuperviousBy.setSelectedIndex(0);

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void comboDepartmentKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_comboDepartmentKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String text = comboDepartment.getSelectedItem().toString();
            if (!text.equals(select)) {
                loadSubDepartmentsToCombo();
                btnSave.requestFocus();
            }
        }
    }//GEN-LAST:event_comboDepartmentKeyPressed

    private void comboDepartmentPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_comboDepartmentPopupMenuWillBecomeInvisible
        String text = comboDepartment.getSelectedItem().toString();
        if (!text.equals(select)) {
            loadSubDepartmentsToCombo();
            btnSave.requestFocus();
        }
    }//GEN-LAST:event_comboDepartmentPopupMenuWillBecomeInvisible

    private void btnExitKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnExitKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            exit();
        }
    }//GEN-LAST:event_btnExitKeyPressed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        exit();
    }//GEN-LAST:event_btnExitActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        Refresh();
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        CheckBeforeSave();
    }//GEN-LAST:event_btnSaveActionPerformed

    private void buttonViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonViewActionPerformed
        String subDepartment = comboSubDepartment.getSelectedItem().toString();
        if (!subDepartment.equals(select)) {
            String subDepartmentCode[] = comboSubDepartment.getSelectedItem().toString().split(spliter);
            String departmentCode[] = comboDepartment.getSelectedItem().toString().split(spliter);
            loadFixedJobsToTable(subDepartmentCode[1]);
            loadAllEmployeesToTable(subDepartmentCode[1]);
            loadSuperviseByToCombo(subDepartmentCode[1]);
        } else if (subDepartment.equals(select)) {
            JOptionPane.showMessageDialog(this, "Sub department is not selected.", "Not selected", JOptionPane.OK_OPTION);
            comboSubDepartment.requestFocus();
        }
    }//GEN-LAST:event_buttonViewActionPerformed

    private void loadAllEmployeesToTable(String subDepartmentCode) {
        try {
            ResultSet reset;
            Statement stmt;
            String query;
            int rowCount = 0;
            RefreshEmployeeTable();

            query = "SELECT [EMPLOYEE_CODE]\n"
                    + "      ,[EPF_NO]\n"
                    + "      ,[FIRST_NAME]\n"
                    + "      ,[LAST_NAME]\n"
                    + "      ,[SUR_NAME]\n"
                    + "      ,[INITIALS]\n"
                    + "      ,[CALL_NAME]\n"
                    + "      ,[DepartmentCode]\n"
                    + "      ,[SUB_DEPARTMENT_CODE]\n"
                    + "      ,[EMPLOYEE_TYPE_CODE]\n"
                    + "      ,[CONTACT_LAND]\n"
                    + "      ,[CONTACT_MOBILE]\n"
                    + "      ,[EMAIL]\n"
                    + "      ,[ACTIVE]\n"
                    + "  FROM [Employees] WHERE SUB_DEPARTMENT_CODE = '" + subDepartmentCode + "' ORDER BY FIRST_NAME";
            stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            reset = stmt.executeQuery(query);

            while (reset.next()) {
                model_TableEmployee.addRow(new Object[model_TableEmployee.getColumnCount()]);
                tableEmployee.setValueAt(reset.getString("EMPLOYEE_CODE"), rowCount, 0);
                tableEmployee.setValueAt(reset.getString("FIRST_NAME"), rowCount, 1);
                tableEmployee.setValueAt(reset.getString("INITIALS"), rowCount, 2);
                tableEmployee.setValueAt(reset.getString("CALL_NAME"), rowCount, 3);
                rowCount++;
            }
            TextNumberOfEmpAtDepartment.setText(String.valueOf(rowCount));
            reset.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void panel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panel1MouseClicked
        if (SwingUtilities.isRightMouseButton(evt) || evt.isControlDown()) {
            Refresh();
        }
    }//GEN-LAST:event_panel1MouseClicked

    private void ButtonAddSelectedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonAddSelectedActionPerformed
        int SelectedRowCount = tableEmployee.getSelectedRowCount();
        if (SelectedRowCount == 1) {
            String studntFromBtch = tableEmployee.getValueAt(tableEmployee.getSelectedRow(), 0).toString();
            Object[] CheckStudentAlreadyAdded = CheckIfStudentAlreadyAdded(studntFromBtch);
            if ((Boolean) CheckStudentAlreadyAdded[0]) {
                JOptionPane.showMessageDialog(this, "Employee is already allocated.", "Already allocated.", JOptionPane.OK_OPTION);
            } else {
                addToAllocateTable();
            }
        }
    }//GEN-LAST:event_ButtonAddSelectedActionPerformed

    private void addToAllocateTable() {
        int SelectedRow = tableEmployee.getSelectedRow();
        try {
            employeeID = tableEmployee.getValueAt(SelectedRow, 0).toString();
            FirstName = tableEmployee.getValueAt(SelectedRow, 1).toString();
            NameWithIni = tableEmployee.getValueAt(SelectedRow, 2).toString();
            callName = tableEmployee.getValueAt(SelectedRow, 3).toString();

            model_TableAllocatedEmployees.addRow(new Object[]{employeeID, FirstName, NameWithIni, callName});
            textNumberOfEmpAllocatedToJob.setText(String.valueOf(model_TableAllocatedEmployees.getRowCount()));
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void tableAllocatedEmployeeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableAllocatedEmployeeMouseClicked
        if (evt.getClickCount() == 2) {
            int i = tableAllocatedEmployee.getSelectedRowCount();
            if (i == 1) {
                tableAllocatedEmployeesOfJob();
            } else if (i != 1) {
                JOptionPane.showMessageDialog(this, "Please select a single row.", "Select one row", JOptionPane.OK_OPTION);
            }
        }
    }//GEN-LAST:event_tableAllocatedEmployeeMouseClicked

    private void tableAllocatedEmployeesOfJob() {
        int x = JOptionPane.showConfirmDialog(this, "Are you sure To remove selected employee?", "Remove employee?", JOptionPane.YES_NO_OPTION);
        if (x == JOptionPane.YES_OPTION) {
            int i = tableAllocatedEmployee.getSelectedRow();
            model_TableAllocatedEmployees.removeRow(i);
            textNumberOfEmpAllocatedToJob.setText(String.valueOf(model_TableAllocatedEmployees.getRowCount()));
        }
    }

    private void tableAllocatedEmployeeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tableAllocatedEmployeeKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_DELETE) {
            tableAllocatedEmployeesOfJob();
        }
    }//GEN-LAST:event_tableAllocatedEmployeeKeyPressed

    private void formInternalFrameIconified(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameIconified
        jobAllocation.toFront();
    }//GEN-LAST:event_formInternalFrameIconified

    private void comboSubDepartmentPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_comboSubDepartmentPopupMenuWillBecomeInvisible
        String subDepartment = comboSubDepartment.getSelectedItem().toString();
        if (!subDepartment.equals(select)) {
            buttonView.requestFocus();
        }
    }//GEN-LAST:event_comboSubDepartmentPopupMenuWillBecomeInvisible

    private void ButtonRemoveSelectedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonRemoveSelectedActionPerformed
        int i = tableAllocatedEmployee.getSelectedRowCount();
        if (i == 1) {
            tableAllocatedEmployeesOfJob();
        } else if (i != 1) {
            JOptionPane.showMessageDialog(this, "Please select a single row.", "Select one row", JOptionPane.OK_OPTION);
        }
    }//GEN-LAST:event_ButtonRemoveSelectedActionPerformed

    private void tableFixedJobsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableFixedJobsMouseClicked
        int allocateTime, employeeCount;
        fixedJobID = tableFixedJobs.getValueAt(tableFixedJobs.getSelectedRow(), 0).toString();
        Name = tableFixedJobs.getValueAt(tableFixedJobs.getSelectedRow(), 1).toString();
        productLevel = tableFixedJobs.getValueAt(tableFixedJobs.getSelectedRow(), 2).toString();
        productLevelItemCode = tableFixedJobs.getValueAt(tableFixedJobs.getSelectedRow(), 3).toString();
        try {
            ResultSet reset;
            Statement stmt;
            String query;

            query = "SELECT\n"
                    + "     JobFixed.\"JOB_FIXED_ID\" AS JobFixed_JOB_FIXED_ID,\n"
                    + "     JobFixed.\"JOB_FIXED_NAME\" AS JobFixed_JOB_FIXED_NAME,\n"
                    + "     JobFixed.\"PRODUCT_LEVEL\" AS JobFixed_PRODUCT_LEVEL,\n"
                    + "     JobFixed.\"PRODUCT_LEVEL_ITEM_CODE\" AS JobFixed_PRODUCT_LEVEL_ITEM_CODE,\n"
                    + "     JobFixed.\"ITEM_COUNT\" AS JobFixed_ITEM_COUNT,\n"
                    + "     JobFixed.\"ALLOCATED_TIME\" AS JobFixed_ALLOCATED_TIME,\n"
                    + "     JobFixed.\"EMPLOYEE_COUNT\" AS JobFixed_EMPLOYEE_COUNT,\n"
                    + "     JobFixed.\"REMARKS\" AS JobFixed_REMARKS\n"
                    + "FROM\n"
                    + "     \"dbo\".\"JobFixed\" JobFixed \n"
                    + "WHERE\n"
                    + "     JobFixed.\"JOB_FIXED_ID\" = '" + fixedJobID + "'";

            stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            reset = stmt.executeQuery(query);
            if (reset.next()) {
                itemCount = reset.getInt("JobFixed_ITEM_COUNT");
                allocateTime = reset.getInt("JobFixed_ALLOCATED_TIME");
                employeeCount = reset.getInt("JobFixed_EMPLOYEE_COUNT");
                remarks = reset.getString("JobFixed_REMARKS");

                spinnerItemCount.setValue(itemCount);
                formatedTextAllocatedTime.setText(String.valueOf(allocateTime));
                spinnerEmpCount.setValue(employeeCount);
                textAreaRemarks.setText(remarks);
            }
            reset.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }//GEN-LAST:event_tableFixedJobsMouseClicked

    private void checkBoxGetJobSavingTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxGetJobSavingTimeActionPerformed
        if (checkBoxGetJobSavingTime.isSelected()) {
            textStartTime.setEditable(false);
            textStartTime.setText("Saving time");
        } else if (!checkBoxGetJobSavingTime.isSelected()) {
            textStartTime.setEditable(true);
            textStartTime.setText("");
            textStartTime.requestFocus();
        }
    }//GEN-LAST:event_checkBoxGetJobSavingTimeActionPerformed

    private void calendarButtonStartDatePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_calendarButtonStartDatePropertyChange
        if (evt.getNewValue() instanceof Date) {
            Date StartDate = (Date) evt.getNewValue();
            SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
            calendarButtonStartDate.setText(format.format(StartDate));
        }
    }//GEN-LAST:event_calendarButtonStartDatePropertyChange

    private void calendarButtonEndDatePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_calendarButtonEndDatePropertyChange
        if (evt.getNewValue() instanceof Date) {
            Date StartDate = (Date) evt.getNewValue();
            SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
            calendarButtonEndDate.setText(format.format(StartDate));
        }
    }//GEN-LAST:event_calendarButtonEndDatePropertyChange

    private void buttonGetSuggestTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonGetSuggestTimeActionPerformed
        int selectedRowCountAtFixJob = tableFixedJobs.getSelectedRowCount();
        itemCount = Integer.parseInt(spinnerItemCount.getValue().toString());
        if (selectedRowCountAtFixJob == 1) {
            int selectedRowAtFixJob = tableFixedJobs.getSelectedRow();
            productLevelItemCode = tableFixedJobs.getValueAt(selectedRowAtFixJob, 3).toString();
            int suggestTime = AverageTimeOfPLItems.getAverageSuggestTimeForPLItems(productLevelItemCode, itemCount);
            formatedTextAllocatedTime.setText(String.valueOf(suggestTime));
        }
    }//GEN-LAST:event_buttonGetSuggestTimeActionPerformed

    private void buttonPrepareMRNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPrepareMRNActionPerformed
        if (materialRequisitionNoteForProItems != null) {
            if (!materialRequisitionNoteForProItems.isVisible()) {
                materialRequisitionNoteForProItems.setVisible(true);
            }
        } else {
            materialRequisitionNoteForProItems = new MaterialRequisitionNoteForProItems();
            dskPane_RightPanel.add(materialRequisitionNoteForProItems);
            materialRequisitionNoteForProItems.setVisible(true);
        }
    }//GEN-LAST:event_buttonPrepareMRNActionPerformed

    protected Object[] CheckIfStudentAlreadyAdded(String studntFromBtch) {
        int rowCount = model_TableAllocatedEmployees.getRowCount();
        Object[] data = new Object[2];
        data[0] = false;
        data[1] = -1;

        for (int i = 0; i < rowCount; i++) {
            String studentAllocateToEvent = model_TableAllocatedEmployees.getValueAt(i, 0).toString();
            if (studntFromBtch.equals(studentAllocateToEvent)) {
                data[0] = true;
                data[1] = i;
            }
        }
        return data;
    }

    private void CheckBeforeSave() {
        int RowCount = tableAllocatedEmployee.getRowCount();
        int selectedRowCountAtFixJob = tableFixedJobs.getSelectedRowCount();
        String subDepartment = comboSubDepartment.getSelectedItem().toString();
        String department = comboDepartment.getSelectedItem().toString();
        superviseBy = comboSuperviousBy.getSelectedItem().toString();
        jobFinishedTime = textEndTime.getText();

        if (department.equals(select) || subDepartment.equals(select) || superviseBy.equals(select) || jobFinishedTime.equals("")) {
            JOptionPane.showMessageDialog(this, "Sub department or supervisor is not selected.", "Not selected", JOptionPane.OK_OPTION);
        } else if (RowCount <= 0) {
            JOptionPane.showMessageDialog(this, "Employees are not available at table.", "No employees", JOptionPane.OK_OPTION);
        } else if (selectedRowCountAtFixJob != 1) {
            JOptionPane.showMessageDialog(this, "Job selection is not correct.", "Incorrect selection", JOptionPane.OK_OPTION);
        } else if (!department.equals(select) && RowCount > 0 && !subDepartment.equals(select) && !superviseBy.equals(select) && selectedRowCountAtFixJob == 1) {
            int x = JOptionPane.showConfirmDialog(this, "Are you sure to allocate these employees?", "Save?", JOptionPane.YES_NO_OPTION);
            if (x == JOptionPane.YES_OPTION) {
                loadDateTime();
            }
        }
    }

    private void loadDateTime() {
        String query = "SELECT GETDATE() AS CurrentDateTime";
        String Time, Date;
        try {
            Statement statement = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
            ResultSet resultset = statement.executeQuery(query);

            if (resultset.next()) {
                Date = IndexPage.LabelDate.getText();
//                Date = resultset.getString("CurrentDateTime").split(" ")[0];
                Time = resultset.getString("CurrentDateTime").split(" ")[1];
                Time = Time.split("\\.")[0];
                saveAsAllocation(Time, Date);
            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "please contact for support.");
        }
    }

    private void saveAsAllocation(String Time, String Date) {
        int RowCount = tableAllocatedEmployee.getRowCount();
        int selectedRowAtFixJob = tableFixedJobs.getSelectedRow();
        isLate = "No";
        if (rBtnProductLevel1.isSelected()) {
            productLevel = "1";
        } else if (rBtnProductLevel2.isSelected()) {
            productLevel = "2";
        }
        productLevelItemCode = tableFixedJobs.getValueAt(tableFixedJobs.getSelectedRow(), 3).toString();
        remarks = textAreaRemarks.getText();
        itemCount = Integer.parseInt(spinnerItemCount.getValue().toString());

        if (checkBoxGetJobSavingTime.isSelected()) {
            jobAllocatedtime = Time;
            statusOfJob = "Ongoing";
        } else if (!checkBoxGetJobSavingTime.isSelected()) {
            jobAllocatedtime = textStartTime.getText();
            statusOfJob = "New";
        }
        jobAllocatedDate = calendarButtonStartDate.getText();
        allocatedtime = formatedTextAllocatedTime.getText();
        jobFinishedDate = calendarButtonEndDate.getText();
        jobFinishedTime = textEndTime.getText();
        String superviseByCode[] = comboSuperviousBy.getSelectedItem().toString().split(spliter);

        try {
            AutoID = new DocNumGenerator();
            AutoID.methodNumGen("JOB");
            jobID = AutoID.getDocChar() + AutoID.getDocNumber();
            textFieldJobCode.setText(jobID);
            jobID = textFieldJobCode.getText();

            java.sql.Statement stmtMain = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            java.sql.Statement stmtEmp = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            fixedJobID = tableFixedJobs.getValueAt(selectedRowAtFixJob, 0).toString();

            String MainInsertQuery = "INSERT INTO [JobRunning]\n"
                    + "           ([JOB_ID]\n"
                    + "           ,[FIXED_JOB_ID]\n"
                    + "           ,[JOB_ALLOCATED_DATE]\n"
                    + "           ,[JOB_ALLOCATED_TIME]\n"
                    + "           ,[ALLOCATED_TIME]\n"
                    + "           ,[TAKEN_TIME]\n"
                    + "           ,[ASSIGNED_BY]\n"
                    + "           ,[SUPERVISE_BY]\n"
                    + "           ,[PRODUCT_LEVEL]\n"
                    + "           ,[PRODUCT_LEVEL_ITEM_CODE]\n"
                    + "           ,[ITEM_COUNT]\n"
                    + "           ,[ITEM_COUNT_COMPLETED]\n"
                    + "           ,[IS_NEW_ONGOING]\n"
                    + "           ,[REMARKS]\n"
                    + "           ,[USER_ID]\n"
                    + "           ,[LOG_INSERT_DATE]\n"
                    + "           ,[LOG_INSERT_TIME]\n"
                    + "           ,[SHOULD_FINISHED_DATE]\n"
                    + "           ,[SHOULD_FINISHED_AT]\n"
                    + "           ,[IS_LATE])\n"
                    + "     VALUES\n"
                    + "           ('" + jobID + "'\n"
                    + "           ,'" + fixedJobID + "'\n"
                    + "           ,'" + jobAllocatedDate + "'\n"
                    + "           ,'" + jobAllocatedtime + "'\n"
                    + "           ,'" + allocatedtime + "'\n"
                    + "           ,'" + allocatedtime + "'\n"
                    + "           ,'" + logUser + "'\n"
                    + "           ,'" + superviseByCode[2] + "'\n"
                    + "           ,'" + productLevel + "'\n"
                    + "           ,'" + productLevelItemCode + "'\n"
                    + "           ,'" + itemCount + "'\n"
                    + "           ,'" + itemCompleted + "'\n"
                    + "           ,'" + statusOfJob + "'\n"
                    + "           ,'" + remarks + "'\n"
                    + "           ,'" + logUser + "'\n"
                    + "           ,'" + Date + "'\n"
                    + "           ,'" + Time + "'\n"
                    + "           ,'" + jobFinishedDate + "'\n"
//                    + "           ,'" + emptyField + "'\n"
                    + "           ,'" + jobFinishedTime + "'\n"
                    + "           ,'" + isLate + "')";
            stmtMain.execute(MainInsertQuery);

            for (int i = 0; i < RowCount; i++) {
                employeeID = tableAllocatedEmployee.getValueAt(i, 0).toString();
                String empInsertQuery = "INSERT INTO [EmployeesAtRunningJob]\n"
                        + "           ([JOB_ID]\n"
                        + "           ,[EMPLOYEE_CODE]\n"
                        + "           ,[TO_EMPLOYEE_REMARKS])\n"
                        + "     VALUES\n"
                        + "           ('" + jobID + "'\n"
                        + "           ,'" + employeeID + "'\n"
                        + "           ,'" + emptyFields + "')";
                stmtEmp.execute(empInsertQuery);
            }

            JOptionPane.showMessageDialog(this, "Selected employees are allocated to '" + jobID + "' successfully.");
            btnSave.setEnabled(false);
            stmtMain.close();

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        } catch (HeadlessException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    public double roundTwoDecimals(double d) {
        DecimalFormat twoDForm = new DecimalFormat("#.##");
        return Double.valueOf(twoDForm.format(d));
    }

    public double roundThreeDecimals(double d) {
        DecimalFormat threeDForm = new DecimalFormat("#.###");
        return Double.valueOf(threeDForm.format(d));
    }

    private void Refresh() {
        int x = JOptionPane.showConfirmDialog(this, "Refresh '" + menuName + "' window?", "Refresh", JOptionPane.YES_NO_OPTION);
        if (x == JOptionPane.YES_OPTION) {
            comboDepartment.setEnabled(true);
            buttonView.setEnabled(true);
            comboDepartment.setSelectedItem(select);
            comboSubDepartment.setSelectedItem(select);
            textNumberOfEmpAllocatedToJob.setText("");
            TextNumberOfEmpAtDepartment.setText("");
            textFieldJobCode.setText("");
            textStartTime.setEditable(false);
            textStartTime.setText("Saving time");
            textEndTime.setText("");
            checkBoxGetJobSavingTime.setSelected(true);
            btnSave.setEnabled(true);
            model_TableFixedJobs.setRowCount(0);
            model_TableEmployee.setRowCount(0);
            model_TableAllocatedEmployees.setRowCount(0);
//            calendarButtonStartDate.setText(logDate);
//            calendarButtonEndDate.setText(logDate);
            formatedTextAllocatedTime.setText("30");
            comboSuperviousBy.setSelectedIndex(0);
        }
    }

    private void exit() {
        if (jobAllocation != null) {
            jobAllocation = null;
        }
        this.dispose();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonAddSelected;
    private javax.swing.JButton ButtonRemoveSelected;
    private javax.swing.JTextField TextNumberOfEmpAtDepartment;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton buttonGetSuggestTime;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton buttonPrepareMRN;
    private javax.swing.JButton buttonView;
    private net.sourceforge.jcalendarbutton.JCalendarButton calendarButtonEndDate;
    private net.sourceforge.jcalendarbutton.JCalendarButton calendarButtonStartDate;
    private javax.swing.JCheckBox checkBoxGetJobSavingTime;
    private javax.swing.JComboBox comboDepartment;
    private javax.swing.JComboBox comboSubDepartment;
    private javax.swing.JComboBox comboSuperviousBy;
    private javax.swing.JFormattedTextField formatedTextAllocatedTime;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel lbl_accountType1;
    private javax.swing.JLabel lbl_description;
    private javax.swing.JLabel lbl_description2;
    private javax.swing.JLabel lbl_description3;
    private javax.swing.JLabel lbl_description4;
    private javax.swing.JLabel lbl_description5;
    private javax.swing.JLabel lbl_description6;
    private javax.swing.JLabel lbl_description7;
    private javax.swing.JLabel lbl_description8;
    private javax.swing.JLabel lbl_description9;
    private javax.swing.JLabel lbl_subAccount;
    private javax.swing.JLabel lbl_subAccount1;
    private javax.swing.JLabel lbl_subAccount2;
    private javax.swing.JPanel panel1;
    private javax.swing.JRadioButton rBtnProductLevel1;
    private javax.swing.JRadioButton rBtnProductLevel2;
    private javax.swing.JSpinner spinnerEmpCount;
    private javax.swing.JSpinner spinnerItemCount;
    private javax.swing.JTable tableAllocatedEmployee;
    private javax.swing.JTable tableEmployee;
    private javax.swing.JTable tableFixedJobs;
    private javax.swing.JTextArea textAreaRemarks;
    private javax.swing.JTextField textEndTime;
    private javax.swing.JTextField textFieldJobCode;
    private javax.swing.JTextField textNumberOfEmpAllocatedToJob;
    private javax.swing.JFormattedTextField textStartTime;
    // End of variables declaration//GEN-END:variables
}
