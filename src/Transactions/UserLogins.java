/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Transactions;

import static MainFiles.IndexPage.userLogins;
import db.ConnectSql;
import functions.ValidateFields;
import java.awt.HeadlessException;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Ravindu
 */
public class UserLogins extends javax.swing.JInternalFrame {

    private final DefaultTableModel model_StudentTable;
    private final DefaultTableModel model_StaffTable;

    /**
     * Creates new form UserLogins
     */
    public UserLogins() {
        initComponents();

        buttonGroup1.add(rBtnStudentCode);
        buttonGroup1.add(rBtnStudentName);
        rBtnStudentCode.setSelected(true);
        txtSearchStudent.requestFocus();
        model_StudentTable = (DefaultTableModel) tableViewStudent.getModel();
        model_StaffTable = (DefaultTableModel) tableViewStaffMem.getModel();
        panel1.setToolTipText("Press right mouse click to refresh.");

        LoadStudents();
        loadStaffMembers();
    }

    private void LoadStudents() {
        try {
            ResultSet reset;
            Statement stmt;
            String query;
            int rowCount = 0;
            query = "SELECT STUDENT_ID, STUDENT_FIRST_NAME, STUDENT_SUR_NAME FROM students ORDER BY STUDENT_ID";
            stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            reset = stmt.executeQuery(query);

            while (reset.next()) {
                model_StudentTable.addRow(new Object[model_StudentTable.getColumnCount()]);
                tableViewStudent.setValueAt(reset.getString("STUDENT_ID"), rowCount, 0);
                tableViewStudent.setValueAt(reset.getString("STUDENT_FIRST_NAME"), rowCount, 1);
                tableViewStudent.setValueAt(reset.getString("STUDENT_SUR_NAME"), rowCount, 2);
                rowCount++;
            }
            reset.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void loadStaffMembers() {
        try {
            ResultSet reset;
            Statement stmt;
            String query;
            int rowCount = 0;
            query = "SELECT MEMBER_ID, MEMBER_FIRST_NAME, departments_DEPARTMENT_CODE FROM staff_members ORDER BY MEMBER_FIRST_NAME";
            stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            reset = stmt.executeQuery(query);

            while (reset.next()) {
                model_StaffTable.addRow(new Object[model_StaffTable.getColumnCount()]);
                tableViewStaffMem.setValueAt(reset.getString("MEMBER_ID"), rowCount, 0);
                tableViewStaffMem.setValueAt(reset.getString("MEMBER_FIRST_NAME"), rowCount, 1);
                tableViewStaffMem.setValueAt(reset.getString("departments_DEPARTMENT_CODE"), rowCount, 2);
                rowCount++;
            }
            reset.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        panel1 = new javax.swing.JPanel();
        btnSave = new javax.swing.JButton();
        lbl_subAccount = new javax.swing.JLabel();
        btnExit = new javax.swing.JButton();
        rBtnStudentCode = new javax.swing.JRadioButton();
        rBtnStudentName = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableViewStudent = new javax.swing.JTable();
        txtSearchStudent = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableViewStaffMem = new javax.swing.JTable();
        lbl_subAccount1 = new javax.swing.JLabel();
        txtSearchStaffMem = new javax.swing.JTextField();
        rBtnStaffMemCode = new javax.swing.JRadioButton();
        rBtnStaffMemName = new javax.swing.JRadioButton();
        lbl_subAccount2 = new javax.swing.JLabel();
        lbl_subAccount3 = new javax.swing.JLabel();
        lbl_subAccount4 = new javax.swing.JLabel();
        textUserName = new javax.swing.JTextField();
        textPassword = new javax.swing.JPasswordField();
        textRetypePassword = new javax.swing.JPasswordField();

        setIconifiable(true);
        setTitle("User login");
        setPreferredSize(new java.awt.Dimension(808, 455));
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameIconified(evt);
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        panel1.setBackground(new java.awt.Color(255, 255, 255));
        panel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.TRAILING, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Calibri", 1, 14), new java.awt.Color(153, 153, 153))); // NOI18N
        panel1.setForeground(new java.awt.Color(255, 255, 255));
        panel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panel1MouseClicked(evt);
            }
        });
        panel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnSave.setMnemonic('s');
        btnSave.setText("Save");
        btnSave.setActionCommand("Delete");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        panel1.add(btnSave, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 370, 80, -1));

        lbl_subAccount.setForeground(new java.awt.Color(102, 102, 102));
        lbl_subAccount.setText("Search staff mem. by");
        panel1.add(lbl_subAccount, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 20, 110, 20));

        btnExit.setMnemonic('e');
        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });
        btnExit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnExitKeyPressed(evt);
            }
        });
        panel1.add(btnExit, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 370, 80, -1));

        rBtnStudentCode.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(rBtnStudentCode);
        rBtnStudentCode.setText("ID");
        rBtnStudentCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rBtnStudentCodeActionPerformed(evt);
            }
        });
        panel1.add(rBtnStudentCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 20, 50, -1));

        rBtnStudentName.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(rBtnStudentName);
        rBtnStudentName.setText("Name");
        rBtnStudentName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rBtnStudentNameActionPerformed(evt);
            }
        });
        rBtnStudentName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                rBtnStudentNameKeyPressed(evt);
            }
        });
        panel1.add(rBtnStudentName, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 20, 60, -1));

        tableViewStudent.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Student ID", "Student first name", "Batch"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableViewStudent.getTableHeader().setReorderingAllowed(false);
        tableViewStudent.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableViewStudentMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableViewStudent);

        panel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, 360, 250));

        txtSearchStudent.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchStudentKeyReleased(evt);
            }
        });
        panel1.add(txtSearchStudent, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 20, 130, -1));
        panel1.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 340, 360, 10));

        tableViewStaffMem.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Staff mem. ID", "Staff mem. first name", "Department"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableViewStaffMem.getTableHeader().setReorderingAllowed(false);
        tableViewStaffMem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableViewStaffMemMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tableViewStaffMem);

        panel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 60, 360, 250));

        lbl_subAccount1.setForeground(new java.awt.Color(102, 102, 102));
        lbl_subAccount1.setText("Retype password");
        panel1.add(lbl_subAccount1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 390, 100, 20));

        txtSearchStaffMem.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchStaffMemKeyReleased(evt);
            }
        });
        panel1.add(txtSearchStaffMem, new org.netbeans.lib.awtextra.AbsoluteConstraints(639, 20, 130, -1));

        rBtnStaffMemCode.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup2.add(rBtnStaffMemCode);
        rBtnStaffMemCode.setText("ID");
        panel1.add(rBtnStaffMemCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 20, 40, -1));

        rBtnStaffMemName.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup2.add(rBtnStaffMemName);
        rBtnStaffMemName.setText("Name");
        panel1.add(rBtnStaffMemName, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 20, 60, -1));

        lbl_subAccount2.setForeground(new java.awt.Color(102, 102, 102));
        lbl_subAccount2.setText("Search student by");
        panel1.add(lbl_subAccount2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 90, 20));

        lbl_subAccount3.setForeground(new java.awt.Color(102, 102, 102));
        lbl_subAccount3.setText("User name");
        panel1.add(lbl_subAccount3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 330, 70, 20));

        lbl_subAccount4.setForeground(new java.awt.Color(102, 102, 102));
        lbl_subAccount4.setText("Password");
        panel1.add(lbl_subAccount4, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 360, 70, 20));

        textUserName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                textUserNameKeyReleased(evt);
            }
        });
        panel1.add(textUserName, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 330, 200, -1));

        textPassword.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                textPasswordKeyReleased(evt);
            }
        });
        panel1.add(textPassword, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 360, 200, -1));

        textRetypePassword.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                textRetypePasswordKeyReleased(evt);
            }
        });
        panel1.add(textRetypePassword, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 390, 200, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel1, javax.swing.GroupLayout.DEFAULT_SIZE, 792, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel1, javax.swing.GroupLayout.PREFERRED_SIZE, 426, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        int selectedRowCountAtStudentTable = tableViewStudent.getSelectedRowCount();
        int selectedRowCountAtStaffTable = tableViewStaffMem.getSelectedRowCount();
        if (selectedRowCountAtStaffTable == 1 || selectedRowCountAtStudentTable == 1) {
            String password = textPassword.getText();
            String retypePassword = textRetypePassword.getText();
            if (password.equals(retypePassword)) {
                Save();
            } else if (!password.equals(retypePassword)) {
                JOptionPane.showMessageDialog(this, "Reinserting of password is not correct.\nPlease type again.");
            }
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void Save() {
        String ID = "";
        int selectedRowCountAtStudentTable = tableViewStudent.getSelectedRowCount();
        int selectedRowCountAtStaffTable = tableViewStaffMem.getSelectedRowCount();
        if (selectedRowCountAtStudentTable == 1) {
            ID = tableViewStudent.getValueAt(tableViewStudent.getSelectedRow(), 0).toString();
        } else if (selectedRowCountAtStaffTable == 1) {
            ID = tableViewStaffMem.getValueAt(tableViewStaffMem.getSelectedRow(), 0).toString();
        }
        String userName = textUserName.getText();
        String password = textPassword.getText();
        if (!userName.isEmpty() && !password.isEmpty()) {
            try {
                java.sql.Statement stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                String query = "select STUDENT_OR_MEMBER_ID From user_login where STUDENT_OR_MEMBER_ID = '" + ID + "'";
                ResultSet rset = stmt.executeQuery(query);

                if (rset.next()) {
                    int x = JOptionPane.showConfirmDialog(this, "Are you sure to change the login details of '" + userName + "'?", "Update login details?", JOptionPane.YES_NO_OPTION);
                    if (x == JOptionPane.YES_OPTION) {
                        String UpdateQueryStudent = "update user_login set USER_NAME = '" + userName + "', USER_PASSWORD = '" + password + "' where STUDENT_OR_MEMBER_ID = '" + ID + "'";
                        stmt.execute(UpdateQueryStudent);
                        String UpdateQueryMember = "update user_login set USER_NAME = '" + userName + "', USER_PASSWORD = '" + password + "' where STUDENT_OR_MEMBER_ID = '" + ID + "'";
                        stmt.execute(UpdateQueryMember);
                        JOptionPane.showMessageDialog(this, "Login details are updated.");
                        Refresh();
                    } else if (x == JOptionPane.NO_OPTION) {
                        textUserName.requestFocus();
                    }

                }
                rset.close();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                JOptionPane.showMessageDialog(this, "Please contact for support.");
            } catch (HeadlessException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                JOptionPane.showMessageDialog(this, "Please contact for support.");
            }
        } else if (userName.isEmpty() || password.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please fill all fields before save.", "Empty fields", JOptionPane.OK_OPTION);
            textUserName.requestFocus();
        }
    }

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        exit();
    }//GEN-LAST:event_btnExitActionPerformed

    private void btnExitKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnExitKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            exit();
        }
    }//GEN-LAST:event_btnExitKeyPressed

    private void rBtnStudentCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rBtnStudentCodeActionPerformed
        if (rBtnStudentCode.isSelected()) {
            txtSearchStudent.requestFocus();
            txtSearchStudent.selectAll();
        }
    }//GEN-LAST:event_rBtnStudentCodeActionPerformed

    private void rBtnStudentNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rBtnStudentNameActionPerformed
        if (rBtnStudentName.isSelected()) {
            txtSearchStudent.requestFocus();
            txtSearchStudent.selectAll();
        }
    }//GEN-LAST:event_rBtnStudentNameActionPerformed

    private void rBtnStudentNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_rBtnStudentNameKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_UP) {
            rBtnStudentCode.requestFocus();
        }
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            rBtnStudentName.setSelected(true);
            btnSave.requestFocus();
        }
    }//GEN-LAST:event_rBtnStudentNameKeyPressed

    private void tableViewStudentMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableViewStudentMouseClicked
        UNLoadAtTableInMouseClick();
//        tableViewStaffMem.remove
    }//GEN-LAST:event_tableViewStudentMouseClicked

    private void UNLoadAtTableInMouseClick() {
        String Code = "", userName = "";
        int studentTableRowCount = tableViewStudent.getSelectedRowCount();
        int staffTableRowCount = tableViewStaffMem.getSelectedRowCount();
        if (studentTableRowCount == 1 && staffTableRowCount == 0) {
            Code = tableViewStudent.getValueAt(tableViewStudent.getSelectedRow(), 0).toString();
        } else if (studentTableRowCount == 1 && staffTableRowCount == 0) {
            Code = tableViewStaffMem.getValueAt(tableViewStaffMem.getSelectedRow(), 0).toString();
        }

        try {
            ResultSet reset;
            Statement stmt;
            String query;
            query = "SELECT USER_NAME from user_login WHERE STUDENT_OR_MEMBER_ID = '" + Code + "'";
            stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            reset = stmt.executeQuery(query);

            if (reset.next()) {
                userName = reset.getString("USER_NAME");
            }
            textUserName.setText(userName);
            textPassword.requestFocus();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }


    private void txtSearchStudentKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchStudentKeyReleased
        if (rBtnStudentCode.isSelected()) {
            SearchStudentByCode(txtSearchStudent.getText());
        } else if (rBtnStudentName.isSelected()) {
            SearchStudentByName(txtSearchStudent.getText());
        }
    }//GEN-LAST:event_txtSearchStudentKeyReleased

    private void SearchStudentByCode(String studentCode) {
        try {
            ResultSet reset;
            Statement stmt;
            String query;
            int rowCount = 0;
            RefreshTable();

            if (!studentCode.equals("")) {
                query = "SELECT STUDENT_ID, STUDENT_FIRST_NAME, student_batch_BATCH_WITH_DEPARTMENT_CODE FROM students WHERE STUDENT_ID LIKE '" + studentCode + "%'";
            } else {
                query = "SELECT STUDENT_ID, STUDENT_FIRST_NAME, student_batch_BATCH_WITH_DEPARTMENT_CODE FROM students WHERE STUDENT_ID LIKE '" + studentCode + "%'";
            }
            stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            reset = stmt.executeQuery(query);

            while (reset.next()) {

                model_StudentTable.addRow(new Object[model_StudentTable.getColumnCount()]);
                tableViewStudent.setValueAt(reset.getString("STUDENT_ID"), rowCount, 0);
                tableViewStudent.setValueAt(reset.getString("STUDENT_FIRST_NAME"), rowCount, 1);
                tableViewStudent.setValueAt(reset.getString("student_batch_BATCH_WITH_DEPARTMENT_CODE"), rowCount, 2);
                rowCount++;
            }
            reset.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void SearchStudentByName(String studentName) {
        try {
            ResultSet reset;
            Statement stmt;
            String query;
            int rowCount = 0;
            RefreshTable();

            if (!studentName.equals("")) {
                query = "SELECT STUDENT_ID, STUDENT_FIRST_NAME, student_batch_BATCH_WITH_DEPARTMENT_CODE FROM students WHERE STUDENT_FIRST_NAME LIKE '%" + studentName + "%'";
            } else {
                query = "SELECT STUDENT_ID, STUDENT_FIRST_NAME, student_batch_BATCH_WITH_DEPARTMENT_CODE FROM students WHERE STUDENT_FIRST_NAME LIKE '%" + studentName + "%'";
            }
            stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            reset = stmt.executeQuery(query);

            while (reset.next()) {

                model_StudentTable.addRow(new Object[model_StudentTable.getColumnCount()]);
                tableViewStudent.setValueAt(reset.getString("STUDENT_ID"), rowCount, 0);
                tableViewStudent.setValueAt(reset.getString("STUDENT_FIRST_NAME"), rowCount, 1);
                tableViewStudent.setValueAt(reset.getString("student_batch_BATCH_WITH_DEPARTMENT_CODE"), rowCount, 2);
                rowCount++;
            }
            reset.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void RefreshTable() {
        try {
            int row = model_StudentTable.getRowCount();
            for (int j = 0; j < row; j++) {
                model_StudentTable.removeRow(0);
            }

            int rowSfatt = model_StaffTable.getRowCount();
            for (int i = 0; i < rowSfatt; i++) {
                model_StaffTable.removeRow(0);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void panel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panel1MouseClicked
        if (SwingUtilities.isRightMouseButton(evt) || evt.isControlDown()) {
            Refresh();
        }
    }//GEN-LAST:event_panel1MouseClicked

    private void formInternalFrameIconified(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameIconified
        userLogins.toFront();
    }//GEN-LAST:event_formInternalFrameIconified

    private void txtSearchStaffMemKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchStaffMemKeyReleased
        if (rBtnStaffMemCode.isSelected()) {
            SearchStaffMembersByCode(txtSearchStaffMem.getText());
        } else if (rBtnStaffMemName.isSelected()) {
            SearchStaffMembersByName(txtSearchStaffMem.getText());
        }
    }//GEN-LAST:event_txtSearchStaffMemKeyReleased

    private void textUserNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textUserNameKeyReleased
        ValidateFields.CheckForOtherFields(textUserName);
    }//GEN-LAST:event_textUserNameKeyReleased

    private void textPasswordKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textPasswordKeyReleased
        ValidateFields.CheckForOtherFields(textPassword);
    }//GEN-LAST:event_textPasswordKeyReleased

    private void textRetypePasswordKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textRetypePasswordKeyReleased
        ValidateFields.CheckForOtherFields(textRetypePassword);
    }//GEN-LAST:event_textRetypePasswordKeyReleased

    private void tableViewStaffMemMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableViewStaffMemMouseClicked
        UNLoadAtTableInMouseClick();
    }//GEN-LAST:event_tableViewStaffMemMouseClicked

    private void SearchStaffMembersByCode(String CategoryCode) {
        try {
            ResultSet reset;
            Statement stmt;
            String query;
            int rowCount = 0;
            RefreshTable();

            if (!CategoryCode.equals("")) {
                query = "SELECT * FROM staff_members WHERE MEMBER_ID LIKE '" + CategoryCode + "%'";
            } else {
                query = "SELECT * FROM staff_members WHERE MEMBER_ID LIKE '" + CategoryCode + "%'";
            }
            stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            reset = stmt.executeQuery(query);

            while (reset.next()) {

                model_StaffTable.addRow(new Object[model_StaffTable.getColumnCount()]);
                tableViewStaffMem.setValueAt(reset.getString("MEMBER_ID"), rowCount, 0);
                tableViewStaffMem.setValueAt(reset.getString("MEMBER_FIRST_NAME"), rowCount, 1);
                tableViewStaffMem.setValueAt(reset.getString("departments_DEPARTMENT_CODE"), rowCount, 2);
                rowCount++;
            }
            reset.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void SearchStaffMembersByName(String CategoryName) {
        try {
            ResultSet reset;
            Statement stmt;
            String query;
            int rowCount = 0;
            RefreshTable();

            if (!CategoryName.equals("")) {
                query = "SELECT * FROM staff_members WHERE MEMBER_FIRST_NAME LIKE '" + CategoryName + "%'";
            } else {
                query = "SELECT * FROM staff_members WHERE MEMBER_FIRST_NAME LIKE '" + CategoryName + "%'";
            }
            stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            reset = stmt.executeQuery(query);

            while (reset.next()) {

                model_StaffTable.addRow(new Object[model_StaffTable.getColumnCount()]);
                tableViewStaffMem.setValueAt(reset.getString("MEMBER_ID"), rowCount, 0);
                tableViewStaffMem.setValueAt(reset.getString("MEMBER_FIRST_NAME"), rowCount, 1);
                tableViewStaffMem.setValueAt(reset.getString("departments_DEPARTMENT_CODE"), rowCount, 2);
                rowCount++;
            }
            reset.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void Refresh() {
        RefreshTableAndLoadAgain();
        textUserName.setText("");
        textPassword.setText("");
        textRetypePassword.setText("");
        txtSearchStudent.setText("");
    }

    private void RefreshTableAndLoadAgain() {
        try {
            int row = model_StudentTable.getRowCount();
            for (int j = 0; j < row; j++) {
                model_StudentTable.removeRow(0);
            }

            int rowSfatt = model_StaffTable.getRowCount();
            for (int i = 0; i < rowSfatt; i++) {
                model_StaffTable.removeRow(0);
            }
            LoadStudents();
            loadStaffMembers();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnSave;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lbl_subAccount;
    private javax.swing.JLabel lbl_subAccount1;
    private javax.swing.JLabel lbl_subAccount2;
    private javax.swing.JLabel lbl_subAccount3;
    private javax.swing.JLabel lbl_subAccount4;
    private javax.swing.JPanel panel1;
    private javax.swing.JRadioButton rBtnStaffMemCode;
    private javax.swing.JRadioButton rBtnStaffMemName;
    private javax.swing.JRadioButton rBtnStudentCode;
    private javax.swing.JRadioButton rBtnStudentName;
    private javax.swing.JTable tableViewStaffMem;
    private javax.swing.JTable tableViewStudent;
    private javax.swing.JPasswordField textPassword;
    private javax.swing.JPasswordField textRetypePassword;
    private javax.swing.JTextField textUserName;
    private javax.swing.JTextField txtSearchStaffMem;
    private javax.swing.JTextField txtSearchStudent;
    // End of variables declaration//GEN-END:variables

    private void exit() {
        if (userLogins != null) {
            userLogins = null;
        }
        this.dispose();
    }

}
