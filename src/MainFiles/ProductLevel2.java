/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package MainFiles;

import static MainFiles.IndexPage.productLevel2;
import db.ConnectSql;
import functions.ValidateFields;
import java.awt.HeadlessException;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DecimalFormat;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Ravindu
 */
public class ProductLevel2 extends javax.swing.JInternalFrame {

    private final String select = "--Select--";
    private final DefaultTableModel model_AllRawItems;
    private final DefaultTableModel model_ProductLevel2;
    private final DefaultTableModel model_IngredientItemTable;
    private final String spliter = "--";
    private final String menuName = "Product level 2";

    public ProductLevel2() {
        initComponents();

//        buttonGroup1.add(rBtnCode);
//        buttonGroup1.add(rBtnName);
        rBtnCode.setSelected(true);
        rBtnCodeAll.setSelected(true);
        textProductLevel2Code.requestFocus();
        model_AllRawItems = (DefaultTableModel) tableAllRawItems.getModel();
        model_ProductLevel2 = (DefaultTableModel) tableProductLevel2.getModel();
        model_IngredientItemTable = (DefaultTableModel) tableIngredientRawItems.getModel();
        panel1.setToolTipText("Press right mouse click to refresh.");
        this.setTitle(menuName);

        LoadAllRawItems();
        LoadAllProductLevel2Items();
        loadPurUnitsToCombo();
        loadDepartmentsToCombo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        panel1 = new javax.swing.JPanel();
        btnRefresh = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableAllRawItems = new javax.swing.JTable();
        rBtnCodeAll = new javax.swing.JRadioButton();
        rBtnNameAll = new javax.swing.JRadioButton();
        txtSearchRawItems = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableIngredientRawItems = new javax.swing.JTable();
        textIngredientItemCount = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        setForPicker = new com.toedter.components.JSpinField();
        buttonCalculate = new javax.swing.JButton();
        lbl_accountType6 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        lbl_accountType1 = new javax.swing.JLabel();
        lbl_accountType4 = new javax.swing.JLabel();
        lbl_description2 = new javax.swing.JLabel();
        comboDepartment = new javax.swing.JComboBox();
        textPrintName = new javax.swing.JTextField();
        textProductLevel2Name = new javax.swing.JTextField();
        textProductLevel2Code = new javax.swing.JTextField();
        lbl_subAccount = new javax.swing.JLabel();
        rBtnCode = new javax.swing.JRadioButton();
        rBtnName = new javax.swing.JRadioButton();
        txtSearch = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableProductLevel2 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        TextProLevel1ItemCount = new javax.swing.JTextField();
        lbl_description3 = new javax.swing.JLabel();
        cmbPurchaseUnit = new javax.swing.JComboBox();
        lbl_description4 = new javax.swing.JLabel();
        comboVisibility = new javax.swing.JComboBox();
        jPanel4 = new javax.swing.JPanel();
        buttonAddSelected = new javax.swing.JButton();
        buttonRemoveSelected = new javax.swing.JButton();
        lbl_accountType5 = new javax.swing.JLabel();
        formattedTextQuantity = new javax.swing.JFormattedTextField();
        buttonViewCost = new javax.swing.JButton();
        btnSaveProLve1Item = new javax.swing.JButton();
        buttonDeleteProLve1Item = new javax.swing.JButton();

        setIconifiable(true);
        setPreferredSize(new java.awt.Dimension(1141, 666));
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameIconified(evt);
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        panel1.setBackground(new java.awt.Color(255, 255, 255));
        panel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.TRAILING, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Calibri", 1, 14), new java.awt.Color(153, 153, 153))); // NOI18N
        panel1.setForeground(new java.awt.Color(255, 255, 255));
        panel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panel1MouseClicked(evt);
            }
        });
        panel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnRefresh.setMnemonic('d');
        btnRefresh.setText("Refresh");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });
        panel1.add(btnRefresh, new org.netbeans.lib.awtextra.AbsoluteConstraints(930, 590, 70, -1));

        btnExit.setMnemonic('e');
        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });
        btnExit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnExitKeyPressed(evt);
            }
        });
        panel1.add(btnExit, new org.netbeans.lib.awtextra.AbsoluteConstraints(1010, 590, 70, -1));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "All raw items", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(102, 102, 102))); // NOI18N
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tableAllRawItems.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Raw item code", "Raw item name", "Unit"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableAllRawItems.getTableHeader().setReorderingAllowed(false);
        tableAllRawItems.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableAllRawItemsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableAllRawItems);
        if (tableAllRawItems.getColumnModel().getColumnCount() > 0) {
            tableAllRawItems.getColumnModel().getColumn(1).setPreferredWidth(140);
        }

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 70, 340, 170));

        rBtnCodeAll.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup2.add(rBtnCodeAll);
        rBtnCodeAll.setFont(new java.awt.Font("Calibri", 0, 11)); // NOI18N
        rBtnCodeAll.setText("Code");
        rBtnCodeAll.setOpaque(false);
        rBtnCodeAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rBtnCodeAllActionPerformed(evt);
            }
        });
        jPanel1.add(rBtnCodeAll, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 30, 60, -1));

        rBtnNameAll.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup2.add(rBtnNameAll);
        rBtnNameAll.setFont(new java.awt.Font("Calibri", 0, 11)); // NOI18N
        rBtnNameAll.setText("Name");
        rBtnNameAll.setOpaque(false);
        rBtnNameAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rBtnNameAllActionPerformed(evt);
            }
        });
        jPanel1.add(rBtnNameAll, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 30, 60, -1));

        txtSearchRawItems.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchRawItemsKeyReleased(evt);
            }
        });
        jPanel1.add(txtSearchRawItems, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 30, 210, -1));

        panel1.add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 310, 400, 260));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Ingredient raw items", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(102, 102, 102))); // NOI18N
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tableIngredientRawItems.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Raw item code", "Raw item name", "Unit", "Quantity"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableIngredientRawItems.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(tableIngredientRawItems);
        if (tableIngredientRawItems.getColumnModel().getColumnCount() > 0) {
            tableIngredientRawItems.getColumnModel().getColumn(1).setPreferredWidth(140);
        }

        jPanel2.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 70, 490, 170));

        textIngredientItemCount.setEditable(false);
        textIngredientItemCount.setBackground(new java.awt.Color(255, 255, 255));
        textIngredientItemCount.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jPanel2.add(textIngredientItemCount, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 30, 50, -1));

        jLabel1.setForeground(new java.awt.Color(102, 102, 102));
        jLabel1.setText("Ingredient items count");
        jPanel2.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 30, 120, 20));

        setForPicker.setMinimum(1);
        setForPicker.setOpaque(false);
        setForPicker.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                setForPickerKeyPressed(evt);
            }
        });
        jPanel2.add(setForPicker, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 30, 60, -1));

        buttonCalculate.setText("Calculate");
        buttonCalculate.setOpaque(false);
        buttonCalculate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCalculateActionPerformed(evt);
            }
        });
        jPanel2.add(buttonCalculate, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 30, 100, 20));

        lbl_accountType6.setForeground(new java.awt.Color(102, 102, 102));
        lbl_accountType6.setText("Set for");
        jPanel2.add(lbl_accountType6, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 30, 40, 20));

        panel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 310, 550, 260));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel7.setForeground(new java.awt.Color(102, 102, 102));
        jLabel7.setText("Product level 2 code *");
        jPanel3.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 20, 120, 20));

        lbl_accountType1.setForeground(new java.awt.Color(102, 102, 102));
        lbl_accountType1.setText("Product level 2 name *");
        jPanel3.add(lbl_accountType1, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 60, 120, 20));

        lbl_accountType4.setForeground(new java.awt.Color(102, 102, 102));
        lbl_accountType4.setText("Print name *");
        jPanel3.add(lbl_accountType4, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 100, 100, 20));

        lbl_description2.setForeground(new java.awt.Color(102, 102, 102));
        lbl_description2.setText("Manufacture unit *");
        jPanel3.add(lbl_description2, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 140, 120, 20));

        comboDepartment.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Select--" }));
        comboDepartment.setToolTipText("");
        comboDepartment.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                comboDepartmentKeyPressed(evt);
            }
        });
        jPanel3.add(comboDepartment, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 180, 300, -1));

        textPrintName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                textPrintNameKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                textPrintNameKeyReleased(evt);
            }
        });
        jPanel3.add(textPrintName, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 100, 300, -1));

        textProductLevel2Name.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                textProductLevel2NameKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                textProductLevel2NameKeyReleased(evt);
            }
        });
        jPanel3.add(textProductLevel2Name, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 60, 300, -1));

        textProductLevel2Code.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                textProductLevel2CodeKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                textProductLevel2CodeKeyReleased(evt);
            }
        });
        jPanel3.add(textProductLevel2Code, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 20, 160, -1));

        lbl_subAccount.setForeground(new java.awt.Color(102, 102, 102));
        lbl_subAccount.setText("Search product level 2 by");
        jPanel3.add(lbl_subAccount, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 20, 130, 20));

        rBtnCode.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(rBtnCode);
        rBtnCode.setFont(new java.awt.Font("Calibri", 0, 11)); // NOI18N
        rBtnCode.setText("Code");
        rBtnCode.setOpaque(false);
        rBtnCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rBtnCodeActionPerformed(evt);
            }
        });
        jPanel3.add(rBtnCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 20, 60, -1));

        rBtnName.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(rBtnName);
        rBtnName.setFont(new java.awt.Font("Calibri", 0, 11)); // NOI18N
        rBtnName.setText("Name");
        rBtnName.setOpaque(false);
        rBtnName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rBtnNameActionPerformed(evt);
            }
        });
        jPanel3.add(rBtnName, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 20, 60, -1));

        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
        });
        jPanel3.add(txtSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 20, 150, -1));

        tableProductLevel2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product level 2 code", "Product level 2 name", "Department"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableProductLevel2.getTableHeader().setReorderingAllowed(false);
        tableProductLevel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableProductLevel2MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tableProductLevel2);
        if (tableProductLevel2.getColumnModel().getColumnCount() > 0) {
            tableProductLevel2.getColumnModel().getColumn(1).setPreferredWidth(200);
        }

        jPanel3.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 60, 540, 190));

        jLabel2.setForeground(new java.awt.Color(102, 102, 102));
        jLabel2.setText("Item count");
        jPanel3.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 20, 70, 20));

        TextProLevel1ItemCount.setEditable(false);
        TextProLevel1ItemCount.setBackground(new java.awt.Color(255, 255, 255));
        TextProLevel1ItemCount.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jPanel3.add(TextProLevel1ItemCount, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 20, 50, -1));

        lbl_description3.setForeground(new java.awt.Color(102, 102, 102));
        lbl_description3.setText("Visibility *");
        jPanel3.add(lbl_description3, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 220, 100, 20));

        cmbPurchaseUnit.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Select--" }));
        cmbPurchaseUnit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmbPurchaseUnitKeyPressed(evt);
            }
        });
        jPanel3.add(cmbPurchaseUnit, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 140, 300, -1));

        lbl_description4.setForeground(new java.awt.Color(102, 102, 102));
        lbl_description4.setText("Department *");
        jPanel3.add(lbl_description4, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 180, 100, 20));

        comboVisibility.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Yes", "No" }));
        comboVisibility.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                comboVisibilityKeyPressed(evt);
            }
        });
        jPanel3.add(comboVisibility, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 220, 160, -1));

        panel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 1090, 270));

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Add/Remove", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(102, 102, 102))); // NOI18N

        buttonAddSelected.setText("-->>");
        buttonAddSelected.setOpaque(false);
        buttonAddSelected.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddSelectedActionPerformed(evt);
            }
        });
        buttonAddSelected.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                buttonAddSelectedKeyPressed(evt);
            }
        });

        buttonRemoveSelected.setText("<<---");
        buttonRemoveSelected.setOpaque(false);
        buttonRemoveSelected.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRemoveSelectedActionPerformed(evt);
            }
        });

        lbl_accountType5.setForeground(new java.awt.Color(102, 102, 102));
        lbl_accountType5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbl_accountType5.setText("Quantity");

        formattedTextQuantity.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.000"))));
        formattedTextQuantity.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        formattedTextQuantity.setText("0.000");
        formattedTextQuantity.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formattedTextQuantityKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbl_accountType5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(formattedTextQuantity))
                        .addGap(18, 18, 18))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(buttonAddSelected, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(buttonRemoveSelected))
                        .addContainerGap(14, Short.MAX_VALUE))))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addComponent(lbl_accountType5, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(formattedTextQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 67, Short.MAX_VALUE)
                .addComponent(buttonAddSelected)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonRemoveSelected)
                .addContainerGap())
        );

        panel1.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 310, 100, 260));

        buttonViewCost.setText("View cost");
        panel1.add(buttonViewCost, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 590, 100, -1));

        btnSaveProLve1Item.setText("Save");
        btnSaveProLve1Item.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveProLve1ItemActionPerformed(evt);
            }
        });
        panel1.add(btnSaveProLve1Item, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 590, 70, -1));

        buttonDeleteProLve1Item.setText("Delete");
        panel1.add(buttonDeleteProLve1Item, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 590, 70, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1135, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel1, javax.swing.GroupLayout.DEFAULT_SIZE, 640, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loadPurUnitsToCombo() {
        try {
            java.sql.Statement stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            String query = "select UnitName, UnitCode From SIUnits order by UnitName";
            ResultSet rset = stmt.executeQuery(query);

            cmbPurchaseUnit.removeAllItems();
            cmbPurchaseUnit.insertItemAt("--Select--", 0);
            int position = 1;
            if (rset.next()) {
                do {
                    cmbPurchaseUnit.insertItemAt(rset.getString("UnitName") + "--" + rset.getString("UnitCode"), position); // 
                    position++;
                } while (rset.next());
            }
            cmbPurchaseUnit.setSelectedIndex(0);

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "please contact for support.");
        }
    }

    private void loadDepartmentsToCombo() {
        try {
            java.sql.Statement stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            String query = "select DepartmentCode, DepartmentName From Departments order by DepartmentName";
            ResultSet rset = stmt.executeQuery(query);

            comboDepartment.removeAllItems();
            comboDepartment.insertItemAt("--Select--", 0);
            int position = 1;
            if (rset.next()) {
                do {
                    comboDepartment.insertItemAt(rset.getString("DepartmentName") + "--" + rset.getString("DepartmentCode"), position); // 
                    position++;
                } while (rset.next());
            }
            comboDepartment.setSelectedIndex(0);

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", ERROR);
        }
    }

    private void LoadAllRawItems() {
        try {
            ResultSet reset;
            Statement stmt;
            String query;
            int rowCount = 0;
            query = "SELECT PL1_ITEM_CODE, PL1_ITEM_NAME, UnitCode FROM ProductLevel1 WHERE VISIBILITY = 'Yes' ORDER BY PL1_ITEM_NAME";
            stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            reset = stmt.executeQuery(query);

            while (reset.next()) {
                model_AllRawItems.addRow(new Object[model_AllRawItems.getColumnCount()]);
                tableAllRawItems.setValueAt(reset.getString("PL1_ITEM_CODE"), rowCount, 0);
                tableAllRawItems.setValueAt(reset.getString("PL1_ITEM_NAME"), rowCount, 1);
                tableAllRawItems.setValueAt(reset.getString("UnitCode"), rowCount, 2);
                rowCount++;
            }
            reset.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void LoadAllProductLevel2Items() {
        try {
            ResultSet reset;
            Statement stmt;
            String query;
            int rowCount = 0;
            query = "SELECT PL2_ITEM_CODE, PL2_ITEM_NAME, DepartmentCode FROM ProductLevel2 ORDER BY PL2_ITEM_NAME";
            stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            reset = stmt.executeQuery(query);

            while (reset.next()) {
                model_ProductLevel2.addRow(new Object[model_ProductLevel2.getColumnCount()]);
                tableProductLevel2.setValueAt(reset.getString("PL2_ITEM_CODE"), rowCount, 0);
                tableProductLevel2.setValueAt(reset.getString("PL2_ITEM_NAME"), rowCount, 1);
                tableProductLevel2.setValueAt(reset.getString("DepartmentCode"), rowCount, 2);
                rowCount++;
            }
            reset.close();
            countItemsInProductLevel1ItemsTable();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void countItemsInProductLevel1ItemsTable() {
        TextProLevel1ItemCount.setText(model_ProductLevel2.getRowCount() + "");
    }

    private void countItemsInIngredientItemsTable() {
        textIngredientItemCount.setText(model_IngredientItemTable.getRowCount() + "");
    }

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        FullRefresh();
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void FullRefresh() {
        int x = JOptionPane.showConfirmDialog(this, "Refresh '" + menuName + "' window?", "Refresh", JOptionPane.YES_NO_OPTION);
        if (x == JOptionPane.YES_OPTION) {
            textProductLevel2Code.setText("");
            textProductLevel2Name.setText("");
            textPrintName.setText("");
            formattedTextQuantity.setText("0.000");

            try {
                int rowj = model_ProductLevel2.getRowCount();
                for (int j = 0; j < rowj; j++) {
                    model_ProductLevel2.removeRow(0);
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                JOptionPane.showMessageDialog(this, "please contact for support.");
            }

            try {
                int rowj = model_IngredientItemTable.getRowCount();
                for (int j = 0; j < rowj; j++) {
                    model_IngredientItemTable.removeRow(0);
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                JOptionPane.showMessageDialog(this, "please contact for support.");
            }

            try {
                int row = model_AllRawItems.getRowCount();
                for (int j = 0; j < row; j++) {
                    model_AllRawItems.removeRow(0);
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                JOptionPane.showMessageDialog(this, "Please contact for support.");
            }

            LoadAllRawItems();
            LoadAllProductLevel2Items();
            loadPurUnitsToCombo();
            loadDepartmentsToCombo();
            comboVisibility.setSelectedIndex(0);
            textIngredientItemCount.setText("0");
        }
    }

//    private void RefreshIngredientItemTable() {
//        try {
//            int rowj = model_IngredientItemTable.getRowCount();
//            for (int j = 0; j < rowj; j++) {
//                model_IngredientItemTable.removeRow(0);
//            }
//        } catch (Exception ex) {
//            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
//            JOptionPane.showMessageDialog(this, "please contact for support.");
//        }
//    }

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        exit();
    }//GEN-LAST:event_btnExitActionPerformed

    private void btnExitKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnExitKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            exit();
        }
    }//GEN-LAST:event_btnExitKeyPressed

    private void exit() {
        if (productLevel2 != null) {
            productLevel2 = null;
        }
        this.dispose();
    }

    private void rBtnCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rBtnCodeActionPerformed
        if (rBtnCode.isSelected()) {
            txtSearch.requestFocus();
            txtSearch.selectAll();
        }
    }//GEN-LAST:event_rBtnCodeActionPerformed

    private void rBtnNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rBtnNameActionPerformed
        if (rBtnName.isSelected()) {
            txtSearch.requestFocus();
            txtSearch.selectAll();
        }
    }//GEN-LAST:event_rBtnNameActionPerformed

    private void tableAllRawItemsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableAllRawItemsMouseClicked
        formattedTextQuantity.requestFocus();
        formattedTextQuantity.selectAll();
    }//GEN-LAST:event_tableAllRawItemsMouseClicked

    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased
        if (rBtnCode.isSelected()) {
            SearchProductLevel1ItemByCode(txtSearch.getText());
        } else if (rBtnName.isSelected()) {
            SearchProductLevel1ItemByName(txtSearch.getText());
        }
    }//GEN-LAST:event_txtSearchKeyReleased

    private void SearchProductLevel1ItemByCode(String ItemCode) {
        try {
            ResultSet reset;
            Statement stmt;
            String query;
            int rowCount = 0;
            RefreshProductLevel1Table();

            if (!ItemCode.equals("")) {
                query = "SELECT PL2_ITEM_CODE, PL2_ITEM_NAME, DepartmentCode FROM ProductLevel2 WHERE PL2_ITEM_CODE LIKE '" + ItemCode + "%'";
            } else {
                query = "SELECT PL2_ITEM_CODE, PL2_ITEM_NAME, DepartmentCode FROM ProductLevel2 WHERE PL2_ITEM_CODE LIKE '" + ItemCode + "%'";
            }
            stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            reset = stmt.executeQuery(query);

            while (reset.next()) {
                tableProductLevel2.setValueAt(reset.getString("PL2_ITEM_CODE"), rowCount, 0);
                tableProductLevel2.setValueAt(reset.getString("PL2_ITEM_NAME"), rowCount, 1);
                tableProductLevel2.setValueAt(reset.getString("DepartmentCode"), rowCount, 2);
                rowCount++;
            }
            reset.close();
            countItemsInProductLevel1ItemsTable();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void SearchProductLevel1ItemByName(String ItemName) {
        try {
            ResultSet reset;
            Statement stmt;
            String query;
            int rowCount = 0;
            RefreshProductLevel1Table();

            if (!ItemName.equals("")) {
                query = "SELECT PL2_ITEM_CODE, PL2_ITEM_NAME, DepartmentCode FROM ProductLevel2 WHERE PL2_ITEM_NAME LIKE '%" + ItemName + "%'";
            } else {
                query = "SELECT PL2_ITEM_CODE, PL2_ITEM_NAME, DepartmentCode FROM ProductLevel2 WHERE PL2_ITEM_NAME LIKE '%" + ItemName + "%'";
            }
            stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            reset = stmt.executeQuery(query);

            while (reset.next()) {
                model_ProductLevel2.addRow(new Object[model_ProductLevel2.getColumnCount()]);
                tableProductLevel2.setValueAt(reset.getString("PL2_ITEM_CODE"), rowCount, 0);
                tableProductLevel2.setValueAt(reset.getString("PL2_ITEM_NAME"), rowCount, 1);
                tableProductLevel2.setValueAt(reset.getString("DepartmentCode"), rowCount, 2);
                rowCount++;
            }
            reset.close();
            countItemsInProductLevel1ItemsTable();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void RefreshProductLevel1Table() {
        try {
            int row = model_ProductLevel2.getRowCount();
            for (int j = 0; j < row; j++) {
                model_ProductLevel2.removeRow(0);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void panel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panel1MouseClicked
        if (SwingUtilities.isRightMouseButton(evt) || evt.isControlDown()) {
            FullRefresh();
        }
    }//GEN-LAST:event_panel1MouseClicked

    private void rBtnCodeAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rBtnCodeAllActionPerformed
        if (rBtnCodeAll.isSelected()) {
            txtSearchRawItems.requestFocus();
            txtSearchRawItems.selectAll();
        }
    }//GEN-LAST:event_rBtnCodeAllActionPerformed

    private void rBtnNameAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rBtnNameAllActionPerformed
        if (rBtnNameAll.isSelected()) {
            txtSearchRawItems.requestFocus();
            txtSearchRawItems.selectAll();
        }
    }//GEN-LAST:event_rBtnNameAllActionPerformed

    private void txtSearchRawItemsKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchRawItemsKeyReleased
        if (rBtnCodeAll.isSelected()) {
            SearchAllItemByCode(txtSearchRawItems.getText());
        } else if (rBtnNameAll.isSelected()) {
            SearchAllItemByName(txtSearchRawItems.getText());
        }
    }//GEN-LAST:event_txtSearchRawItemsKeyReleased

    private void SearchAllItemByCode(String ItemCode) {
        try {
            ResultSet reset;
            Statement stmt;
            String query;
            int rowCount = 0;
            RefreshAllRawItemsTable();

            if (!ItemCode.equals("")) {
                query = "SELECT PL1_ITEM_CODE, PL1_ITEM_NAME, UnitCode FROM ProductLevel1 WHERE VISIBILITY = 'Yes' AND PL1_ITEM_CODE LIKE '" + ItemCode + "%'";
            } else {
                query = "SELECT PL1_ITEM_CODE, PL1_ITEM_NAME, UnitCode FROM ProductLevel1 WHERE VISIBILITY = 'Yes' AND PL1_ITEM_CODE LIKE '" + ItemCode + "%'";
            }
            stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            reset = stmt.executeQuery(query);

            while (reset.next()) {
                model_AllRawItems.addRow(new Object[model_AllRawItems.getColumnCount()]);
                tableAllRawItems.setValueAt(reset.getString("PL1_ITEM_CODE"), rowCount, 0);
                tableAllRawItems.setValueAt(reset.getString("PL1_ITEM_NAME"), rowCount, 1);
                tableAllRawItems.setValueAt(reset.getString("UnitCode"), rowCount, 2);
                rowCount++;
            }
            reset.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void SearchAllItemByName(String ItemName) {
        try {
            ResultSet reset;
            Statement stmt;
            String query;
            int rowCount = 0;
            RefreshAllRawItemsTable();

            if (!ItemName.equals("")) {
                query = "SELECT PL1_ITEM_CODE, PL1_ITEM_NAME, UnitCode FROM ProductLevel1 WHERE VISIBILITY = 'Yes' AND ItemName LIKE '%" + ItemName + "%'";
            } else {
                query = "SELECT PL1_ITEM_CODE, PL1_ITEM_NAME, UnitCode FROM ProductLevel1 WHERE VISIBILITY = 'Yes' AND ItemName LIKE '%" + ItemName + "%'";
            }
            stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            reset = stmt.executeQuery(query);

            while (reset.next()) {
                model_AllRawItems.addRow(new Object[model_AllRawItems.getColumnCount()]);
                tableAllRawItems.setValueAt(reset.getString("PL1_ITEM_CODE"), rowCount, 0);
                tableAllRawItems.setValueAt(reset.getString("PL1_ITEM_NAME"), rowCount, 1);
                tableAllRawItems.setValueAt(reset.getString("UnitCode"), rowCount, 2);
                rowCount++;
            }
            reset.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void RefreshAllRawItemsTable() {
        try {
            int row = model_AllRawItems.getRowCount();
            for (int j = 0; j < row; j++) {
                model_AllRawItems.removeRow(0);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void formInternalFrameIconified(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameIconified
        productLevel2.toFront();
    }//GEN-LAST:event_formInternalFrameIconified

    private void buttonAddSelectedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddSelectedActionPerformed
        actionOfAdd();
    }//GEN-LAST:event_buttonAddSelectedActionPerformed

    private void actionOfAdd() {
        int SelectedRowCountAtFirst = tableAllRawItems.getSelectedRowCount();
        int SelectedRowCountAtSecond = tableIngredientRawItems.getSelectedRowCount();
        if (SelectedRowCountAtFirst == 1 && SelectedRowCountAtSecond == 0) {
            FirstCheckBeforeAddToSecondTable();
        }
    }

    private void buttonRemoveSelectedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRemoveSelectedActionPerformed
        int x = JOptionPane.showConfirmDialog(this, "Are you sure To remove this?", "Remove item?", JOptionPane.YES_NO_OPTION);
        if (x == JOptionPane.YES_OPTION) {
            int i = tableIngredientRawItems.getSelectedRow();
            model_IngredientItemTable.removeRow(i);
            formattedTextQuantity.setText("0.000");
            countItemsInIngredientItemsTable();
        }
    }//GEN-LAST:event_buttonRemoveSelectedActionPerformed

    private void formattedTextQuantityKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formattedTextQuantityKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            setForPicker.requestFocus();
        }
    }//GEN-LAST:event_formattedTextQuantityKeyPressed

    private void buttonAddSelectedKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_buttonAddSelectedKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            actionOfAdd();
        }

    }//GEN-LAST:event_buttonAddSelectedKeyPressed

    private void setForPickerKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_setForPickerKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            buttonCalculate.requestFocus();
        }
    }//GEN-LAST:event_setForPickerKeyPressed

    private void buttonCalculateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCalculateActionPerformed
        actionOfAdd();
    }//GEN-LAST:event_buttonCalculateActionPerformed

    private void tableProductLevel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableProductLevel2MouseClicked
        String Code, Name, UnitCode = "", UnitName = "", DepartmentCode, DepartmentName = "", printName = "", visibility = "";

        Code = tableProductLevel2.getValueAt(tableProductLevel2.getSelectedRow(), 0).toString();
        Name = tableProductLevel2.getValueAt(tableProductLevel2.getSelectedRow(), 1).toString();
        DepartmentCode = tableProductLevel2.getValueAt(tableProductLevel2.getSelectedRow(), 2).toString();

        int rowCount = 0;

        try {
            ResultSet reset, resetForIngredientItems;
            Statement stmt, stmtForIngredientItems;
            String query;
            query = "SELECT\n"
                    + "     SIUnits.\"UnitName\" AS SIUnits_UnitName,\n"
                    + "     SIUnits.\"PurchaseMeasurement\" AS SIUnits_PurchaseMeasurement,\n"
                    + "     SIUnits.\"IssueMeasurement\" AS SIUnits_IssueMeasurement,\n"
                    + "     SIUnits.\"BaseUnitCode\" AS SIUnits_BaseUnitCode,\n"
                    + "     Items.\"ItemName\" AS Items_ItemName,\n"
                    + "     Items.\"UnitPurchase\" AS Items_UnitPurchase,\n"
                    + "     ProductLevel2.\"PL2_ITEM_CODE\" AS ProductLevel2_PL2_ITEM_CODE,\n"
                    + "     ProductLevel2.\"PL2_ITEM_NAME\" AS ProductLevel2_PL2_ITEM_NAME,\n"
                    + "     ProductLevel2.\"PL2_ITEM_PRINT_NAME\" AS ProductLevel2_PL2_ITEM_PRINT_NAME,\n"
                    + "     ProductLevel2.\"UnitCode\" AS ProductLevel2_UnitCode,\n"
                    + "     ProductLevel2.\"DepartmentCode\" AS ProductLevel2_DepartmentCode,\n"
                    + "     ProductLevel2.\"VISIBILITY\" AS ProductLevel2_VISIBILITY,\n"
                    + "     ProductLevel2RawItems.\"PL2_ITEM_CODE\" AS ProductLevel2RawItems_PL2_ITEM_CODE,\n"
                    + "     ProductLevel2RawItems.\"PL2_ITEM_QUANTITY\" AS ProductLevel2RawItems_PL2_ITEM_QUANTITY,\n"
                    + "     ProductLevel2RawItems.\"PL1_ITEM_CODE\" AS ProductLevel2RawItems_PL1_ITEM_CODE,\n"
                    + "     ProductLevel2RawItems.\"PL1_ITEM_QUANTITY\" AS ProductLevel2RawItems_PL1_ITEM_QUANTITY,\n"
                    + "     ProductLevel2RawItems.\"ItemCode\" AS ProductLevel2RawItems_ItemCode,\n"
                    + "     ProductLevel2RawItems.\"QUANTITY\" AS ProductLevel2RawItems_QUANTITY,\n"
                    + "     ProductLevel1.\"PL1_ITEM_CODE\" AS ProductLevel1_PL1_ITEM_CODE,\n"
                    + "     ProductLevel1.\"PL1_ITEM_NAME\" AS ProductLevel1_PL1_ITEM_NAME,\n"
                    + "     ProductLevel1.\"UnitCode\" AS ProductLevel1_UnitCode,\n"
                    + "     Departments.\"DepartmentName\" AS Departments_DepartmentName\n"
                    + "FROM\n"
                    + "     \"dbo\".\"ProductLevel2RawItems\" ProductLevel2RawItems INNER JOIN \"dbo\".\"ProductLevel2\" ProductLevel2 ON ProductLevel2RawItems.\"PL2_ITEM_CODE\" = ProductLevel2.\"PL2_ITEM_CODE\"\n"
                    + "     INNER JOIN \"dbo\".\"Items\" Items ON ProductLevel2RawItems.\"ItemCode\" = Items.\"ItemCode\"\n"
                    + "     INNER JOIN \"dbo\".\"ProductLevel1\" ProductLevel1 ON ProductLevel2RawItems.\"PL1_ITEM_CODE\" = ProductLevel1.\"PL1_ITEM_CODE\"\n"
                    + "     INNER JOIN \"dbo\".\"SIUnits\" SIUnits ON ProductLevel2.\"UnitCode\" = SIUnits.\"UnitCode\"\n"
                    + "     INNER JOIN \"dbo\".\"Departments\" Departments ON ProductLevel2.\"DepartmentCode\" = Departments.\"DepartmentCode\"\n"
                    + "WHERE\n"
                    + "     ProductLevel2.\"PL2_ITEM_CODE\" = '"+Code+"'";
            stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            stmtForIngredientItems = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);

            reset = stmt.executeQuery(query);
            resetForIngredientItems = stmtForIngredientItems.executeQuery(query);

            if (reset.next()) {
                printName = reset.getString("ProductLevel2_PL2_ITEM_PRINT_NAME");
                DepartmentName = reset.getString("Departments_DepartmentName");
                UnitCode = reset.getString("ProductLevel2_UnitCode");
                UnitName = reset.getString("SIUnits_UnitName");
                visibility = reset.getString("ProductLevel2_VISIBILITY");

                model_IngredientItemTable.setRowCount(0);
            }

            while (resetForIngredientItems.next()) {
                model_IngredientItemTable.addRow(new Object[model_IngredientItemTable.getColumnCount()]);
                tableIngredientRawItems.setValueAt(resetForIngredientItems.getString("ProductLevel2RawItems_PL1_ITEM_CODE"), rowCount, 0);
                tableIngredientRawItems.setValueAt(resetForIngredientItems.getString("ProductLevel1_PL1_ITEM_NAME"), rowCount, 1);
                tableIngredientRawItems.setValueAt(resetForIngredientItems.getString("ProductLevel1_UnitCode"), rowCount, 2);
                tableIngredientRawItems.setValueAt(resetForIngredientItems.getString("ProductLevel2RawItems_PL1_ITEM_QUANTITY"), rowCount, 3);
                rowCount++;
            }
            countItemsInIngredientItemsTable();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }

        textProductLevel2Code.setText(Code);
        textProductLevel2Name.setText(Name);
        textPrintName.setText(printName);
        cmbPurchaseUnit.setSelectedItem(UnitName + "--" + UnitCode);
        comboDepartment.setSelectedItem(DepartmentName + "--" + DepartmentCode);
        comboVisibility.setSelectedItem(visibility);
    }//GEN-LAST:event_tableProductLevel2MouseClicked

    private void btnSaveProLve1ItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveProLve1ItemActionPerformed
        SaveProLevel2Item();
    }//GEN-LAST:event_btnSaveProLve1ItemActionPerformed

    private void textProductLevel2NameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textProductLevel2NameKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String name = textProductLevel2Name.getText();
            if (!name.isEmpty()) {
                textPrintName.setText(String.valueOf(name));
                textPrintName.requestFocus();
            }
        }
    }//GEN-LAST:event_textProductLevel2NameKeyPressed

    private void textProductLevel2CodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textProductLevel2CodeKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String code = textProductLevel2Code.getText();
            if (!code.isEmpty()) {
                textProductLevel2Name.requestFocus();
            }
        }
    }//GEN-LAST:event_textProductLevel2CodeKeyPressed

    private void textPrintNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textPrintNameKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String printName = textPrintName.getText();
            if (!printName.isEmpty()) {
                cmbPurchaseUnit.requestFocus();
            }
        }
    }//GEN-LAST:event_textPrintNameKeyPressed

    private void comboDepartmentKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_comboDepartmentKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String subDepartment = comboDepartment.getSelectedItem().toString();
            if (!subDepartment.equals(select)) {
                comboVisibility.requestFocus();
            }
        }
    }//GEN-LAST:event_comboDepartmentKeyPressed

    private void cmbPurchaseUnitKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmbPurchaseUnitKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String purchaseUnit = comboDepartment.getSelectedItem().toString();
            if (!purchaseUnit.equals(select)) {
                comboDepartment.requestFocus();
            }
        }
    }//GEN-LAST:event_cmbPurchaseUnitKeyPressed

    private void comboVisibilityKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_comboVisibilityKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            txtSearchRawItems.requestFocus();
        }
    }//GEN-LAST:event_comboVisibilityKeyPressed

    private void textProductLevel2CodeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textProductLevel2CodeKeyReleased
        ValidateFields.CheckForItemCodes(textProductLevel2Code);
    }//GEN-LAST:event_textProductLevel2CodeKeyReleased

    private void textProductLevel2NameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textProductLevel2NameKeyReleased
        ValidateFields.CheckForOtherFields(textProductLevel2Name);
    }//GEN-LAST:event_textProductLevel2NameKeyReleased

    private void textPrintNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textPrintNameKeyReleased
        ValidateFields.CheckForOtherFields(textPrintName);
    }//GEN-LAST:event_textPrintNameKeyReleased

    private void SaveProLevel2Item() {
        String Code, Name, printName, visibility;
        int ingredientRawItemsRowCount = tableIngredientRawItems.getRowCount();
        if (!cmbPurchaseUnit.getSelectedItem().equals(select) && !comboDepartment.getSelectedItem().equals(select)) {
            Code = textProductLevel2Code.getText();
            Name = textProductLevel2Name.getText();
            printName = textPrintName.getText();
            String UnitCode[] = cmbPurchaseUnit.getSelectedItem().toString().split("--");
            String DepartmentCode[] = comboDepartment.getSelectedItem().toString().split("--");
            visibility = comboVisibility.getSelectedItem().toString();
            if (!Code.isEmpty() && !Name.isEmpty() && !printName.isEmpty()) {
                if (ingredientRawItemsRowCount > 0) {
                    try {
                        java.sql.Statement stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                        String query = "select PL2_ITEM_CODE From ProductLevel2 where PL2_ITEM_CODE = '" + Code + "'";
                        ResultSet rset = stmt.executeQuery(query);

                        if (rset.next()) {
                            int x = JOptionPane.showConfirmDialog(this, "Are you sure to change the '" + Name + "' details?", "Update '" + Name + "'?", JOptionPane.YES_NO_OPTION);
                            if (x == JOptionPane.YES_OPTION) {
                                String UpdateQuery = "UPDATE [ProductLevel2]\n"
                                        + "   SET \n"
                                        + "      [PL2_ITEM_NAME] = '" + Name + "'\n"
                                        + "      ,[PL2_ITEM_PRINT_NAME] = '" + printName + "'\n"
                                        + "      ,[UnitCode] = '" + UnitCode[1] + "'\n"
                                        + "      ,[DepartmentCode] = '" + DepartmentCode[1] + "'\n"
                                        + "      ,[VISIBILITY] = '" + visibility + "'\n"
                                        + " WHERE [PL2_ITEM_CODE] = '" + Code + "'";
                                stmt.execute(UpdateQuery);
                                deleteExsistsRawItemsBeforeSave();
                                JOptionPane.showMessageDialog(this, "'" + Name + "' details are updated.");
                            } else if (x == JOptionPane.NO_OPTION) {
                                textProductLevel2Code.requestFocus();
                            }
                        } else if (!rset.next()) {
                            String UpdateQuery = "INSERT INTO [ProductLevel2]\n"
                                    + "           ([PL2_ITEM_CODE]\n"
                                    + "           ,[PL2_ITEM_NAME]\n"
                                    + "           ,[PL2_ITEM_PRINT_NAME]\n"
                                    + "           ,[UnitCode]\n"
                                    + "           ,[DepartmentCode]\n"
                                    + "           ,[VISIBILITY])\n"
                                    + "     VALUES\n"
                                    + "           ('" + Code + "'\n"
                                    + "           ,'" + Name + "'\n"
                                    + "           ,'" + printName + "'\n"
                                    + "           ,'" + UnitCode[1] + "'\n"
                                    + "           ,'" + DepartmentCode[1] + "'\n"
                                    + "           ,'" + visibility + "')";
                            stmt.execute(UpdateQuery);
                            deleteExsistsRawItemsBeforeSave();
                            JOptionPane.showMessageDialog(this, "New '" + menuName + "' is saved.");
                        }
                        rset.close();
                    } catch (SQLException ex) {
                        JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                        JOptionPane.showMessageDialog(this, "Please contact for support.");
                    } catch (HeadlessException ex) {
                        JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                        JOptionPane.showMessageDialog(this, "Please contact for support.");
                    }
                } else if (ingredientRawItemsRowCount == 0) {
                    JOptionPane.showMessageDialog(this, "Raw items are not inserted.", "No raw items", JOptionPane.OK_OPTION);
                }

            } else if (Code.isEmpty() || Name.isEmpty() || printName.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please fill all fields before save.", "Empty fields", JOptionPane.OK_OPTION);
                textProductLevel2Code.requestFocus();
            }
        } else if (cmbPurchaseUnit.getSelectedItem().equals(select) && !comboDepartment.getSelectedItem().equals(select)) {
            JOptionPane.showMessageDialog(this, "Manufacture unit or sub department is not selected.", "Not selected", JOptionPane.OK_OPTION);
            cmbPurchaseUnit.requestFocus();
        }
    }

    private void deleteExsistsRawItemsBeforeSave() {
        try {
            String Code = textProductLevel2Code.getText();
            java.sql.Statement stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            java.sql.Statement Checkstmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);

            String Checkquery = "select PL2_ITEM_CODE From ProductLevel2RawItems where PL2_ITEM_CODE = '" + Code + "'";
            ResultSet Checkrset = Checkstmt.executeQuery(Checkquery);

            while (Checkrset.next()) {
                String query = "delete From ProductLevel2RawItems where PL2_ITEM_CODE = '" + Code + "'";
                stmt.execute(query);
            }
            saveRawItems();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        } catch (HeadlessException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void saveRawItems() {
        String ItemCode = "Default", Code, pl1Code;
        double Quantity = 0, pl1Quantity;
        int setFor, RowCount = tableIngredientRawItems.getRowCount();
        Code = textProductLevel2Code.getText();
        try {
            java.sql.Statement stmtItems = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            for (int i = 0; i < RowCount; i++) {
                pl1Code = tableIngredientRawItems.getValueAt(i, 0).toString();
                pl1Quantity = roundThreeDecimals(Double.parseDouble(tableIngredientRawItems.getValueAt(i, 3).toString()));

                setFor = setForPicker.getValue();

                String ItemInsertQuery = "INSERT INTO [ProductLevel2RawItems]\n"
                        + "           ([PL2_ITEM_CODE]\n"
                        + "           ,[PL2_ITEM_QUANTITY]\n"
                        + "           ,[PL1_ITEM_CODE]\n"
                        + "           ,[PL1_ITEM_QUANTITY]\n"
                        + "           ,[ItemCode]\n"
                        + "           ,[QUANTITY])\n"
                        + "     VALUES\n"
                        + "           ('" + Code + "'\n"
                        + "           ,'" + setFor + "'\n"
                        + "           ,'" + pl1Code + "'\n"
                        + "           ,'" + pl1Quantity + "'\n"
                        + "           ,'" + ItemCode + "'\n"
                        + "           ,'" + Quantity + "')";
                stmtItems.execute(ItemInsertQuery);
            }
            FullRefresh();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void FirstCheckBeforeAddToSecondTable() {
        int SelectedRowCount = tableAllRawItems.getSelectedRowCount();
        if (SelectedRowCount == 1) {
            String ItemFromFirstTable = tableAllRawItems.getValueAt(tableAllRawItems.getSelectedRow(), 0).toString();
            Object[] CheckItemAlreadyAdded = CheckItemAlreadyAdded(ItemFromFirstTable);
            if ((Boolean) CheckItemAlreadyAdded[0]) {
                JOptionPane.showMessageDialog(this, "Item is already added.", "Already added.", JOptionPane.OK_OPTION);
            } else {
                calculateQuantity();
            }
        } else if (SelectedRowCount != 1) {
            JOptionPane.showMessageDialog(this, "Please select a single row in table.", "Select row.", JOptionPane.OK_OPTION);
        }
    }

    protected Object[] CheckItemAlreadyAdded(String ItemFromFirstTable) {
        int rowCount = model_IngredientItemTable.getRowCount();
        Object[] data = new Object[2];
        data[0] = false;
        data[1] = -1;

        for (int i = 0; i < rowCount; i++) {
            String ItemAtSecondTable = model_IngredientItemTable.getValueAt(i, 0).toString();
            if (ItemFromFirstTable.equals(ItemAtSecondTable)) {
                data[0] = true;
                data[1] = i;
            }
        }
        return data;
    }

    private void AddToSecondTable() {
        String ItemCode, ItemName, PurchaseUnitCode;
        double Quantity;
        int getSelectedRowAtFirstTable = tableAllRawItems.getSelectedRow();
        if (!formattedTextQuantity.getText().equals("")) {
            try {
                ItemCode = tableAllRawItems.getValueAt(getSelectedRowAtFirstTable, 0).toString();
                ItemName = tableAllRawItems.getValueAt(getSelectedRowAtFirstTable, 1).toString();
                PurchaseUnitCode = tableAllRawItems.getValueAt(getSelectedRowAtFirstTable, 2).toString();

                Quantity = roundThreeDecimals(Double.parseDouble(formattedTextQuantity.getText()));

                if (Quantity > 0) {
                    model_IngredientItemTable.addRow(new Object[]{ItemCode, ItemName, PurchaseUnitCode, Quantity});
                    textIngredientItemCount.setText("0.000");
                    countItemsInIngredientItemsTable();
                } else if (Quantity <= 0) {
                    JOptionPane.showMessageDialog(this, "Quantity should be greater than zero.", "Zero quantity", JOptionPane.OK_OPTION);
                }

            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                JOptionPane.showMessageDialog(this, "Please contact for support.");
            }
        }
    }

    private void calculateQuantity() {
        double Quantity, calculatedQuantity;
        int setFor;
        try {
            Quantity = roundThreeDecimals(Double.parseDouble(formattedTextQuantity.getText()));
            setFor = (Integer) setForPicker.getValue();
            calculatedQuantity = roundThreeDecimals(setFor * Quantity);
            formattedTextQuantity.setText(String.valueOf(calculatedQuantity));
            AddToSecondTable();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    public double roundThreeDecimals(double d) {
        DecimalFormat threeDForm = new DecimalFormat("#.###");
        return Double.valueOf(threeDForm.format(d));
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField TextProLevel1ItemCount;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnSaveProLve1Item;
    private javax.swing.JButton buttonAddSelected;
    private javax.swing.JButton buttonCalculate;
    private javax.swing.JButton buttonDeleteProLve1Item;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton buttonRemoveSelected;
    private javax.swing.JButton buttonViewCost;
    private javax.swing.JComboBox cmbPurchaseUnit;
    private javax.swing.JComboBox comboDepartment;
    private javax.swing.JComboBox comboVisibility;
    private javax.swing.JFormattedTextField formattedTextQuantity;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lbl_accountType1;
    private javax.swing.JLabel lbl_accountType4;
    private javax.swing.JLabel lbl_accountType5;
    private javax.swing.JLabel lbl_accountType6;
    private javax.swing.JLabel lbl_description2;
    private javax.swing.JLabel lbl_description3;
    private javax.swing.JLabel lbl_description4;
    private javax.swing.JLabel lbl_subAccount;
    private javax.swing.JPanel panel1;
    private javax.swing.JRadioButton rBtnCode;
    private javax.swing.JRadioButton rBtnCodeAll;
    private javax.swing.JRadioButton rBtnName;
    private javax.swing.JRadioButton rBtnNameAll;
    private com.toedter.components.JSpinField setForPicker;
    private javax.swing.JTable tableAllRawItems;
    private javax.swing.JTable tableIngredientRawItems;
    private javax.swing.JTable tableProductLevel2;
    private javax.swing.JTextField textIngredientItemCount;
    private javax.swing.JTextField textPrintName;
    private javax.swing.JTextField textProductLevel2Code;
    private javax.swing.JTextField textProductLevel2Name;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JTextField txtSearchRawItems;
    // End of variables declaration//GEN-END:variables
}
