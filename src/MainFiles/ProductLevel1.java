/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package MainFiles;

import static MainFiles.IndexPage.productLevel1;
import db.ConnectSql;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Ravindu
 */
public class ProductLevel1 extends javax.swing.JInternalFrame {

    private final String select = "--Select--";
    private final DefaultTableModel model_categoryTable;
    private final DefaultTableModel model_ProductLevel1;
    private final String spliter = "--";
    private final String menuName = "Product level 1";

    public ProductLevel1() {
        initComponents();

//        buttonGroup1.add(rBtnCode);
//        buttonGroup1.add(rBtnName);
        rBtnCode.setSelected(true);
        rBtnCodeAll.setSelected(true);
        textProductLevel1Code.requestFocus();
        model_categoryTable = (DefaultTableModel) tableAllRawItems.getModel();
        model_ProductLevel1 = (DefaultTableModel) tableProductLevel1.getModel();
        panel1.setToolTipText("Press right mouse click to refresh.");
        this.setTitle(menuName);

        LoadAllRawItems();
        LoadAllProductLevel1Items();
        loadPurUnitsToCombo();
        loadDepartmentsToCombo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        panel1 = new javax.swing.JPanel();
        btnSaveIngredient = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableAllRawItems = new javax.swing.JTable();
        rBtnCodeAll = new javax.swing.JRadioButton();
        rBtnNameAll = new javax.swing.JRadioButton();
        txtSearchRawItems = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableIngredientRawItems = new javax.swing.JTable();
        textIngredientItemCount = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        setForPicker = new com.toedter.components.JSpinField();
        buttonCalculate = new javax.swing.JButton();
        lbl_accountType6 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        lbl_accountType1 = new javax.swing.JLabel();
        lbl_accountType4 = new javax.swing.JLabel();
        lbl_description2 = new javax.swing.JLabel();
        comboDepartment = new javax.swing.JComboBox();
        textPrintName = new javax.swing.JTextField();
        textProductLevel1Name = new javax.swing.JTextField();
        textProductLevel1Code = new javax.swing.JTextField();
        lbl_subAccount = new javax.swing.JLabel();
        rBtnCode = new javax.swing.JRadioButton();
        rBtnName = new javax.swing.JRadioButton();
        txtSearch = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableProductLevel1 = new javax.swing.JTable();
        btnSaveProLve1Item = new javax.swing.JButton();
        buttonDeleteProLve1Item = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        TextProLevel1ItemCount = new javax.swing.JTextField();
        lbl_description3 = new javax.swing.JLabel();
        cmbPurchaseUnit = new javax.swing.JComboBox();
        jPanel4 = new javax.swing.JPanel();
        buttonAddSelected = new javax.swing.JButton();
        buttonRemoveSelected = new javax.swing.JButton();
        lbl_accountType5 = new javax.swing.JLabel();
        formattedTextQuantity = new javax.swing.JFormattedTextField();
        buttonViewCost = new javax.swing.JButton();

        setIconifiable(true);
        setPreferredSize(new java.awt.Dimension(1141, 666));
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameIconified(evt);
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        panel1.setBackground(new java.awt.Color(255, 255, 255));
        panel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.TRAILING, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Calibri", 1, 14), new java.awt.Color(153, 153, 153))); // NOI18N
        panel1.setForeground(new java.awt.Color(255, 255, 255));
        panel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panel1MouseClicked(evt);
            }
        });
        panel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnSaveIngredient.setMnemonic('s');
        btnSaveIngredient.setText("Save");
        btnSaveIngredient.setActionCommand("Delete");
        btnSaveIngredient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveIngredientActionPerformed(evt);
            }
        });
        panel1.add(btnSaveIngredient, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 590, 100, -1));

        btnRefresh.setMnemonic('d');
        btnRefresh.setText("Refresh");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });
        panel1.add(btnRefresh, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 590, 90, -1));

        btnExit.setMnemonic('e');
        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });
        btnExit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnExitKeyPressed(evt);
            }
        });
        panel1.add(btnExit, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 590, 90, -1));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "All raw items", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(102, 102, 102))); // NOI18N
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tableAllRawItems.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Raw item code", "Raw item name", "Unit"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableAllRawItems.getTableHeader().setReorderingAllowed(false);
        tableAllRawItems.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableAllRawItemsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableAllRawItems);
        if (tableAllRawItems.getColumnModel().getColumnCount() > 0) {
            tableAllRawItems.getColumnModel().getColumn(1).setPreferredWidth(140);
        }

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 70, 340, 170));

        rBtnCodeAll.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup2.add(rBtnCodeAll);
        rBtnCodeAll.setFont(new java.awt.Font("Calibri", 0, 11)); // NOI18N
        rBtnCodeAll.setText("Code");
        rBtnCodeAll.setOpaque(false);
        rBtnCodeAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rBtnCodeAllActionPerformed(evt);
            }
        });
        jPanel1.add(rBtnCodeAll, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 30, 60, -1));

        rBtnNameAll.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup2.add(rBtnNameAll);
        rBtnNameAll.setFont(new java.awt.Font("Calibri", 0, 11)); // NOI18N
        rBtnNameAll.setText("Name");
        rBtnNameAll.setOpaque(false);
        rBtnNameAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rBtnNameAllActionPerformed(evt);
            }
        });
        jPanel1.add(rBtnNameAll, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 30, 60, -1));

        txtSearchRawItems.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchRawItemsKeyReleased(evt);
            }
        });
        jPanel1.add(txtSearchRawItems, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 30, 210, -1));

        panel1.add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 310, 400, 260));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Ingredient raw items", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(102, 102, 102))); // NOI18N
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tableIngredientRawItems.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Raw item code", "Raw item name", "Unit", "Quantity"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableIngredientRawItems.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(tableIngredientRawItems);
        if (tableIngredientRawItems.getColumnModel().getColumnCount() > 0) {
            tableIngredientRawItems.getColumnModel().getColumn(1).setPreferredWidth(140);
        }

        jPanel2.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 70, 490, 170));

        textIngredientItemCount.setEditable(false);
        textIngredientItemCount.setBackground(new java.awt.Color(255, 255, 255));
        textIngredientItemCount.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jPanel2.add(textIngredientItemCount, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 30, 50, -1));

        jLabel1.setForeground(new java.awt.Color(102, 102, 102));
        jLabel1.setText("Ingredient items count");
        jPanel2.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 30, 120, 20));

        setForPicker.setMinimum(1);
        setForPicker.setOpaque(false);
        jPanel2.add(setForPicker, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 30, 60, -1));

        buttonCalculate.setText("Calculate");
        buttonCalculate.setOpaque(false);
        jPanel2.add(buttonCalculate, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 30, 100, 20));

        lbl_accountType6.setForeground(new java.awt.Color(102, 102, 102));
        lbl_accountType6.setText("Set for");
        jPanel2.add(lbl_accountType6, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 30, 40, 20));

        panel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 310, 550, 260));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel7.setForeground(new java.awt.Color(102, 102, 102));
        jLabel7.setText("Product level 1 code*");
        jPanel3.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 20, 114, 20));

        lbl_accountType1.setForeground(new java.awt.Color(102, 102, 102));
        lbl_accountType1.setText("Product level 1 name*");
        jPanel3.add(lbl_accountType1, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 60, 110, 20));

        lbl_accountType4.setForeground(new java.awt.Color(102, 102, 102));
        lbl_accountType4.setText("Print name *");
        jPanel3.add(lbl_accountType4, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 100, 100, 20));

        lbl_description2.setForeground(new java.awt.Color(102, 102, 102));
        lbl_description2.setText("Manufacture unit *");
        jPanel3.add(lbl_description2, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 140, 120, 20));

        comboDepartment.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Select--" }));
        comboDepartment.setToolTipText("");
        jPanel3.add(comboDepartment, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 180, 300, -1));
        jPanel3.add(textPrintName, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 100, 300, -1));
        jPanel3.add(textProductLevel1Name, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 60, 300, -1));
        jPanel3.add(textProductLevel1Code, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 20, 240, -1));

        lbl_subAccount.setForeground(new java.awt.Color(102, 102, 102));
        lbl_subAccount.setText("Search product level 1 by");
        jPanel3.add(lbl_subAccount, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 20, 130, 20));

        rBtnCode.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(rBtnCode);
        rBtnCode.setFont(new java.awt.Font("Calibri", 0, 11)); // NOI18N
        rBtnCode.setText("Code");
        rBtnCode.setOpaque(false);
        rBtnCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rBtnCodeActionPerformed(evt);
            }
        });
        jPanel3.add(rBtnCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 20, 60, -1));

        rBtnName.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(rBtnName);
        rBtnName.setFont(new java.awt.Font("Calibri", 0, 11)); // NOI18N
        rBtnName.setText("Name");
        rBtnName.setOpaque(false);
        rBtnName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rBtnNameActionPerformed(evt);
            }
        });
        jPanel3.add(rBtnName, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 20, 60, -1));

        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
        });
        jPanel3.add(txtSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 20, 150, -1));

        tableProductLevel1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product level 1 code", "Product level 1 name", "Department"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableProductLevel1.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(tableProductLevel1);
        if (tableProductLevel1.getColumnModel().getColumnCount() > 0) {
            tableProductLevel1.getColumnModel().getColumn(1).setPreferredWidth(200);
        }

        jPanel3.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 60, 540, 190));

        btnSaveProLve1Item.setText("Save");
        jPanel3.add(btnSaveProLve1Item, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 230, 90, -1));

        buttonDeleteProLve1Item.setText("Delete");
        jPanel3.add(buttonDeleteProLve1Item, new org.netbeans.lib.awtextra.AbsoluteConstraints(970, 230, 90, -1));

        jLabel2.setForeground(new java.awt.Color(102, 102, 102));
        jLabel2.setText("Item count");
        jPanel3.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 20, 70, 20));

        TextProLevel1ItemCount.setEditable(false);
        TextProLevel1ItemCount.setBackground(new java.awt.Color(255, 255, 255));
        TextProLevel1ItemCount.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jPanel3.add(TextProLevel1ItemCount, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 20, 50, -1));

        lbl_description3.setForeground(new java.awt.Color(102, 102, 102));
        lbl_description3.setText("Department *");
        jPanel3.add(lbl_description3, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 180, 100, 20));

        cmbPurchaseUnit.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Select--" }));
        jPanel3.add(cmbPurchaseUnit, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 140, 300, -1));

        panel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 1090, 270));

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Add/Remove", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(102, 102, 102))); // NOI18N

        buttonAddSelected.setText("-->>");
        buttonAddSelected.setOpaque(false);

        buttonRemoveSelected.setText("<<---");
        buttonRemoveSelected.setOpaque(false);

        lbl_accountType5.setForeground(new java.awt.Color(102, 102, 102));
        lbl_accountType5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbl_accountType5.setText("Quantity");

        formattedTextQuantity.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.000"))));
        formattedTextQuantity.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        formattedTextQuantity.setText("0.000");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbl_accountType5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(formattedTextQuantity))
                        .addGap(18, 18, 18))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(buttonAddSelected, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(buttonRemoveSelected))
                        .addContainerGap(14, Short.MAX_VALUE))))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addComponent(lbl_accountType5, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(formattedTextQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 67, Short.MAX_VALUE)
                .addComponent(buttonAddSelected)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonRemoveSelected)
                .addContainerGap())
        );

        panel1.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 310, 100, 260));

        buttonViewCost.setText("View cost");
        panel1.add(buttonViewCost, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 590, 100, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1135, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel1, javax.swing.GroupLayout.DEFAULT_SIZE, 640, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loadPurUnitsToCombo() {
        try {
            java.sql.Statement stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            String query = "select * From SIUnits order by UnitName";
            ResultSet rset = stmt.executeQuery(query);

            cmbPurchaseUnit.removeAllItems();
            cmbPurchaseUnit.insertItemAt("--Select--", 0);
            int position = 1;
            if (rset.next()) {
                do {
                    cmbPurchaseUnit.insertItemAt(rset.getString("UnitName") + "--" + rset.getString("UnitCode"), position); // 
                    position++;
                } while (rset.next());
            }
            cmbPurchaseUnit.setSelectedIndex(0);

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "please contact for support.");
        }
    }

    private void loadDepartmentsToCombo() {
        try {
            java.sql.Statement stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            String query = "select * From Departments order by DepartmentName";
            ResultSet rset = stmt.executeQuery(query);

            comboDepartment.removeAllItems();
            comboDepartment.insertItemAt("--Select--", 0);
            int position = 1;
            if (rset.next()) {
                do {
                    comboDepartment.insertItemAt(rset.getString("DepartmentName") + "--" + rset.getString("DepartmentCode"), position); // 
                    position++;
                } while (rset.next());
            }
            comboDepartment.setSelectedIndex(0);

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", ERROR);
        }
    }

    private void LoadAllRawItems() {
        try {
            ResultSet reset;
            Statement stmt;
            String query;
            int rowCount = 0;
            query = "SELECT ItemCode, ItemName, UnitPurchase FROM Items WHERE Visibility = 'Yes' ORDER BY ItemName";
            stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            reset = stmt.executeQuery(query);

            while (reset.next()) {
                model_categoryTable.addRow(new Object[model_categoryTable.getColumnCount()]);
                tableAllRawItems.setValueAt(reset.getString("ItemCode"), rowCount, 0);
                tableAllRawItems.setValueAt(reset.getString("ItemName"), rowCount, 1);
                tableAllRawItems.setValueAt(reset.getString("UnitPurchase"), rowCount, 2);
                rowCount++;
            }
            reset.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void LoadAllProductLevel1Items() {
        try {
            ResultSet reset;
            Statement stmt;
            String query;
            int rowCount = 0;
            query = "SELECT PL1_ITEM_CODE, PL1_ITEM_NAME, DepartmentCode FROM ProductLevel1 ORDER BY PL1_ITEM_NAME";
            stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            reset = stmt.executeQuery(query);

            while (reset.next()) {
                model_ProductLevel1.addRow(new Object[model_ProductLevel1.getColumnCount()]);
                tableProductLevel1.setValueAt(reset.getString("PL1_ITEM_CODE"), rowCount, 0);
                tableProductLevel1.setValueAt(reset.getString("PL1_ITEM_NAME"), rowCount, 1);
                tableProductLevel1.setValueAt(reset.getString("DepartmentCode"), rowCount, 2);
                rowCount++;
            }
            reset.close();
            countItemsInProductLevel1ItemsTable();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void countItemsInProductLevel1ItemsTable() {
        TextProLevel1ItemCount.setText(model_ProductLevel1.getRowCount() + "");
    }
    private void btnSaveIngredientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveIngredientActionPerformed
//
    }//GEN-LAST:event_btnSaveIngredientActionPerformed


    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
//        CheckBeforeDelete();
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        exit();
    }//GEN-LAST:event_btnExitActionPerformed

    private void btnExitKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnExitKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            exit();
        }
    }//GEN-LAST:event_btnExitKeyPressed

    private void exit() {
        if (productLevel1 != null) {
            productLevel1 = null;
        }
        this.dispose();
    }

    private void rBtnCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rBtnCodeActionPerformed
        if (rBtnCode.isSelected()) {
            txtSearch.requestFocus();
            txtSearch.selectAll();
        }
    }//GEN-LAST:event_rBtnCodeActionPerformed

    private void rBtnNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rBtnNameActionPerformed
        if (rBtnName.isSelected()) {
            txtSearch.requestFocus();
            txtSearch.selectAll();
        }
    }//GEN-LAST:event_rBtnNameActionPerformed

    private void tableAllRawItemsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableAllRawItemsMouseClicked
        formattedTextQuantity.selectAll();
        formattedTextQuantity.requestFocus();
    }//GEN-LAST:event_tableAllRawItemsMouseClicked

    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased
        if (rBtnCode.isSelected()) {
            SearchProductLevel1ItemByCode(txtSearch.getText());
        } else if (rBtnName.isSelected()) {
            SearchProductLevel1ItemByName(txtSearch.getText());
        }
    }//GEN-LAST:event_txtSearchKeyReleased

    private void SearchProductLevel1ItemByCode(String ItemCode) {
        try {
            ResultSet reset;
            Statement stmt;
            String query;
            int rowCount = 0;
            RefreshProductLevel1Table();

            if (!ItemCode.equals("")) {
                query = "SELECT PL1_ITEM_CODE, PL1_ITEM_NAME, DepartmentCode FROM ProductLevel1 WHERE PL1_ITEM_CODE LIKE '" + ItemCode + "%'";
            } else {
                query = "SELECT PL1_ITEM_CODE, PL1_ITEM_NAME, DepartmentCode FROM ProductLevel1 WHERE PL1_ITEM_CODE LIKE '" + ItemCode + "%'";
            }
            stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            reset = stmt.executeQuery(query);

            while (reset.next()) {
                model_ProductLevel1.addRow(new Object[model_ProductLevel1.getColumnCount()]);
                tableProductLevel1.setValueAt(reset.getString("PL1_ITEM_CODE"), rowCount, 0);
                tableProductLevel1.setValueAt(reset.getString("PL1_ITEM_NAME"), rowCount, 1);
                tableProductLevel1.setValueAt(reset.getString("DepartmentCode"), rowCount, 2);
                rowCount++;
            }
            reset.close();
            countItemsInProductLevel1ItemsTable();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void SearchProductLevel1ItemByName(String ItemName) {
        try {
            ResultSet reset;
            Statement stmt;
            String query;
            int rowCount = 0;
            RefreshProductLevel1Table();

            if (!ItemName.equals("")) {
                query = "SELECT PL1_ITEM_CODE, PL1_ITEM_NAME, DepartmentCode FROM ProductLevel1 WHERE PL1_ITEM_CODE LIKE '" + ItemName + "%'";
            } else {
                query = "SELECT PL1_ITEM_CODE, PL1_ITEM_NAME, DepartmentCode FROM ProductLevel1 WHERE PL1_ITEM_CODE LIKE '" + ItemName + "%'";
            }
            stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            reset = stmt.executeQuery(query);

            while (reset.next()) {
                model_ProductLevel1.addRow(new Object[model_ProductLevel1.getColumnCount()]);
                tableProductLevel1.setValueAt(reset.getString("PL1_ITEM_CODE"), rowCount, 0);
                tableProductLevel1.setValueAt(reset.getString("PL1_ITEM_NAME"), rowCount, 1);
                tableProductLevel1.setValueAt(reset.getString("DepartmentCode"), rowCount, 2);
                rowCount++;
            }
            reset.close();
            countItemsInProductLevel1ItemsTable();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void RefreshProductLevel1Table() {
        try {
            int row = model_ProductLevel1.getRowCount();
            for (int j = 0; j < row; j++) {
                model_ProductLevel1.removeRow(0);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void panel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panel1MouseClicked
        if (SwingUtilities.isRightMouseButton(evt) || evt.isControlDown()) {
            Refresh();
        }
    }//GEN-LAST:event_panel1MouseClicked

    private void rBtnCodeAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rBtnCodeAllActionPerformed
        if (rBtnCodeAll.isSelected()) {
            txtSearchRawItems.requestFocus();
            txtSearchRawItems.selectAll();
        }
    }//GEN-LAST:event_rBtnCodeAllActionPerformed

    private void rBtnNameAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rBtnNameAllActionPerformed
        if (rBtnNameAll.isSelected()) {
            txtSearchRawItems.requestFocus();
            txtSearchRawItems.selectAll();
        }
    }//GEN-LAST:event_rBtnNameAllActionPerformed

    private void txtSearchRawItemsKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchRawItemsKeyReleased
        if (rBtnCodeAll.isSelected()) {
            SearchAllItemByCode(txtSearchRawItems.getText());
        } else if (rBtnNameAll.isSelected()) {
            SearchAllItemByName(txtSearchRawItems.getText());
        }
    }//GEN-LAST:event_txtSearchRawItemsKeyReleased

    private void SearchAllItemByCode(String ItemCode) {
        try {
            ResultSet reset;
            Statement stmt;
            String query;
            int rowCount = 0;
            RefreshAllRawItemsTable();

            if (!ItemCode.equals("")) {
                query = "SELECT ItemCode, ItemName, UnitPurchase FROM Items WHERE Visibility = 'Yes' AND ItemCode LIKE '" + ItemCode + "%'";
            } else {
                query = "SELECT ItemCode, ItemName, UnitPurchase FROM Items WHERE Visibility = 'Yes' AND ItemCode LIKE '" + ItemCode + "%'";
            }
            stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            reset = stmt.executeQuery(query);

            while (reset.next()) {
                model_categoryTable.addRow(new Object[model_categoryTable.getColumnCount()]);
                tableAllRawItems.setValueAt(reset.getString("ItemCode"), rowCount, 0);
                tableAllRawItems.setValueAt(reset.getString("ItemName"), rowCount, 1);
                tableAllRawItems.setValueAt(reset.getString("UnitPurchase"), rowCount, 2);
                rowCount++;
            }
            reset.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void SearchAllItemByName(String ItemName) {
        try {
            ResultSet reset;
            Statement stmt;
            String query;
            int rowCount = 0;
            RefreshAllRawItemsTable();

            if (!ItemName.equals("")) {
                query = "SELECT ItemCode, ItemName, UnitPurchase FROM Items WHERE Visibility = 'Yes' AND ItemName LIKE '%" + ItemName + "%'";
            } else {
                query = "SELECT ItemCode, ItemName, UnitPurchase FROM Items  WHERE Visibility = 'Yes' AND ItemName LIKE '%" + ItemName + "%'";
            }
            stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            reset = stmt.executeQuery(query);

            while (reset.next()) {
                model_categoryTable.addRow(new Object[model_categoryTable.getColumnCount()]);
                tableAllRawItems.setValueAt(reset.getString("ItemCode"), rowCount, 0);
                tableAllRawItems.setValueAt(reset.getString("ItemName"), rowCount, 1);
                tableAllRawItems.setValueAt(reset.getString("UnitPurchase"), rowCount, 2);
                rowCount++;
            }
            reset.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void RefreshAllRawItemsTable() {
        try {
            int row = model_categoryTable.getRowCount();
            for (int j = 0; j < row; j++) {
                model_categoryTable.removeRow(0);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void formInternalFrameIconified(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameIconified
        productLevel1.toFront();
    }//GEN-LAST:event_formInternalFrameIconified

    private void Refresh() {
        RefreshTableAndLoadAgain();
        textPrintName.setText("");
        textProductLevel1Name.setText("");
        txtSearch.setText("");
        textProductLevel1Code.setText("");
        setForPicker.resetKeyboardActions();
    }

    private void RefreshTableAndLoadAgain() {
        try {
            int row = model_categoryTable.getRowCount();
            for (int j = 0; j < row; j++) {
                model_categoryTable.removeRow(0);
            }
            LoadAllRawItems();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField TextProLevel1ItemCount;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnSaveIngredient;
    private javax.swing.JButton btnSaveProLve1Item;
    private javax.swing.JButton buttonAddSelected;
    private javax.swing.JButton buttonCalculate;
    private javax.swing.JButton buttonDeleteProLve1Item;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton buttonRemoveSelected;
    private javax.swing.JButton buttonViewCost;
    private javax.swing.JComboBox cmbPurchaseUnit;
    private javax.swing.JComboBox comboDepartment;
    private javax.swing.JFormattedTextField formattedTextQuantity;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lbl_accountType1;
    private javax.swing.JLabel lbl_accountType4;
    private javax.swing.JLabel lbl_accountType5;
    private javax.swing.JLabel lbl_accountType6;
    private javax.swing.JLabel lbl_description2;
    private javax.swing.JLabel lbl_description3;
    private javax.swing.JLabel lbl_subAccount;
    private javax.swing.JPanel panel1;
    private javax.swing.JRadioButton rBtnCode;
    private javax.swing.JRadioButton rBtnCodeAll;
    private javax.swing.JRadioButton rBtnName;
    private javax.swing.JRadioButton rBtnNameAll;
    private com.toedter.components.JSpinField setForPicker;
    private javax.swing.JTable tableAllRawItems;
    private javax.swing.JTable tableIngredientRawItems;
    private javax.swing.JTable tableProductLevel1;
    private javax.swing.JTextField textIngredientItemCount;
    private javax.swing.JTextField textPrintName;
    private javax.swing.JTextField textProductLevel1Code;
    private javax.swing.JTextField textProductLevel1Name;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JTextField txtSearchRawItems;
    // End of variables declaration//GEN-END:variables
}
