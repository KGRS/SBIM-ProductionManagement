/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package reports;

import static MainFiles.IndexPage.rawItemUsageAndWastageMoniter;
import OtherDialogs.ViewWastageRowItems;
import db.ConnectSql;
import functions.SendEMails;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

/**
 *
 * @author Ravindu
 */
public class RawItemUsageAndWastageMoniter extends javax.swing.JInternalFrame {

    private final String select = "--Select--";
    private final DefaultTableModel model_tableRankedEmployee, model_tableDesignationRank;
    private final DefaultTableModel model_TableEmployee;
    private final String spliter = "--";
    private final String menuName = "Raw item usage and wastage moniter";
    String departmentCode, subDepartmentCode, rankForGenerate, designationCode, designationName, empCode, empFirstName, empCallingName, fixedJob, stDate, enDate, jobID;
    int rank, rowCountOfTableEmployee, rowCountOfTableWastage, rowCountOfTableRankedEmployee, selectedRowOfTableTimeTaken, selectedRowOfTableRawItemUsage, selectedRowOfTableJobDetails, selectedRowCountOfTableJobDetails, selectedRowCountOfTableWastage;

    public RawItemUsageAndWastageMoniter() {
        initComponents();
        loadDepartmentsToCombo();
        cmbAtTableAt8();

        comboDepartment.requestFocus();
        model_tableRankedEmployee = (DefaultTableModel) tableJobDetails.getModel();
        model_TableEmployee = (DefaultTableModel) tableTimeTaken.getModel();
        model_tableDesignationRank = (DefaultTableModel) tableRawItemUsage.getModel();
        panel1.setToolTipText("Press right mouse click to refresh.");
        this.setTitle(menuName);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        panel1 = new javax.swing.JPanel();
        lbl_accountType1 = new javax.swing.JLabel();
        buttonView = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        comboDepartment = new javax.swing.JComboBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableJobDetails = new javax.swing.JTable();
        ButtonViewWastageRawItems = new javax.swing.JButton();
        comboSubDepartment = new javax.swing.JComboBox();
        lbl_accountType2 = new javax.swing.JLabel();
        comboBoxFixedJobs = new javax.swing.JComboBox();
        lbl_subAccount3 = new javax.swing.JLabel();
        CalendarStartDate = new org.sourceforge.jcalendarbutton.JCalendarButton();
        lbl_description = new javax.swing.JLabel();
        lbl_accountType = new javax.swing.JLabel();
        CalendarEndDate = new org.sourceforge.jcalendarbutton.JCalendarButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableTimeTaken = new javax.swing.JTable();
        lbl_subAccount1 = new javax.swing.JLabel();
        TextNumberOfEmpAtSubDepartment = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableRawItemUsage = new javax.swing.JTable();
        lbl_subAccount = new javax.swing.JLabel();
        TextNumberOfEmpRanked = new javax.swing.JTextField();

        setIconifiable(true);
        setPreferredSize(new java.awt.Dimension(989, 661));
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameIconified(evt);
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        panel1.setBackground(new java.awt.Color(255, 255, 255));
        panel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.TRAILING, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Calibri", 1, 14), new java.awt.Color(153, 153, 153))); // NOI18N
        panel1.setForeground(new java.awt.Color(255, 255, 255));
        panel1.setPreferredSize(new java.awt.Dimension(950, 688));
        panel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panel1MouseClicked(evt);
            }
        });
        panel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lbl_accountType1.setForeground(new java.awt.Color(102, 102, 102));
        lbl_accountType1.setText("Fixed job/ Process *");
        panel1.add(lbl_accountType1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, 120, 20));

        buttonView.setText("View");
        buttonView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonViewActionPerformed(evt);
            }
        });
        panel1.add(buttonView, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 100, 90, 20));

        btnSave.setMnemonic('s');
        btnSave.setText("Email");
        btnSave.setActionCommand("Delete");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        panel1.add(btnSave, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 590, 80, -1));

        btnRefresh.setMnemonic('d');
        btnRefresh.setText("Refresh");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });
        panel1.add(btnRefresh, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 590, 80, -1));

        btnExit.setMnemonic('e');
        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });
        btnExit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnExitKeyPressed(evt);
            }
        });
        panel1.add(btnExit, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 590, 80, -1));

        comboDepartment.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Select--" }));
        comboDepartment.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                comboDepartmentPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        comboDepartment.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                comboDepartmentKeyPressed(evt);
            }
        });
        panel1.add(comboDepartment, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 20, 300, 20));

        tableJobDetails.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Job ID", "Start date", "Allocated time", "Taken time", "Item allocated", "Item completed", "Did wastage?", "Did late?", "Email"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableJobDetails.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(tableJobDetails);
        if (tableJobDetails.getColumnModel().getColumnCount() > 0) {
            tableJobDetails.getColumnModel().getColumn(6).setPreferredWidth(130);
            tableJobDetails.getColumnModel().getColumn(7).setPreferredWidth(130);
        }

        panel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 357, 930, 210));

        ButtonViewWastageRawItems.setText("View wastage raw items");
        ButtonViewWastageRawItems.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonViewWastageRawItemsActionPerformed(evt);
            }
        });
        panel1.add(ButtonViewWastageRawItems, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 590, 170, -1));

        comboSubDepartment.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Select--" }));
        comboSubDepartment.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                comboSubDepartmentPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        panel1.add(comboSubDepartment, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 20, 260, -1));

        lbl_accountType2.setForeground(new java.awt.Color(102, 102, 102));
        lbl_accountType2.setText("Department *");
        panel1.add(lbl_accountType2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 80, 20));

        comboBoxFixedJobs.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Select--" }));
        comboBoxFixedJobs.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                comboBoxFixedJobsPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        panel1.add(comboBoxFixedJobs, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 60, 380, -1));

        lbl_subAccount3.setForeground(new java.awt.Color(102, 102, 102));
        lbl_subAccount3.setText("Sub department *");
        panel1.add(lbl_subAccount3, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 20, 100, 20));

        CalendarStartDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CalendarStartDateActionPerformed(evt);
            }
        });
        CalendarStartDate.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                CalendarStartDatePropertyChange(evt);
            }
        });
        panel1.add(CalendarStartDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 60, 120, -1));

        lbl_description.setForeground(new java.awt.Color(102, 102, 102));
        lbl_description.setText("Start date");
        panel1.add(lbl_description, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 60, 70, 20));

        lbl_accountType.setForeground(new java.awt.Color(102, 102, 102));
        lbl_accountType.setText("End date");
        panel1.add(lbl_accountType, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 100, 60, 20));

        CalendarEndDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CalendarEndDateActionPerformed(evt);
            }
        });
        CalendarEndDate.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                CalendarEndDatePropertyChange(evt);
            }
        });
        panel1.add(CalendarEndDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 100, 120, -1));

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(null, "Employees notify for late jobs", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(102, 102, 102)), "Employees notify for late jobs")); // NOI18N

        tableTimeTaken.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Employee code", "First name", "Surname", "No of jobs"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableTimeTaken.getTableHeader().setReorderingAllowed(false);
        tableTimeTaken.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableTimeTakenMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableTimeTaken);
        if (tableTimeTaken.getColumnModel().getColumnCount() > 0) {
            tableTimeTaken.getColumnModel().getColumn(1).setPreferredWidth(100);
            tableTimeTaken.getColumnModel().getColumn(2).setPreferredWidth(200);
            tableTimeTaken.getColumnModel().getColumn(3).setPreferredWidth(100);
        }

        lbl_subAccount1.setForeground(new java.awt.Color(102, 102, 102));
        lbl_subAccount1.setText("Number of employees notify for late jobs");

        TextNumberOfEmpAtSubDepartment.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        TextNumberOfEmpAtSubDepartment.setEnabled(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 134, Short.MAX_VALUE)
                        .addComponent(lbl_subAccount1, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(TextNumberOfEmpAtSubDepartment, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbl_subAccount1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TextNumberOfEmpAtSubDepartment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35))
        );

        panel1.add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 150, 450, 190));

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder("Employess notify for wastage")));

        tableRawItemUsage.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Employee code", "First name", "Surname", "No of jobs"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableRawItemUsage.getTableHeader().setReorderingAllowed(false);
        tableRawItemUsage.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableRawItemUsageMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tableRawItemUsage);
        if (tableRawItemUsage.getColumnModel().getColumnCount() > 0) {
            tableRawItemUsage.getColumnModel().getColumn(1).setPreferredWidth(100);
            tableRawItemUsage.getColumnModel().getColumn(2).setPreferredWidth(200);
            tableRawItemUsage.getColumnModel().getColumn(3).setPreferredWidth(100);
        }

        lbl_subAccount.setForeground(new java.awt.Color(102, 102, 102));
        lbl_subAccount.setText("Number of employees did wastage");

        TextNumberOfEmpRanked.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        TextNumberOfEmpRanked.setEnabled(false);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(17, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 421, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(lbl_subAccount, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(TextNumberOfEmpRanked, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbl_subAccount, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TextNumberOfEmpRanked, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        panel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 150, 460, 190));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel1, javax.swing.GroupLayout.PREFERRED_SIZE, 973, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panel1, javax.swing.GroupLayout.PREFERRED_SIZE, 628, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 3, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmbAtTableAt8() {
        TableColumn AuthColumn = tableJobDetails.getColumnModel().getColumn(8);
        JComboBox comboBox = new JComboBox();
        comboBox.addItem("Yes");
        comboBox.addItem("No");
        AuthColumn.setCellEditor(new DefaultCellEditor(comboBox));
    }

    private void loadDepartmentsToCombo() {
        try {
            java.sql.Statement stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            String query = "select DepartmentCode, DepartmentName From Departments order by DepartmentName";
            ResultSet rset = stmt.executeQuery(query);

            comboDepartment.removeAllItems();
            comboDepartment.insertItemAt("--Select--", 0);
            int position = 1;
            if (rset.next()) {
                do {
                    comboDepartment.insertItemAt(rset.getString("DepartmentName") + "--" + rset.getString("DepartmentCode"), position); // 
                    position++;
                } while (rset.next());
            }
            comboDepartment.setSelectedIndex(0);

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", ERROR);
        }
    }

    private void loadSubDepartmentsToCombo() {
        try {
            String departmentCodeByArray[] = comboDepartment.getSelectedItem().toString().split(spliter);
            java.sql.Statement stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            String query = "select SUB_DEPARTMENT_CODE, SUB_DEPARTMENT_NAME From SubDepartments WHERE DepartmentCode = '" + departmentCodeByArray[1] + "' order by SUB_DEPARTMENT_NAME";
            ResultSet rset = stmt.executeQuery(query);

            comboSubDepartment.removeAllItems();
            comboSubDepartment.insertItemAt("--Select--", 0);
            int position = 1;
            if (rset.next()) {
                do {
                    comboSubDepartment.insertItemAt(rset.getString("SUB_DEPARTMENT_NAME") + "--" + rset.getString("SUB_DEPARTMENT_CODE"), position); // 
                    position++;
                } while (rset.next());
            }
            comboSubDepartment.setSelectedIndex(0);

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", ERROR);
        }
    }

    private void loadFixJobsToCombo() {
        try {
            String departmentCodeByArray[] = comboSubDepartment.getSelectedItem().toString().split(spliter);
            java.sql.Statement stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            String query = "select JOB_FIXED_NAME, JOB_FIXED_ID, PRODUCT_LEVEL_ITEM_CODE From JobFixed WHERE SUB_DEPARTMENT_CODE = '" + departmentCodeByArray[1] + "' order by JOB_FIXED_NAME";
            ResultSet rset = stmt.executeQuery(query);

            comboBoxFixedJobs.removeAllItems();
            comboBoxFixedJobs.insertItemAt("--Select--", 0);
            int position = 1;
            if (rset.next()) {
                do {
                    comboBoxFixedJobs.insertItemAt(rset.getString("JOB_FIXED_NAME") + "--" + rset.getString("JOB_FIXED_ID") + "--" + rset.getString("PRODUCT_LEVEL_ITEM_CODE"), position); // 
                    position++;
                } while (rset.next());
            }
            comboBoxFixedJobs.setSelectedIndex(0);

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", ERROR);
        }
    }

    private void loadSelectedFIXED_JOB_IDLateJobs(String fixedJobIDByArray, String startDate, String endDate) {
        try {
            ResultSet reset;
            Statement stmt;
            String query;
            int rowCount = 0;
            RefreshEmployeeTable();

            query = "SELECT Distinct\n"
                    + "     JobFinished.\"FIXED_JOB_ID\" AS JobFinished_FIXED_JOB_ID,\n"
                    + "     JobFinished.\"IS_LATE\" AS JobFinished_IS_LATE,\n"
                    //                    + "     JobFinished.\"JOB_ALLOCATED_DATE\" AS JobFinished_JOB_ALLOCATED_DATE,\n"
                    + "     Employees.\"FIRST_NAME\" AS Employees_FIRST_NAME,\n"
                    + "     Employees.\"SUR_NAME\" AS Employees_SUR_NAME,\n"
                    + "     EmployeesAtFinishedJob.\"EMPLOYEE_CODE\" AS EmployeesAtFinishedJob_EMPLOYEE_CODE,\n"
                    + "	 COUNT(EmployeesAtFinishedJob.\"EMPLOYEE_CODE\") AS EmpCount\n"
                    + "FROM\n"
                    + "     \"dbo\".\"EmployeesAtFinishedJob\" EmployeesAtFinishedJob INNER JOIN \"dbo\".\"JobFinished\" JobFinished ON EmployeesAtFinishedJob.\"JOB_ID\" = JobFinished.\"JOB_ID\"\n"
                    + "     INNER JOIN \"dbo\".\"Employees\" Employees ON EmployeesAtFinishedJob.\"EMPLOYEE_CODE\" = Employees.\"EMPLOYEE_CODE\"\n"
                    + "WHERE\n"
                    + "     JobFinished.\"FIXED_JOB_ID\" = '" + fixedJobIDByArray + "'\n"
                    + " AND JobFinished.\"IS_LATE\" = 'Yes' AND (JobFinished.\"JOB_ALLOCATED_DATE\" >= '" + startDate + "' AND JobFinished.\"JOB_ALLOCATED_DATE\" <= '" + endDate + "')\n"
                    + "Group by \n"
                    + "JobFinished.\"FIXED_JOB_ID\",JobFinished.\"IS_LATE\",Employees.\"FIRST_NAME\"\n"
                    + ",Employees.\"SUR_NAME\",EmployeesAtFinishedJob.\"EMPLOYEE_CODE\"";
            stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            reset = stmt.executeQuery(query);

            while (reset.next()) {
                model_TableEmployee.addRow(new Object[model_TableEmployee.getColumnCount()]);
                tableTimeTaken.setValueAt(reset.getString("EmployeesAtFinishedJob_EMPLOYEE_CODE"), rowCount, 0);
                tableTimeTaken.setValueAt(reset.getString("Employees_FIRST_NAME"), rowCount, 1);
                tableTimeTaken.setValueAt(reset.getString("Employees_SUR_NAME"), rowCount, 2);
                tableTimeTaken.setValueAt(reset.getString("EmpCount"), rowCount, 3);
                rowCount++;
            }
            TextNumberOfEmpAtSubDepartment.setText(String.valueOf(rowCount));
            reset.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void RefreshEmployeeTable() {
        try {
            int row = model_TableEmployee.getRowCount();
            for (int j = 0; j < row; j++) {
                model_TableEmployee.removeRow(0);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void comboDepartmentKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_comboDepartmentKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String text = comboDepartment.getSelectedItem().toString();
            if (!text.equals(select)) {
                loadSubDepartmentsToCombo();
                btnSave.requestFocus();
            }
        }
    }//GEN-LAST:event_comboDepartmentKeyPressed

    private void comboDepartmentPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_comboDepartmentPopupMenuWillBecomeInvisible
        String text = comboDepartment.getSelectedItem().toString();
        if (!text.equals(select)) {
            loadSubDepartmentsToCombo();
            btnSave.requestFocus();
        }
    }//GEN-LAST:event_comboDepartmentPopupMenuWillBecomeInvisible

    private void btnExitKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnExitKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            exit();
        }
    }//GEN-LAST:event_btnExitKeyPressed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        exit();
    }//GEN-LAST:event_btnExitActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        Refresh();
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        int RowCount = tableJobDetails.getRowCount();
        CheckBeforeSave();
    }//GEN-LAST:event_btnSaveActionPerformed

    private void buttonViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonViewActionPerformed
        subDepartmentCode = comboSubDepartment.getSelectedItem().toString();
        stDate = CalendarStartDate.getText();
        enDate = CalendarEndDate.getText();
        fixedJob = comboBoxFixedJobs.getSelectedItem().toString();
        if (!subDepartmentCode.equals(select) && !fixedJob.equals(select) && !stDate.equals("") && !enDate.equals("")) {
//            String subDepartmentCodeByArray[] = comboSubDepartment.getSelectedItem().toString().split(spliter);
            String fixedJobIDByArray[] = comboBoxFixedJobs.getSelectedItem().toString().split(spliter);
            loadSelectedFIXED_JOB_IDLateJobs(fixedJobIDByArray[1] + "--" + fixedJobIDByArray[2], stDate, enDate);
            LoadSelectedFIXED_JOB_ID_Wastage(fixedJobIDByArray[1] + "--" + fixedJobIDByArray[2], stDate, enDate);
        } else if (subDepartmentCode.equals(select) || fixedJob.equals(select) || !stDate.equals("") || enDate.equals("")) {
            JOptionPane.showMessageDialog(this, "Dates, Sub department or fixed job is not selected.", "Not selected", JOptionPane.OK_OPTION);
            comboSubDepartment.requestFocus();
        }
    }//GEN-LAST:event_buttonViewActionPerformed

    private void LoadSelectedFIXED_JOB_ID_Wastage(String fixedJobIDByArray, String startDate, String endDate) {
        try {
            RefreshDesignationRankTable();
            ResultSet reset;
            Statement stmt;
            String query;
            int rowCount = 0;
            query = "SELECT DISTINCT\n"
                    + "     COUNT(EmployeesAtFinishedJob.\"EMPLOYEE_CODE\") AS EmpCount,\n"
                    + "     JobFinished.\"FIXED_JOB_ID\" AS JobFinished_FIXED_JOB_ID,\n"
                    + "     Employees.\"FIRST_NAME\" AS Employees_FIRST_NAME,\n"
                    + "     Employees.\"SUR_NAME\" AS Employees_SUR_NAME,\n"
                    + "     EmployeesAtFinishedJob.\"EMPLOYEE_CODE\" AS EmployeesAtFinishedJob_EMPLOYEE_CODE,\n"
                    + "     PLItemDifference.\"IS_WASTAGE\" AS PLItemDifference_IS_WASTAGE\n"
                    + "FROM\n"
                    + "     \"dbo\".\"EmployeesAtFinishedJob\" EmployeesAtFinishedJob INNER JOIN \"dbo\".\"JobFinished\" JobFinished ON EmployeesAtFinishedJob.\"JOB_ID\" = JobFinished.\"JOB_ID\"\n"
                    + "     INNER JOIN \"dbo\".\"Employees\" Employees ON EmployeesAtFinishedJob.\"EMPLOYEE_CODE\" = Employees.\"EMPLOYEE_CODE\"\n"
                    + "     INNER JOIN \"dbo\".\"PLItemDifference\" PLItemDifference ON JobFinished.\"JOB_ID\" = PLItemDifference.\"JOB_ID\"\n"
                    + "WHERE\n"
                    + "     JobFinished.\"FIXED_JOB_ID\" = '" + fixedJobIDByArray + "'\n"
                    + " AND PLItemDifference.\"IS_WASTAGE\" = 'Yes'\n"
                    + " AND (JobFinished.\"JOB_ALLOCATED_DATE\" >= '" + startDate + "'\n"
                    + " AND JobFinished.\"JOB_ALLOCATED_DATE\" <= '" + endDate + "')\n"
                    + "GROUP BY\n"
                    + "     JobFinished.\"FIXED_JOB_ID\",\n"
                    + "     Employees.\"FIRST_NAME\",\n"
                    + "     Employees.\"SUR_NAME\",\n"
                    + "     EmployeesAtFinishedJob.\"EMPLOYEE_CODE\",\n"
                    + "     PLItemDifference.\"IS_WASTAGE\"";
            stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            reset = stmt.executeQuery(query);

            while (reset.next()) {
                model_tableDesignationRank.addRow(new Object[model_tableDesignationRank.getColumnCount()]);
                tableRawItemUsage.setValueAt(reset.getString("EmployeesAtFinishedJob_EMPLOYEE_CODE"), rowCount, 0);
                tableRawItemUsage.setValueAt(reset.getString("Employees_FIRST_NAME"), rowCount, 1);
                tableRawItemUsage.setValueAt(reset.getString("Employees_SUR_NAME"), rowCount, 2);
                tableRawItemUsage.setValueAt(reset.getString("EmpCount"), rowCount, 3);
                rowCount++;
            }
            reset.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void LoadlateJobs(String empCode) {
        try {
            model_tableRankedEmployee.setRowCount(0);
            ResultSet reset;
            Statement stmt;
            String query;
            int rowCount = 0;
            query = "SELECT\n"
                    //                    + "     JobFinished.\"IS_LATE\" AS JobFinished_IS_LATE,\n"
                    //                    + "     EmployeesAtFinishedJob.\"EMPLOYEE_CODE\" AS EmployeesAtFinishedJob_EMPLOYEE_CODE,\n"
                    + "     EmployeesAtFinishedJob.\"JOB_ID\" AS EmployeesAtFinishedJob_JOB_ID,\n"
                    + "     JobFinished.\"JOB_ALLOCATED_DATE\" AS JobFinished_JOB_ALLOCATED_DATE,\n"
                    + "     JobFinished.\"ALLOCATED_TIME\" AS JobFinished_ALLOCATED_TIME,\n"
                    + "     JobFinished.\"TAKEN_TIME\" AS JobFinished_TAKEN_TIME,\n"
                    + "     JobFinished.\"ITEM_COUNT\" AS JobFinished_ITEM_COUNT,\n"
                    + "     JobFinished.\"ITEM_COUNT_COMPLETED\" AS JobFinished_ITEM_COUNT_COMPLETED,\n"
                    + "     JobFinished.\"IS_LATE\" AS JobFinished_IS_LATE,\n"
                    + "     PLItemDifference.\"IS_WASTAGE\" AS PLItemDifference_IS_WASTAGE\n"
                    + "FROM\n"
                    + "     \"dbo\".\"EmployeesAtFinishedJob\" EmployeesAtFinishedJob INNER JOIN \"dbo\".\"JobFinished\" JobFinished ON EmployeesAtFinishedJob.\"JOB_ID\" = JobFinished.\"JOB_ID\"\n"
                    + "     INNER JOIN \"dbo\".\"PLItemDifference\" PLItemDifference ON JobFinished.\"JOB_ID\" = PLItemDifference.\"JOB_ID\"\n"
                    + "WHERE\n"
                    + "     EmployeesAtFinishedJob.\"EMPLOYEE_CODE\" = '" + empCode + "' AND JobFinished.\"IS_LATE\" = 'Yes' ORDER BY EmployeesAtFinishedJob.\"JOB_ID\"";
            stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            reset = stmt.executeQuery(query);

            while (reset.next()) {
                model_tableRankedEmployee.addRow(new Object[model_tableRankedEmployee.getColumnCount()]);
                tableJobDetails.setValueAt(reset.getString("EmployeesAtFinishedJob_JOB_ID"), rowCount, 0);
                tableJobDetails.setValueAt(reset.getString("JobFinished_JOB_ALLOCATED_DATE"), rowCount, 1);
                tableJobDetails.setValueAt(reset.getString("JobFinished_ALLOCATED_TIME"), rowCount, 2);
                tableJobDetails.setValueAt(reset.getString("JobFinished_TAKEN_TIME"), rowCount, 3);
                tableJobDetails.setValueAt(reset.getString("JobFinished_ITEM_COUNT"), rowCount, 4);
                tableJobDetails.setValueAt(reset.getString("JobFinished_ITEM_COUNT_COMPLETED"), rowCount, 5);
                tableJobDetails.setValueAt(reset.getString("PLItemDifference_IS_WASTAGE"), rowCount, 6);
                tableJobDetails.setValueAt(reset.getString("JobFinished_IS_LATE"), rowCount, 7);
                tableJobDetails.setValueAt("No", rowCount, 8);
                rowCount++;
            }
            reset.close();
            countItemsInSecondTable();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void LoadWastageJobs(String empCode) {
        try {
            model_tableRankedEmployee.setRowCount(0);
            ResultSet reset;
            Statement stmt;
            String query;
            int rowCount = 0;
            query = "SELECT\n"
                    //                    + "     JobFinished.\"IS_LATE\" AS JobFinished_IS_LATE,\n"
                    //                    + "     EmployeesAtFinishedJob.\"EMPLOYEE_CODE\" AS EmployeesAtFinishedJob_EMPLOYEE_CODE,\n"
                    + "     EmployeesAtFinishedJob.\"JOB_ID\" AS EmployeesAtFinishedJob_JOB_ID,\n"
                    + "     JobFinished.\"JOB_ALLOCATED_DATE\" AS JobFinished_JOB_ALLOCATED_DATE,\n"
                    + "     JobFinished.\"ALLOCATED_TIME\" AS JobFinished_ALLOCATED_TIME,\n"
                    + "     JobFinished.\"TAKEN_TIME\" AS JobFinished_TAKEN_TIME,\n"
                    + "     JobFinished.\"ITEM_COUNT\" AS JobFinished_ITEM_COUNT,\n"
                    + "     JobFinished.\"ITEM_COUNT_COMPLETED\" AS JobFinished_ITEM_COUNT_COMPLETED,\n"
                    + "     JobFinished.\"IS_LATE\" AS JobFinished_IS_LATE,\n"
                    + "     PLItemDifference.\"IS_WASTAGE\" AS PLItemDifference_IS_WASTAGE\n"
                    + "FROM\n"
                    + "     \"dbo\".\"EmployeesAtFinishedJob\" EmployeesAtFinishedJob INNER JOIN \"dbo\".\"JobFinished\" JobFinished ON EmployeesAtFinishedJob.\"JOB_ID\" = JobFinished.\"JOB_ID\"\n"
                    + "     INNER JOIN \"dbo\".\"PLItemDifference\" PLItemDifference ON JobFinished.\"JOB_ID\" = PLItemDifference.\"JOB_ID\"\n"
                    + "WHERE\n"
                    + "     EmployeesAtFinishedJob.\"EMPLOYEE_CODE\" = '" + empCode + "' AND PLItemDifference.\"IS_WASTAGE\" = 'Yes' ORDER BY EmployeesAtFinishedJob.\"JOB_ID\"";
            stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            reset = stmt.executeQuery(query);

            while (reset.next()) {
                model_tableRankedEmployee.addRow(new Object[model_tableRankedEmployee.getColumnCount()]);
                tableJobDetails.setValueAt(reset.getString("EmployeesAtFinishedJob_JOB_ID"), rowCount, 0);
                tableJobDetails.setValueAt(reset.getString("JobFinished_JOB_ALLOCATED_DATE"), rowCount, 1);
                tableJobDetails.setValueAt(reset.getString("JobFinished_ALLOCATED_TIME"), rowCount, 2);
                tableJobDetails.setValueAt(reset.getString("JobFinished_TAKEN_TIME"), rowCount, 3);
                tableJobDetails.setValueAt(reset.getString("JobFinished_ITEM_COUNT"), rowCount, 4);
                tableJobDetails.setValueAt(reset.getString("JobFinished_ITEM_COUNT_COMPLETED"), rowCount, 5);
                tableJobDetails.setValueAt(reset.getString("PLItemDifference_IS_WASTAGE"), rowCount, 6);
                tableJobDetails.setValueAt(reset.getString("JobFinished_IS_LATE"), rowCount, 7);
                tableJobDetails.setValueAt("No", rowCount, 8);
                rowCount++;
            }
            reset.close();
            countItemsInSecondTable();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void RefreshDesignationRankTable() {
        try {
            int row = model_tableDesignationRank.getRowCount();
            for (int j = 0; j < row; j++) {
                model_tableDesignationRank.removeRow(0);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void panel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panel1MouseClicked
        if (SwingUtilities.isRightMouseButton(evt) || evt.isControlDown()) {
            Refresh();
        }
    }//GEN-LAST:event_panel1MouseClicked

    protected Object[] CheckItemAlreadyAdded(String ItemFromFirstTable, String secondItemFromFirstTable) {
        int rowCount = model_tableRankedEmployee.getRowCount();
        Object[] data = new Object[2];
        data[0] = false;
        data[1] = -1;

        for (int i = 0; i < rowCount; i++) {
            String ItemAtSecondTable = model_tableRankedEmployee.getValueAt(i, 3).toString();
            String secondItemAtSecondTable = model_tableRankedEmployee.getValueAt(i, 0).toString();
            if (ItemFromFirstTable.equals(ItemAtSecondTable) && secondItemFromFirstTable.equals(secondItemAtSecondTable)) {
                data[0] = true;
                data[1] = i;
            }
        }
        return data;
    }

    private void countItemsInSecondTable() {
        TextNumberOfEmpRanked.setText(model_tableRankedEmployee.getRowCount() + "");
    }

    private void formInternalFrameIconified(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameIconified
        rawItemUsageAndWastageMoniter.toFront();
    }//GEN-LAST:event_formInternalFrameIconified

    private void ButtonViewWastageRawItemsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonViewWastageRawItemsActionPerformed
        selectedRowCountOfTableJobDetails = tableJobDetails.getSelectedRowCount();
        String didWastage;
        if (selectedRowCountOfTableJobDetails == 1) {
            selectedRowOfTableJobDetails = tableJobDetails.getSelectedRow();
            jobID = tableJobDetails.getValueAt(selectedRowOfTableJobDetails, 0).toString();
            didWastage = tableJobDetails.getValueAt(selectedRowOfTableJobDetails, 6).toString();
            String productItemIdByArray[] = comboBoxFixedJobs.getSelectedItem().toString().split(spliter);
            if (didWastage.equals("Yes")) {
                new ViewWastageRowItems(this, jobID, productItemIdByArray[3]).setVisible(true);
            } else {
                JOptionPane.showMessageDialog(this, "Wastage is not happened.", "Not happened.", JOptionPane.OK_OPTION);
            }
        } else if (selectedRowCountOfTableJobDetails != 1) {
            JOptionPane.showMessageDialog(this, "Job is not selected.", "Not selected.", JOptionPane.OK_OPTION);
        }
    }//GEN-LAST:event_ButtonViewWastageRawItemsActionPerformed

    private void comboBoxFixedJobsPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_comboBoxFixedJobsPopupMenuWillBecomeInvisible

    }//GEN-LAST:event_comboBoxFixedJobsPopupMenuWillBecomeInvisible

    private void CalendarStartDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CalendarStartDateActionPerformed
        if (!CalendarStartDate.getText().isEmpty()) {
            CalendarEndDate.requestFocus();
        }
    }//GEN-LAST:event_CalendarStartDateActionPerformed

    private void CalendarStartDatePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_CalendarStartDatePropertyChange
        if (evt.getNewValue() instanceof Date) {
            Date StartDate = (Date) evt.getNewValue();
            SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
            CalendarStartDate.setText(format.format(StartDate));
        }
    }//GEN-LAST:event_CalendarStartDatePropertyChange

    private void CalendarEndDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CalendarEndDateActionPerformed
        if (!CalendarEndDate.getText().isEmpty()) {
            buttonView.requestFocus();
        }
    }//GEN-LAST:event_CalendarEndDateActionPerformed

    private void CalendarEndDatePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_CalendarEndDatePropertyChange
        if (evt.getNewValue() instanceof Date) {
            Date EndDate = (Date) evt.getNewValue();
            SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
            CalendarEndDate.setText(format.format(EndDate));
        }
    }//GEN-LAST:event_CalendarEndDatePropertyChange

    private void comboSubDepartmentPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_comboSubDepartmentPopupMenuWillBecomeInvisible
        if (!comboSubDepartment.getSelectedItem().equals(select)) {
            loadFixJobsToCombo();
        }
    }//GEN-LAST:event_comboSubDepartmentPopupMenuWillBecomeInvisible

    private void tableTimeTakenMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableTimeTakenMouseClicked
        tableRawItemUsage.setSelectionMode(0);
        selectedRowOfTableTimeTaken = tableTimeTaken.getSelectedRow();
        empCode = tableTimeTaken.getValueAt(selectedRowOfTableTimeTaken, 0).toString();
        LoadlateJobs(empCode);
    }//GEN-LAST:event_tableTimeTakenMouseClicked

    private void tableRawItemUsageMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableRawItemUsageMouseClicked
        selectedRowOfTableRawItemUsage = tableRawItemUsage.getSelectedRow();
        empCode = tableRawItemUsage.getValueAt(selectedRowOfTableRawItemUsage, 0).toString();
        LoadWastageJobs(empCode);
    }//GEN-LAST:event_tableRawItemUsageMouseClicked

    protected Object[] CheckIfStudentAlreadyAdded(String studntFromBtch) {
        int rowCount = model_tableRankedEmployee.getRowCount();
        Object[] data = new Object[2];
        data[0] = false;
        data[1] = -1;

        for (int i = 0; i < rowCount; i++) {
            String studentAllocateToEvent = model_tableRankedEmployee.getValueAt(i, 0).toString();
            if (studntFromBtch.equals(studentAllocateToEvent)) {
                data[0] = true;
                data[1] = i;
            }
        }
        return data;
    }

    private void CheckBeforeSave() {
        int RowCount = tableJobDetails.getRowCount();
        if (RowCount <= 0) {
            JOptionPane.showMessageDialog(this, "Employees are not available at table.", "No employees", JOptionPane.OK_OPTION);
        } else if (RowCount > 0) {
            int x = JOptionPane.showConfirmDialog(this, "Are you sure to send emails to these employees?", "Send e-mail?", JOptionPane.YES_NO_OPTION);
            if (x == JOptionPane.YES_OPTION) {
                selectedRowCountOfTableWastage = tableRawItemUsage.getRowCount();
                if (selectedRowCountOfTableWastage == 1) {
                    selectedRowOfTableRawItemUsage = tableRawItemUsage.getSelectedRow();
                    empCode = tableRawItemUsage.getValueAt(selectedRowOfTableRawItemUsage, 0).toString();
                    sendEmail(empCode);
                }
            }
        }
    }

    private void sendEmail(String empCode) {
        String SENT_TO_EMP;
        int itemCompleted, itemAllocated, itemDifference;
        int RowCount = tableJobDetails.getRowCount();
        String subDepartmentID[] = comboSubDepartment.getSelectedItem().toString().split("--");
        String fixedJobCode[] = comboBoxFixedJobs.getSelectedItem().toString().split("--");
        String fixedJobName[] = comboBoxFixedJobs.getSelectedItem().toString().split("--");
        String plItem[] = comboBoxFixedJobs.getSelectedItem().toString().split("--");
        for (int i = 0; i < RowCount; i++) {
            jobID = tableJobDetails.getValueAt(i, 0).toString();
            stDate = tableJobDetails.getValueAt(i, 1).toString();
            SENT_TO_EMP = tableJobDetails.getValueAt(i, 8).toString();
            itemAllocated = Integer.parseInt(tableJobDetails.getValueAt(i, 4).toString());
            itemCompleted = Integer.parseInt(tableJobDetails.getValueAt(i, 5).toString());
            itemDifference = itemAllocated - itemCompleted;
            if (SENT_TO_EMP.equals("No")) {
                SendEMails sm = new SendEMails();
                sm.notifyAboutWastageOfCompleteJobsToSupervisourByEmail(empCode, jobID, itemDifference, itemAllocated, itemCompleted, plItem[3]);
            }
        }
    }

    public double roundTwoDecimals(double d) {
        DecimalFormat twoDForm = new DecimalFormat("#.##");
        return Double.valueOf(twoDForm.format(d));
    }

    public double roundThreeDecimals(double d) {
        DecimalFormat threeDForm = new DecimalFormat("#.###");
        return Double.valueOf(threeDForm.format(d));
    }

    private void Refresh() {
        int x = JOptionPane.showConfirmDialog(this, "Refresh '" + menuName + "' window?", "Refresh", JOptionPane.YES_NO_OPTION);
        if (x == JOptionPane.YES_OPTION) {
            comboDepartment.setEnabled(true);
            buttonView.setEnabled(true);
            comboDepartment.setSelectedItem(select);
            comboSubDepartment.setSelectedItem(select);
            comboBoxFixedJobs.setSelectedItem(select);

            TextNumberOfEmpRanked.setText("0");
            TextNumberOfEmpAtSubDepartment.setText("0");

            model_tableDesignationRank.setRowCount(0);

            CalendarStartDate.setText("");
            CalendarEndDate.setText("");

            try {
                int rowi = model_TableEmployee.getRowCount();
                for (int i = 0; i < rowi; i++) {
                    model_TableEmployee.removeRow(0);
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                JOptionPane.showMessageDialog(this, "Please contact for support.");
            }

            try {
                int rowi = model_tableRankedEmployee.getRowCount();
                for (int i = 0; i < rowi; i++) {
                    model_tableRankedEmployee.removeRow(0);
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                JOptionPane.showMessageDialog(this, "Please contact for support.");
            }
        }
    }

    private void exit() {
        if (rawItemUsageAndWastageMoniter != null) {
            rawItemUsageAndWastageMoniter = null;
        }
        this.dispose();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonViewWastageRawItems;
    private org.sourceforge.jcalendarbutton.JCalendarButton CalendarEndDate;
    private org.sourceforge.jcalendarbutton.JCalendarButton CalendarStartDate;
    private javax.swing.JTextField TextNumberOfEmpAtSubDepartment;
    private javax.swing.JTextField TextNumberOfEmpRanked;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnSave;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton buttonView;
    private javax.swing.JComboBox comboBoxFixedJobs;
    private javax.swing.JComboBox comboDepartment;
    private javax.swing.JComboBox comboSubDepartment;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lbl_accountType;
    private javax.swing.JLabel lbl_accountType1;
    private javax.swing.JLabel lbl_accountType2;
    private javax.swing.JLabel lbl_description;
    private javax.swing.JLabel lbl_subAccount;
    private javax.swing.JLabel lbl_subAccount1;
    private javax.swing.JLabel lbl_subAccount3;
    private javax.swing.JPanel panel1;
    private javax.swing.JTable tableJobDetails;
    private javax.swing.JTable tableRawItemUsage;
    private javax.swing.JTable tableTimeTaken;
    // End of variables declaration//GEN-END:variables
}
