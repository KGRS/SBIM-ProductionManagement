/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package BottleNeck;

import MainFiles.IndexPage;
import static MainFiles.IndexPage.dskPane_RightPanel;
import Transactions.JobStatus;
import static Transactions.JobStatus.employeeSuggestionForBottleNeck;
import db.ConnectSql;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DecimalFormat;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Ravindu
 */
public class EmployeeSuggestionForBottleNeck extends javax.swing.JInternalFrame {

    private final DefaultTableModel model_TableAllocatedEmployees;
    private final DefaultTableModel model_TableAllocatedEmployees1;
    private final DefaultTableModel model_TableEmployee;
    private final DefaultTableModel model_TableNCREmployee;
    private final DefaultTableModel model_TableFixedJobs;
    public static JobAllocationForBottleNecks jobAllocationForBottleNecks = null;
    String employeeID = "", FirstName = "", NameWithIni = "", callName = "";
    String fixedJobID = "", Name = "", productLevel = "", productLevelItemCode = "";
    String T_fixedJobID = "";

    String StopTime = null;
    int endtm = 0;
    double avgPr = 0.0, iavg = 0.0;
    int Allocate_Items, Complete_Items = 0;
    int To_Be_complete = 0;

    String subdep;
    String dateA;

    public EmployeeSuggestionForBottleNeck() {
        initComponents();

        model_TableAllocatedEmployees = (DefaultTableModel) tableAllocatedEmployee.getModel();
        model_TableAllocatedEmployees1 = (DefaultTableModel) tableAllocatedEmployee1.getModel();
        model_TableEmployee = (DefaultTableModel) tableEmployee.getModel();
        model_TableNCREmployee = (DefaultTableModel) tableEmployee1.getModel();
        model_TableFixedJobs = (DefaultTableModel) tableFixedJobs.getModel();
        panel1.setToolTipText("Press right mouse click to refresh.");

        String id = JobStatus.labelFlobID.getText();
        loadFixedJobsToTable(id);
        loadAlocateEmpTable(id);
        loadSuggestEmployeesToTable(id);
        loadSuggestNCR_EmployeesToTable(id);
        loadDate();
        PredictItemCount();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        panel1 = new javax.swing.JPanel();
        btnSave = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableEmployee = new javax.swing.JTable();
        ButtonAddSelected = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableAllocatedEmployee = new javax.swing.JTable();
        ButtonRemoveSelected = new javax.swing.JButton();
        lbl_subAccount2 = new javax.swing.JLabel();
        textNumberOfEmpAllocatedToJob = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableFixedJobs = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        lbl_description8 = new javax.swing.JLabel();
        lbl_description9 = new javax.swing.JLabel();
        lbl_description3 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jTextField5 = new javax.swing.JTextField();
        jTextField7 = new javax.swing.JTextField();
        lbl_description10 = new javax.swing.JLabel();
        jTextField10 = new javax.swing.JTextField();
        lbl_description11 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        lbl_description12 = new javax.swing.JLabel();
        jTextField11 = new javax.swing.JTextField();
        lbl_description13 = new javax.swing.JLabel();
        jTextField12 = new javax.swing.JTextField();
        jTextField8 = new javax.swing.JTextField();
        lbl_description15 = new javax.swing.JLabel();
        jTextField13 = new javax.swing.JTextField();
        jTextField9 = new javax.swing.JTextField();
        lbl_description16 = new javax.swing.JLabel();
        lbl_description17 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        textFieldJobCode = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        tableEmployee1 = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tableAllocatedEmployee1 = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();

        setIconifiable(true);
        setPreferredSize(new java.awt.Dimension(1070, 675));
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameIconified(evt);
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        panel1.setBackground(new java.awt.Color(255, 255, 255));
        panel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.TRAILING, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Calibri", 1, 14), new java.awt.Color(153, 153, 153))); // NOI18N
        panel1.setForeground(new java.awt.Color(255, 255, 255));
        panel1.setPreferredSize(new java.awt.Dimension(950, 688));
        panel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panel1MouseClicked(evt);
            }
        });
        panel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnSave.setMnemonic('s');
        btnSave.setText("Allocate");
        btnSave.setActionCommand("Delete");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        panel1.add(btnSave, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 530, 80, -1));

        btnRefresh.setMnemonic('d');
        btnRefresh.setText("Refresh");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });
        panel1.add(btnRefresh, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 530, 80, -1));

        btnExit.setMnemonic('e');
        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });
        btnExit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnExitKeyPressed(evt);
            }
        });
        panel1.add(btnExit, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 530, 80, -1));

        tableEmployee.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Employee code", "First name", "Last name", "Calling name", "Department", "Sub Department", "Average Time"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableEmployee.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tableEmployee);
        if (tableEmployee.getColumnModel().getColumnCount() > 0) {
            tableEmployee.getColumnModel().getColumn(3).setHeaderValue("Calling name");
        }

        panel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 260, 560, 150));

        ButtonAddSelected.setText("-->>");
        ButtonAddSelected.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonAddSelectedActionPerformed(evt);
            }
        });
        panel1.add(ButtonAddSelected, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 350, 70, 60));

        tableAllocatedEmployee.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Employee code", "First name", "Last name", "Calling name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableAllocatedEmployee.getTableHeader().setReorderingAllowed(false);
        tableAllocatedEmployee.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableAllocatedEmployeeMouseClicked(evt);
            }
        });
        tableAllocatedEmployee.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tableAllocatedEmployeeKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(tableAllocatedEmployee);

        panel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 300, 360, 90));

        ButtonRemoveSelected.setText("<<--");
        ButtonRemoveSelected.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonRemoveSelectedActionPerformed(evt);
            }
        });
        panel1.add(ButtonRemoveSelected, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 420, 70, 60));

        lbl_subAccount2.setForeground(new java.awt.Color(102, 102, 102));
        lbl_subAccount2.setText("Number of employees allocated to the job");
        panel1.add(lbl_subAccount2, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 260, 220, 20));

        textNumberOfEmpAllocatedToJob.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        textNumberOfEmpAllocatedToJob.setEnabled(false);
        textNumberOfEmpAllocatedToJob.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textNumberOfEmpAllocatedToJobActionPerformed(evt);
            }
        });
        panel1.add(textNumberOfEmpAllocatedToJob, new org.netbeans.lib.awtextra.AbsoluteConstraints(920, 260, 70, -1));

        tableFixedJobs.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Job/ Process code", "Start Date", "Item count", "Product level item code"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableFixedJobs.getTableHeader().setReorderingAllowed(false);
        tableFixedJobs.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableFixedJobsMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tableFixedJobs);
        if (tableFixedJobs.getColumnModel().getColumnCount() > 0) {
            tableFixedJobs.getColumnModel().getColumn(2).setPreferredWidth(30);
        }

        panel1.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 90, 530, 120));

        lbl_description8.setForeground(new java.awt.Color(102, 102, 102));
        lbl_description8.setText("End date");

        lbl_description9.setForeground(new java.awt.Color(102, 102, 102));
        lbl_description9.setText("Start date");

        lbl_description3.setForeground(new java.awt.Color(102, 102, 102));
        lbl_description3.setText("Supervious by");

        jTextField3.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jTextField3.setEnabled(false);

        jTextField5.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jTextField5.setEnabled(false);

        jTextField7.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jTextField7.setEnabled(false);
        jTextField7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField7ActionPerformed(evt);
            }
        });

        lbl_description10.setForeground(new java.awt.Color(102, 102, 102));
        lbl_description10.setText("Item count Completed");

        jTextField10.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jTextField10.setEnabled(false);

        lbl_description11.setForeground(new java.awt.Color(102, 102, 102));
        lbl_description11.setText("Current date");

        jTextField6.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jTextField6.setEnabled(false);

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setText("msg2");

        lbl_description12.setForeground(new java.awt.Color(102, 102, 102));
        lbl_description12.setText("Predicted Item Count");

        jTextField11.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jTextField11.setEnabled(false);

        lbl_description13.setForeground(new java.awt.Color(102, 102, 102));
        lbl_description13.setText("Item count To Be Complete");

        jTextField12.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jTextField12.setEnabled(false);

        jTextField8.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jTextField8.setEnabled(false);
        jTextField8.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jTextField8MouseMoved(evt);
            }
        });
        jTextField8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextField8MouseClicked(evt);
            }
        });

        lbl_description15.setForeground(new java.awt.Color(102, 102, 102));
        lbl_description15.setText("Average time per one item (min)");

        jTextField13.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jTextField13.setEnabled(false);
        jTextField13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField13ActionPerformed(evt);
            }
        });

        jTextField9.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jTextField9.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jTextField9.setEnabled(false);
        jTextField9.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jTextField9MouseMoved(evt);
            }
        });
        jTextField9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextField9MouseClicked(evt);
            }
        });

        lbl_description16.setForeground(new java.awt.Color(102, 102, 102));
        lbl_description16.setText("Remaining Time");

        lbl_description17.setForeground(new java.awt.Color(102, 102, 102));
        lbl_description17.setText("Item count Allocated");

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel9.setText("msg");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lbl_description15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField13, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(lbl_description17, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(14, 14, 14)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jTextField11, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
                                    .addComponent(jTextField12)
                                    .addComponent(jTextField10)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(lbl_description3, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(lbl_description9, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(80, 80, 80))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(lbl_description10, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(lbl_description13))
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGap(64, 64, 64)
                                                .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                                .addComponent(lbl_description8, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lbl_description11, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextField9, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lbl_description16, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lbl_description12))
                                .addGap(0, 52, Short.MAX_VALUE))))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbl_description3, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbl_description9, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbl_description8, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbl_description17, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbl_description10, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbl_description13, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbl_description15, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(116, 116, 116))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbl_description11, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lbl_description16, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lbl_description12, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1)
                        .addComponent(jTextField9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(165, 165, 165))))
        );

        panel1.add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 20, 460, 230));

        textFieldJobCode.setEditable(false);
        panel1.add(textFieldJobCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 530, 110, -1));

        jLabel1.setText("Employee Suggestion");
        panel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 220, 110, -1));

        jLabel2.setText("Fixed Job / Process code :");
        panel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, -1, -1));

        jLabel3.setText("Fixed Job / Process name :");
        panel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, -1, -1));

        jTextField1.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jTextField1.setEnabled(false);
        panel1.add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 20, 360, -1));

        jTextField2.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jTextField2.setEnabled(false);
        panel1.add(jTextField2, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 50, 360, -1));

        tableEmployee1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Employee code", "First name", "Last name", "Calling name", "Department", "Sub Department", "Average Time"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableEmployee1.getTableHeader().setReorderingAllowed(false);
        jScrollPane4.setViewportView(tableEmployee1);
        if (tableEmployee1.getColumnModel().getColumnCount() > 0) {
            tableEmployee1.getColumnModel().getColumn(3).setHeaderValue("Calling name");
        }

        panel1.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 440, 560, 130));

        jLabel4.setText("Employees from Other Jobs");
        panel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 420, 250, -1));

        jLabel5.setText("Currently Idial Employees");
        panel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 240, 250, -1));

        tableAllocatedEmployee1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Employee code", "First name", "Last name", "Calling name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableAllocatedEmployee1.getTableHeader().setReorderingAllowed(false);
        tableAllocatedEmployee1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableAllocatedEmployee1MouseClicked(evt);
            }
        });
        tableAllocatedEmployee1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tableAllocatedEmployee1KeyPressed(evt);
            }
        });
        jScrollPane5.setViewportView(tableAllocatedEmployee1);

        panel1.add(jScrollPane5, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 430, 360, 90));

        jLabel7.setText("Suggest Employees");
        panel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 410, -1, -1));

        jLabel8.setText("Assigned Employees");
        panel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 280, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1054, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel1, javax.swing.GroupLayout.PREFERRED_SIZE, 596, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public int roundToFloorVal(double f) {
        int val = (int) Math.floor(f);
        return val;
    }

    public void PredictItemCount() {
        int aa = roundToFloorVal(endtm / avgPr);
        int empCount = Integer.parseInt(textNumberOfEmpAllocatedToJob.getText());

        if (aa >= 0) {
            jTextField9.setText("" + (aa * empCount + Complete_Items));
        } else {
            jTextField9.setText("" + (Complete_Items));
        }

        int cc = (aa * empCount + Complete_Items);
        if (Allocate_Items <= cc) {
            jLabel6.setText("Item completion Ok...");
            jLabel6.setForeground(Color.green);
            jTextField9.setBackground(Color.green);

        } else {
            jLabel6.setText("Item completion error...");
            jLabel6.setForeground(Color.red);
            jTextField9.setBackground(Color.red);
        }

    }

    private void loadFixedJobsToTable(String job_id) {

        try {
            ResultSet reset;
            Statement stmt;
            String query;
            int rowCount = 0;

            query = "SELECT\n"
                    + "	 JobRunning.\"JOB_ID\" AS JobRunning_JOB_ID,\n"
                    + "     JobRunning.\"FIXED_JOB_ID\" AS JobRunning_FIXED_JOB_ID,\n"
                    + "	 JobFixed.\"JOB_FIXED_NAME\" AS JobFixed_JOB_FIXED_NAME,\n"
                    + "     JobRunning.\"JOB_ALLOCATED_DATE\" AS JobRunning_JOB_ALLOCATED_DATE,\n"
                    + "     JobRunning.\"JOB_ALLOCATED_TIME\" AS JobRunning_JOB_ALLOCATED_TIME,\n"
                    + "     JobRunning.\"ALLOCATED_TIME\" AS JobRunning_ALLOCATED_TIME,\n"
                    + "     JobRunning.\"TAKEN_TIME\" AS JobRunning_TAKEN_TIME,\n"
                    + "     JobRunning.\"SUPERVISE_BY\" AS JobRunning_SUPERVISE_BY,\n"
                    + "     JobRunning.\"ITEM_COUNT\" AS JobRunning_ITEM_COUNT,\n"
                    + "     JobRunning.\"ITEM_COUNT_COMPLETED\" AS JobRunning_ITEM_COUNT_COMPLETED,\n"
                    + "     JobRunning.\"REMARKS\" AS JobRunning_REMARKS,\n"
                    + "     JobRunning.\"LOG_INSERT_DATE\" AS JobRunning_LOG_INSERT_DATE,\n"
                    + "     JobRunning.\"LOG_INSERT_TIME\" AS JobRunning_LOG_INSERT_TIME,\n"
                    + "     JobRunning.\"SHOULD_FINISHED_DATE\" AS JobRunning_SHOULD_FINISHED_DATE,\n"
                    + "     JobRunning.\"SHOULD_FINISHED_AT\" AS JobRunning_SHOULD_FINISHED_AT,\n"
                    + "     JobFixed.\"PRODUCT_LEVEL_ITEM_CODE\" AS JobFixed_PRODUCT_LEVEL_ITEM_CODE\n"
                    + "FROM\n"
                    + "     \"dbo\".\"JobFixed\" JobFixed INNER JOIN \"dbo\".\"JobRunning\" JobRunning ON JobFixed.\"JOB_FIXED_ID\" = JobRunning.\"FIXED_JOB_ID\"\n"
                    + "WHERE\n"
                    + "     FIXED_JOB_ID = '" + job_id + "'";
            stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            reset = stmt.executeQuery(query);

            while (reset.next()) {
                StopTime = reset.getString("JobRunning_SHOULD_FINISHED_DATE") + " " + reset.getString("JobRunning_SHOULD_FINISHED_AT");

                model_TableFixedJobs.addRow(new Object[model_TableFixedJobs.getColumnCount()]);
                tableFixedJobs.setValueAt(reset.getString("JobRunning_JOB_ID"), rowCount, 0);
                tableFixedJobs.setValueAt(reset.getString("JobRunning_LOG_INSERT_DATE"), rowCount, 1);
                tableFixedJobs.setValueAt(reset.getString("JobRunning_ITEM_COUNT"), rowCount, 2);
                tableFixedJobs.setValueAt(reset.getString("JobFixed_PRODUCT_LEVEL_ITEM_CODE"), rowCount, 3);

                jTextField3.setText(reset.getString("JobRunning_SUPERVISE_BY"));
                jTextField10.setText(reset.getString("JobRunning_ITEM_COUNT_COMPLETED"));
                Complete_Items = Complete_Items + (reset.getInt("JobRunning_ITEM_COUNT_COMPLETED"));
                Allocate_Items = Allocate_Items + (reset.getInt("JobRunning_ITEM_COUNT"));

                jTextField5.setText(reset.getString("JobRunning_LOG_INSERT_DATE"));
                jTextField7.setText(reset.getString("JobRunning_SHOULD_FINISHED_DATE"));

                jTextField1.setText(reset.getString("JobRunning_FIXED_JOB_ID"));
                jTextField2.setText(reset.getString("JobFixed_JOB_FIXED_NAME"));

                T_fixedJobID = reset.getString("JobFixed_JOB_FIXED_NAME");
                rowCount++;
            }
            reset.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
        jTextField11.setText("" + Allocate_Items);

        To_Be_complete = Allocate_Items - Complete_Items;
        jTextField12.setText(Integer.toString(To_Be_complete));

        GetTimeDiff gt = new GetTimeDiff();
        int remainingTime = gt.getTimeDiff(StopTime);
        endtm = remainingTime;

        if (remainingTime > 0) {
            jLabel9.setText("Process Ok");
            jLabel9.setForeground(Color.green);
            lbl_description16.setText("Remaining Time");
            jTextField8.setText(remainingTime + " Minutes");
        } else {
            jLabel9.setText("Process Late");
            jLabel9.setForeground(Color.red);
            lbl_description16.setText("Late Time");
            jTextField8.setBackground(Color.red);
            jTextField8.setText((remainingTime * -1) + " Minutes");
            jTextField8.setForeground(Color.red);
        }

    }

    private void loadAlocateEmpTable(String T_fixedJobID) {

        try {
            ResultSet reset;
            Statement stmt;
            String query;
            int rowCount = 0;

            query = "SELECT\n"
                    + "     EmployeesAtRunningJob.\"JOB_ID\" AS EmployeesAtRunningJob_JOB_ID,\n"
                    + "     Employees.\"EMPLOYEE_CODE\" AS Employees_EMPLOYEE_CODE,\n"
                    + "     Employees.\"FIRST_NAME\" AS Employees_FIRST_NAME,\n"
                    + "     Employees.\"LAST_NAME\" AS Employees_LAST_NAME,\n"
                    + "     Employees.\"CALL_NAME\" AS Employees_CALL_NAME,\n"
                    + "     Employees.\"DepartmentCode\" AS Employees_DepartmentCode,\n"
                    + "     JobRunning.\"FIXED_JOB_ID\" AS JobRunning_FIXED_JOB_ID,\n"
                    + "     JobRunning.\"JOB_ID\" AS JobRunning_JOB_ID,\n"
                    + "     EmployeePerformance.\"AVERAGE_TIME_TO_COMPLETE\" AS EmployeePerformance_AVERAGE_TIME_TO_COMPLETE\n"
                    + "FROM\n"
                    + "     \"dbo\".\"Employees\" Employees INNER JOIN \"dbo\".\"EmployeesAtRunningJob\" EmployeesAtRunningJob ON Employees.\"EMPLOYEE_CODE\" = EmployeesAtRunningJob.\"EMPLOYEE_CODE\"\n"
                    + "     INNER JOIN \"dbo\".\"JobRunning\" JobRunning ON EmployeesAtRunningJob.\"JOB_ID\" = JobRunning.\"JOB_ID\"\n"
                    + "     INNER JOIN \"dbo\".\"EmployeePerformance\" EmployeePerformance ON JobRunning.\"FIXED_JOB_ID\" = EmployeePerformance.\"FIXED_JOB_ID\"\n"
                    + "     AND Employees.\"EMPLOYEE_CODE\" = EmployeePerformance.\"EMPLOYEE_CODE\"\n"
                    + "WHERE\n"
                    + "     JobRunning.FIXED_JOB_ID = '" + T_fixedJobID + "'";
            stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            reset = stmt.executeQuery(query);

            double avPr = 0.0;
            while (reset.next()) {
                model_TableAllocatedEmployees.addRow(new Object[model_TableAllocatedEmployees.getColumnCount()]);
                tableAllocatedEmployee.setValueAt(reset.getString("Employees_EMPLOYEE_CODE"), rowCount, 0);
                tableAllocatedEmployee.setValueAt(reset.getString("Employees_FIRST_NAME"), rowCount, 1);
                tableAllocatedEmployee.setValueAt(reset.getString("Employees_LAST_NAME"), rowCount, 2);
                tableAllocatedEmployee.setValueAt(reset.getString("Employees_CALL_NAME"), rowCount, 3);

                avPr = avPr + (reset.getDouble("EmployeePerformance_AVERAGE_TIME_TO_COMPLETE"));
                rowCount++;
            }
            reset.close();
            textNumberOfEmpAllocatedToJob.setText("" + rowCount);

            avgPr = (avPr / rowCount);
            jTextField13.setText("" + roundToTwoDecimal(avgPr));

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    public double roundToTwoDecimal(double f) {
        DecimalFormat ft = new DecimalFormat("##.00");
        return Double.parseDouble(ft.format(f));
    }


    private void btnExitKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnExitKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            Create_DropIdialEmployeeTable cr = new Create_DropIdialEmployeeTable();
            cr.deleteIdialEmpTable();
            exit();
        }
    }//GEN-LAST:event_btnExitKeyPressed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        Create_DropIdialEmployeeTable cr = new Create_DropIdialEmployeeTable();
        cr.deleteIdialEmpTable();
        exit();
    }//GEN-LAST:event_btnExitActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed

    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed

        String job = jTextField1.getText();
        String querysd = "SELECT SUB_DEPARTMENT_CODE FROM JobFixed WHERE JOB_FIXED_ID = '" + job + "'";

        try {
            Statement statement = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
            ResultSet resultset = statement.executeQuery(querysd);

            if (resultset.next()) {
                subdep = resultset.getString("SUB_DEPARTMENT_CODE");
            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "please contact for support.");
        }

        String query = "SELECT GETDATE() AS CurrentDateTime";

        try {
            Statement statement = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
            ResultSet resultset = statement.executeQuery(query);

            if (resultset.next()) {
                dateA = IndexPage.LabelDate.getText();
            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "please contact for support.");
        }

        int Row = model_TableAllocatedEmployees1.getRowCount();
        String empID = "";
        for (int i = 0; i < Row; i++) {
            int SelectedRow = i;
            try {
                empID = tableEmployee.getValueAt(SelectedRow, 0).toString();
                java.sql.Statement stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);

                String UpdateQuery = "INSERT INTO [dbo].[TempEmpTable]\n"
                        + "           ([empid],[subdept],[date])\n"
                        + "     VALUES ('" + empID + "','" + subdep + "','" + dateA + "')";
                stmt.execute(UpdateQuery);
                JOptionPane.showMessageDialog(this, "Employee " + empID + " Successfuly allocated");

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                JOptionPane.showMessageDialog(this, "Please contact for support.");
            }
        }

        if (jobAllocationForBottleNecks != null) {
            if (!jobAllocationForBottleNecks.isVisible()) {
                jobAllocationForBottleNecks.setVisible(true);
            }
        } else {
            jobAllocationForBottleNecks = new JobAllocationForBottleNecks();
            dskPane_RightPanel.add(jobAllocationForBottleNecks);
            jobAllocationForBottleNecks.setVisible(true);
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void loadSuggestEmployeesToTable(String Fjob_id) {
        try {
            ResultSet reset;
            Statement stmt;
            String query;
            int rowCount = 0;

            query = "SELECT\n"
                    + "     IDIAL_EMP.\"Employees_EMPLOYEE_CODE\" AS IDIAL_EMP_Employees_EMPLOYEE_CODE,\n"
                    + "     EmployeePerformance.\"FIXED_JOB_ID\" AS EmployeePerformance_FIXED_JOB_ID,\n"
                    + "     EmployeePerformance.\"AVERAGE_TIME_TO_COMPLETE\" AS EmployeePerformance_AVERAGE_TIME_TO_COMPLETE,\n"
                    + "     Employees.\"FIRST_NAME\" AS Employees_FIRST_NAME,\n"
                    + "     Employees.\"LAST_NAME\" AS Employees_LAST_NAME,\n"
                    + "     Employees.\"CALL_NAME\" AS Employees_CALL_NAME,\n"
                    + "     Departments.\"DepartmentName\" AS Departments_DepartmentName,\n"
                    + "     SubDepartments.\"SUB_DEPARTMENT_NAME\" AS SubDepartments_SUB_DEPARTMENT_NAME\n"
                    + "FROM\n"
                    + "     \"dbo\".\"Employees\" Employees INNER JOIN \"dbo\".\"IDIAL_EMP\" IDIAL_EMP ON Employees.\"EMPLOYEE_CODE\" = IDIAL_EMP.\"Employees_EMPLOYEE_CODE\"\n"
                    + "     INNER JOIN \"dbo\".\"EmployeePerformance\" EmployeePerformance ON IDIAL_EMP.\"Employees_EMPLOYEE_CODE\" = EmployeePerformance.\"EMPLOYEE_CODE\"\n"
                    + "     INNER JOIN \"dbo\".\"SubDepartments\" SubDepartments ON Employees.\"SUB_DEPARTMENT_CODE\" = SubDepartments.\"SUB_DEPARTMENT_CODE\"\n"
                    + "     INNER JOIN \"dbo\".\"Departments\" Departments ON SubDepartments.\"DepartmentCode\" = Departments.\"DepartmentCode\"\n"
                    + "WHERE\n"
                    + "     EmployeePerformance.\"FIXED_JOB_ID\" = '" + Fjob_id + "'\n"
                    + "ORDER BY\n"
                    + "     EmployeePerformance.\"AVERAGE_TIME_TO_COMPLETE\" DESC";

            stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            reset = stmt.executeQuery(query);

            while (reset.next()) {
                model_TableEmployee.addRow(new Object[model_TableEmployee.getColumnCount()]);
                tableEmployee.setValueAt(reset.getString("IDIAL_EMP_Employees_EMPLOYEE_CODE"), rowCount, 0);
                tableEmployee.setValueAt(reset.getString("Employees_FIRST_NAME"), rowCount, 1);
                tableEmployee.setValueAt(reset.getString("Employees_LAST_NAME"), rowCount, 2);
                tableEmployee.setValueAt(reset.getString("Employees_CALL_NAME"), rowCount, 3);
                tableEmployee.setValueAt(reset.getString("Departments_DepartmentName"), rowCount, 4);
                tableEmployee.setValueAt(reset.getString("SubDepartments_SUB_DEPARTMENT_NAME"), rowCount, 5);
                tableEmployee.setValueAt(reset.getString("EmployeePerformance_AVERAGE_TIME_TO_COMPLETE"), rowCount, 6);

                rowCount++;
            }
            reset.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void loadSuggestNCR_EmployeesToTable(String Fjob_id) {
        try {
            ResultSet reset;
            Statement stmt;
            String query;
            int rowCount = 0;

            query = "SELECT\n"
                    + "     JobRunning.\"ITEM_COUNT\"-JobRunning.\"ITEM_COUNT_COMPLETED\" AS JobRunning_ITEM_COUNT_TOCOMPLETED,\n"
                    + "     EmployeesAtRunningJob.\"JOB_ID\" AS EmployeesAtRunningJob_JOB_ID,\n"
                    + "     Employees.\"EMPLOYEE_CODE\" AS Employees_EMPLOYEE_CODE,\n"
                    + "     Employees.\"FIRST_NAME\" AS Employees_FIRST_NAME,\n"
                    + "     Employees.\"LAST_NAME\" AS Employees_LAST_NAME,\n"
                    + "     Employees.\"CALL_NAME\" AS Employees_CALL_NAME,\n"
                    + "     Employees.\"DepartmentCode\" AS Employees_DepartmentCode,\n"
                    + "     JobRunning.\"FIXED_JOB_ID\" AS JobRunning_FIXED_JOB_ID,\n"
                    + "     JobRunning.\"JOB_ID\" AS JobRunning_JOB_ID,\n"
                    + "     EmployeePerformance.\"AVERAGE_TIME_TO_COMPLETE\" AS EmployeePerformance_AVERAGE_TIME_TO_COMPLETE,\n"
                    + "     JobRunning.\"ITEM_COUNT_COMPLETED\" AS JobRunning_ITEM_COUNT_COMPLETED,\n"
                    + "     Employees.\"SUB_DEPARTMENT_CODE\" AS Employees_SUB_DEPARTMENT_CODE,\n"
                    + "     JobRunning.\"ITEM_COUNT\" AS JobRunning_ITEM_COUNT,\n"
                    + "     JobRunning.\"SHOULD_FINISHED_DATE\" AS JobRunning_SHOULD_FINISHED_DATE,\n"
                    + "     JobRunning.\"SHOULD_FINISHED_AT\" AS JobRunning_SHOULD_FINISHED_AT\n"
                    + "FROM\n"
                    + "     \"dbo\".\"Employees\" Employees INNER JOIN \"dbo\".\"EmployeesAtRunningJob\" EmployeesAtRunningJob ON Employees.\"EMPLOYEE_CODE\" = EmployeesAtRunningJob.\"EMPLOYEE_CODE\"\n"
                    + "     INNER JOIN \"dbo\".\"JobRunning\" JobRunning ON EmployeesAtRunningJob.\"JOB_ID\" = JobRunning.\"JOB_ID\"\n"
                    + "     INNER JOIN \"dbo\".\"EmployeePerformance\" EmployeePerformance ON JobRunning.\"FIXED_JOB_ID\" = EmployeePerformance.\"FIXED_JOB_ID\"\n"
                    + "     AND Employees.\"EMPLOYEE_CODE\" = EmployeePerformance.\"EMPLOYEE_CODE\"\n"
                    + "WHERE\n"
                    + "     JobRunning.FIXED_JOB_ID! = '" + Fjob_id + "'\n"
                    + "     and JobRunning.\"ITEM_COUNT\"-JobRunning.\"ITEM_COUNT_COMPLETED\" = 0\n"
                    + "ORDER BY\n"
                    + "     EmployeePerformance.\"AVERAGE_TIME_TO_COMPLETE\" DESC";

            stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            reset = stmt.executeQuery(query);

            while (reset.next()) {
                model_TableNCREmployee.addRow(new Object[model_TableNCREmployee.getColumnCount()]);
                tableEmployee1.setValueAt(reset.getString("Employees_EMPLOYEE_CODE"), rowCount, 0);
                tableEmployee1.setValueAt(reset.getString("Employees_FIRST_NAME"), rowCount, 1);
                tableEmployee1.setValueAt(reset.getString("Employees_LAST_NAME"), rowCount, 2);
                tableEmployee1.setValueAt(reset.getString("Employees_CALL_NAME"), rowCount, 3);
                tableEmployee1.setValueAt(reset.getString("Employees_DepartmentCode"), rowCount, 4);
                tableEmployee1.setValueAt(reset.getString("Employees_SUB_DEPARTMENT_CODE"), rowCount, 5);
                tableEmployee1.setValueAt(reset.getString("EmployeePerformance_AVERAGE_TIME_TO_COMPLETE"), rowCount, 6);

                rowCount++;
            }
            reset.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void panel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panel1MouseClicked

    }//GEN-LAST:event_panel1MouseClicked

    private void ButtonAddSelectedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonAddSelectedActionPerformed
        int SelectedRowCount = tableEmployee.getSelectedRowCount();
        if (SelectedRowCount == 1) {
            String studntFromBtch = tableEmployee.getValueAt(tableEmployee.getSelectedRow(), 0).toString();
            Object[] CheckStudentAlreadyAdded = CheckIfEmpAlreadyAdded(studntFromBtch);
            if ((Boolean) CheckStudentAlreadyAdded[0]) {
                JOptionPane.showMessageDialog(this, "Employee is already allocated.", "Already allocated.", JOptionPane.OK_OPTION);
            } else {
                addToAllocateTable();

            }
            PredictItemCount();
            jTextField13.setText("" + roundToTwoDecimal((avgPr + iavg)) / 2);
        }
    }//GEN-LAST:event_ButtonAddSelectedActionPerformed

    private void addToAllocateTable() {
        int SelectedRow = tableEmployee.getSelectedRow();
        try {
            employeeID = tableEmployee.getValueAt(SelectedRow, 0).toString();
            FirstName = tableEmployee.getValueAt(SelectedRow, 1).toString();
            NameWithIni = tableEmployee.getValueAt(SelectedRow, 2).toString();
            callName = tableEmployee.getValueAt(SelectedRow, 3).toString();

            String avg = tableEmployee.getValueAt(SelectedRow, 6).toString();
            iavg = Double.parseDouble(avg);

            model_TableAllocatedEmployees1.addRow(new Object[]{employeeID, FirstName, NameWithIni, callName});
            textNumberOfEmpAllocatedToJob.setText(String.valueOf(model_TableAllocatedEmployees.getRowCount() + model_TableAllocatedEmployees1.getRowCount()));
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void tableAllocatedEmployeeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableAllocatedEmployeeMouseClicked
        if (evt.getClickCount() == 2) {
            int i = tableAllocatedEmployee1.getSelectedRowCount();
            if (i == 1) {
                tableAllocatedEmployeesOfJob();
            } else if (i != 1) {
                JOptionPane.showMessageDialog(this, "Please select a single row.", "Select one row", JOptionPane.OK_OPTION);
            }
        }
    }//GEN-LAST:event_tableAllocatedEmployeeMouseClicked

    private void tableAllocatedEmployeesOfJob() {
        int x = JOptionPane.showConfirmDialog(this, "Are you sure To remove selected employee?", "Remove employee?", JOptionPane.YES_NO_OPTION);
        if (x == JOptionPane.YES_OPTION) {
            int i = tableAllocatedEmployee1.getSelectedRow();
            model_TableAllocatedEmployees1.removeRow(i);
            textNumberOfEmpAllocatedToJob.setText(String.valueOf(model_TableAllocatedEmployees.getRowCount() + model_TableAllocatedEmployees1.getRowCount()));
        }
    }

    private void tableAllocatedEmployeeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tableAllocatedEmployeeKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_DELETE) {
            tableAllocatedEmployeesOfJob();
        }
    }//GEN-LAST:event_tableAllocatedEmployeeKeyPressed

    private void formInternalFrameIconified(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameIconified
        employeeSuggestionForBottleNeck.toFront();
    }//GEN-LAST:event_formInternalFrameIconified

    private void ButtonRemoveSelectedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonRemoveSelectedActionPerformed
        int i = tableAllocatedEmployee1.getSelectedRowCount();
        if (i == 1) {
            tableAllocatedEmployeesOfJob();
        } else if (i != 1) {
            JOptionPane.showMessageDialog(this, "Please select a single row.", "Select one row", JOptionPane.OK_OPTION);
        }
        PredictItemCount();
        jTextField13.setText("" + roundToTwoDecimal((avgPr * 2) - iavg));
    }//GEN-LAST:event_ButtonRemoveSelectedActionPerformed

    private void tableFixedJobsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableFixedJobsMouseClicked
        // int allocateTime, employeeCount;
        fixedJobID = tableFixedJobs.getValueAt(tableFixedJobs.getSelectedRow(), 0).toString();
        Name = tableFixedJobs.getValueAt(tableFixedJobs.getSelectedRow(), 1).toString();
        productLevel = tableFixedJobs.getValueAt(tableFixedJobs.getSelectedRow(), 2).toString();
        productLevelItemCode = tableFixedJobs.getValueAt(tableFixedJobs.getSelectedRow(), 3).toString();
    }//GEN-LAST:event_tableFixedJobsMouseClicked

    private void textNumberOfEmpAllocatedToJobActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textNumberOfEmpAllocatedToJobActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textNumberOfEmpAllocatedToJobActionPerformed

    private void tableAllocatedEmployee1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableAllocatedEmployee1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_tableAllocatedEmployee1MouseClicked

    private void tableAllocatedEmployee1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tableAllocatedEmployee1KeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_tableAllocatedEmployee1KeyPressed

    private void jTextField9MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField9MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField9MouseClicked

    private void jTextField9MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField9MouseMoved
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField9MouseMoved

    private void jTextField13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField13ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField13ActionPerformed

    private void jTextField8MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField8MouseClicked
        int diff = endtm * 60 * 1000;

        int diffMinutes = diff / (60 * 1000) % 60;
        int diffHours = diff / (60 * 60 * 1000) % 24;
        int diffDays = diff / (24 * 60 * 60 * 1000);

        JOptionPane.showMessageDialog(null, diffDays + " days, " + diffHours + " hours, " + diffMinutes + " minutes ");
    }//GEN-LAST:event_jTextField8MouseClicked

    private void jTextField8MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField8MouseMoved
        int diff = endtm * 60 * 1000;

        int diffMinutes = diff / (60 * 1000) % 60;
        int diffHours = diff / (60 * 60 * 1000) % 24;
        int diffDays = diff / (24 * 60 * 60 * 1000);

        JOptionPane.showMessageDialog(null, diffDays + " days, " + diffHours + " hours, " + diffMinutes + " minutes ");
    }//GEN-LAST:event_jTextField8MouseMoved

    private void jTextField7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField7ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField7ActionPerformed

    protected Object[] CheckIfEmpAlreadyAdded(String studntFromBtch) {
        int rowCount = model_TableAllocatedEmployees.getRowCount();
        Object[] data = new Object[2];
        data[0] = false;
        data[1] = -1;

        for (int i = 0; i < rowCount; i++) {
            String studentAllocateToEvent = model_TableAllocatedEmployees.getValueAt(i, 0).toString();
            if (studntFromBtch.equals(studentAllocateToEvent)) {
                data[0] = true;
                data[1] = i;
            }
        }
        return data;
    }

    private void loadDate() {
        String query = "SELECT GETDATE() AS CurrentDateTime";
        String Date;
        try {
            Statement statement = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
            ResultSet resultset = statement.executeQuery(query);

            if (resultset.next()) {
                Date = IndexPage.LabelDate.getText();
                jTextField6.setText(Date);
            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "please contact for support.");
        }
    }

    private void exit() {
        if (employeeSuggestionForBottleNeck != null) {
            employeeSuggestionForBottleNeck = null;
        }
        this.dispose();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonAddSelected;
    private javax.swing.JButton ButtonRemoveSelected;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnSave;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField10;
    private javax.swing.JTextField jTextField11;
    private javax.swing.JTextField jTextField12;
    private javax.swing.JTextField jTextField13;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JTextField jTextField9;
    private javax.swing.JLabel lbl_description10;
    private javax.swing.JLabel lbl_description11;
    private javax.swing.JLabel lbl_description12;
    private javax.swing.JLabel lbl_description13;
    private javax.swing.JLabel lbl_description15;
    private javax.swing.JLabel lbl_description16;
    private javax.swing.JLabel lbl_description17;
    private javax.swing.JLabel lbl_description3;
    private javax.swing.JLabel lbl_description8;
    private javax.swing.JLabel lbl_description9;
    private javax.swing.JLabel lbl_subAccount2;
    private javax.swing.JPanel panel1;
    private javax.swing.JTable tableAllocatedEmployee;
    private javax.swing.JTable tableAllocatedEmployee1;
    private javax.swing.JTable tableEmployee;
    private javax.swing.JTable tableEmployee1;
    private javax.swing.JTable tableFixedJobs;
    private javax.swing.JTextField textFieldJobCode;
    private javax.swing.JTextField textNumberOfEmpAllocatedToJob;
    // End of variables declaration//GEN-END:variables
}
