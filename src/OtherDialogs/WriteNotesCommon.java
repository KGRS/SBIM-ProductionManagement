/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * GRNItemSearch.java
 *
 * Created on Mar 15, 2013, 8:07:57 AM
 */
package OtherDialogs;

import Transactions.MaterialRequisitionNote;
import db.ConnectSql;
import functions.ValidateFields;
import java.awt.HeadlessException;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DecimalFormat;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Ravindu
 */
public class WriteNotesCommon extends javax.swing.JDialog {

    private final DefaultTableModel model_ItemTable;
    private MaterialRequisitionNote materialRequisitionNote = null;
    private final String projectPath = System.getProperty("user.dir");

    /**
     * Creates new form GRNItemSearch
     *
     * @param objectCommonWriteNotes
     */
    public WriteNotesCommon(Object objectCommonWriteNotes) {
        super();
        initComponents();
        model_ItemTable = (DefaultTableModel) TableItem.getModel();
        txtNotes.requestFocus();

        ImageIcon DefaultBackGround = new ImageIcon(projectPath + "/pictures/InternalFrameIcons/DialogForms/notes.png");
        labelIcon.setIcon(DefaultBackGround);

        if (objectCommonWriteNotes instanceof MaterialRequisitionNote) {
            this.materialRequisitionNote = (MaterialRequisitionNote) objectCommonWriteNotes;
            String MRNID = MaterialRequisitionNote.txtMRNID.getText();
            textTransactionID.setText(MRNID);
            LoadDetailsForMaterialRequisitionNote();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        panel1 = new javax.swing.JPanel();
        btnAddToTable = new javax.swing.JButton();
        lbl_subAccount = new javax.swing.JLabel();
        txtNotes = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableItem = new javax.swing.JTable();
        ButtonExit = new javax.swing.JButton();
        textTransactionID = new javax.swing.JTextField();
        buttonSave = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        textAreaSummeryNote = new javax.swing.JTextArea();
        lbl_subAccount1 = new javax.swing.JLabel();
        labelIcon = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Write your notes");
        setAlwaysOnTop(true);
        setModal(true);
        setModalExclusionType(java.awt.Dialog.ModalExclusionType.APPLICATION_EXCLUDE);
        setResizable(false);

        panel1.setBackground(new java.awt.Color(255, 255, 255));
        panel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.TRAILING, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Calibri", 1, 14), new java.awt.Color(153, 153, 153))); // NOI18N
        panel1.setForeground(new java.awt.Color(255, 255, 255));
        panel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnAddToTable.setMnemonic('s');
        btnAddToTable.setText("Add");
        btnAddToTable.setActionCommand("Delete");
        btnAddToTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddToTableActionPerformed(evt);
            }
        });
        panel1.add(btnAddToTable, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 20, 100, -1));

        lbl_subAccount.setForeground(new java.awt.Color(102, 102, 102));
        lbl_subAccount.setText("Your notes (summery)");
        panel1.add(lbl_subAccount, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 330, 120, 20));

        txtNotes.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtNotesKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtNotesKeyReleased(evt);
            }
        });
        panel1.add(txtNotes, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 20, 620, -1));

        TableItem.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Code", "Name", "Quantity", "Notes"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TableItem.getTableHeader().setReorderingAllowed(false);
        TableItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableItemMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(TableItem);
        if (TableItem.getColumnModel().getColumnCount() > 0) {
            TableItem.getColumnModel().getColumn(0).setPreferredWidth(50);
            TableItem.getColumnModel().getColumn(1).setPreferredWidth(250);
            TableItem.getColumnModel().getColumn(2).setPreferredWidth(20);
            TableItem.getColumnModel().getColumn(3).setPreferredWidth(250);
        }

        panel1.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 60, 880, 260));

        ButtonExit.setText("Exit");
        ButtonExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonExitActionPerformed(evt);
            }
        });
        ButtonExit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ButtonExitKeyPressed(evt);
            }
        });
        panel1.add(ButtonExit, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 470, 100, -1));

        textTransactionID.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        textTransactionID.setEnabled(false);
        panel1.add(textTransactionID, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 470, 130, 20));

        buttonSave.setText("Save");
        buttonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSaveActionPerformed(evt);
            }
        });
        panel1.add(buttonSave, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 470, 110, -1));

        textAreaSummeryNote.setColumns(20);
        textAreaSummeryNote.setRows(5);
        textAreaSummeryNote.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                textAreaSummeryNoteKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(textAreaSummeryNote);

        panel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 360, 880, -1));

        lbl_subAccount1.setForeground(new java.awt.Color(102, 102, 102));
        lbl_subAccount1.setText(" Your notes (item wise)");
        panel1.add(lbl_subAccount1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 130, 20));
        panel1.add(labelIcon, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 294, 360, 210));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel1, javax.swing.GroupLayout.PREFERRED_SIZE, 905, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel1, javax.swing.GroupLayout.DEFAULT_SIZE, 509, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void LoadDetailsForMaterialRequisitionNote() {
        try {
            String transactionID = MaterialRequisitionNote.txtMRNID.getText();
            ResultSet reset;
            Statement stmt;
            String query, empty = " ";
            int rowCount = 0;
            query = "SELECT ItemCode,ItemName,Quantity,Notes FROM MRNItems WHERE MRNID = '" + transactionID + "' ORDER BY ItemName";
            stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            reset = stmt.executeQuery(query);

            while (reset.next()) {
                model_ItemTable.addRow(new Object[model_ItemTable.getColumnCount()]);
                TableItem.setValueAt(reset.getString("ItemCode"), rowCount, 0);
                TableItem.setValueAt(reset.getString("ItemName"), rowCount, 1);
                TableItem.setValueAt(reset.getString("Quantity"), rowCount, 2);
                TableItem.setValueAt(empty, rowCount, 3);
                rowCount++;
            }
            reset.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void btnAddToTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddToTableActionPerformed
        int SelectedRowCount = TableItem.getSelectedRowCount();
        int SelectedRow = TableItem.getSelectedRow();
        String notes = txtNotes.getText();
        if (SelectedRowCount == 1 && !notes.equals("")) {
            TableItem.setValueAt(notes, SelectedRow, 3);
        } else if (SelectedRowCount != 1) {
            JOptionPane.showMessageDialog(this, "Please select a single row in table.", "Select row.", JOptionPane.OK_OPTION);
        } else if (notes.equals("")) {
            notes = "No notes";
            TableItem.setValueAt(notes, SelectedRow, 3);
        }
    }//GEN-LAST:event_btnAddToTableActionPerformed

    private void TableItemMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableItemMouseClicked
        txtNotes.selectAll();
        txtNotes.requestFocus();
    }//GEN-LAST:event_TableItemMouseClicked

    private void txtNotesKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNotesKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            btnAddToTable.requestFocus();
        }
    }//GEN-LAST:event_txtNotesKeyPressed

    private void ButtonExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonExitActionPerformed
        this.dispose();
    }//GEN-LAST:event_ButtonExitActionPerformed

    private void ButtonExitKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ButtonExitKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            this.dispose();
        }
    }//GEN-LAST:event_ButtonExitKeyPressed

    private void txtNotesKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNotesKeyReleased
        ValidateFields.CheckForOtherFields(txtNotes);
    }//GEN-LAST:event_txtNotesKeyReleased

    private void buttonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSaveActionPerformed
        int x = JOptionPane.showConfirmDialog(this, "Are you sure to save these notes?", "Save notes?", JOptionPane.YES_NO_OPTION);
        if (x == JOptionPane.YES_OPTION) {
            saveNotes();
        }
    }//GEN-LAST:event_buttonSaveActionPerformed

    private void textAreaSummeryNoteKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textAreaSummeryNoteKeyReleased
        ValidateFields.CheckForAreas(textAreaSummeryNote);
    }//GEN-LAST:event_textAreaSummeryNoteKeyReleased

    private void saveNotes() {
        String ItemCode, notes, summeryNote;
        String transactionID = textTransactionID.getText();
        summeryNote = textAreaSummeryNote.getText();
        int rowCount = TableItem.getRowCount();
        if (this.materialRequisitionNote instanceof MaterialRequisitionNote) {
            try {
                java.sql.Statement stmtMain = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                java.sql.Statement stmtItems = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);

                String mainInsertQuery = "UPDATE MRNmain SET Remarks = '" + summeryNote + "' WHERE MRNID = '" + transactionID + "'";
                stmtMain.execute(mainInsertQuery);
                stmtMain.close();

                for (int i = 0; i < rowCount; i++) {
                    ItemCode = TableItem.getValueAt(i, 0).toString();
                    notes = TableItem.getValueAt(i, 3).toString();

                    String ItemInsertQuery = "UPDATE MRNItems SET Notes = '" + notes + "' WHERE MRNID = '" + transactionID + "' AND ItemCode = '" + ItemCode + "'";
                    stmtItems.execute(ItemInsertQuery);
                }
                stmtItems.close();
                JOptionPane.showMessageDialog(this, "Your notes are successfully saved.");
                this.dispose();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                JOptionPane.showMessageDialog(this, "Please contact for support.");
            } catch (HeadlessException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                JOptionPane.showMessageDialog(this, "Please contact for support.");
            }
        }
    }

    public double roundTwoDecimals(double d) {
        DecimalFormat threeDForm = new DecimalFormat("#.##");
        return Double.valueOf(threeDForm.format(d));
    }
    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonExit;
    private javax.swing.JTable TableItem;
    private javax.swing.JButton btnAddToTable;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton buttonSave;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel labelIcon;
    private javax.swing.JLabel lbl_subAccount;
    private javax.swing.JLabel lbl_subAccount1;
    private javax.swing.JPanel panel1;
    private javax.swing.JTextArea textAreaSummeryNote;
    private javax.swing.JTextField textTransactionID;
    private javax.swing.JTextField txtNotes;
    // End of variables declaration//GEN-END:variables
}
