/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * GRNItemSearch.java
 *
 * Created on Mar 15, 2013, 8:07:57 AM
 */
package OtherDialogs;

import reports.RawItemUsageAndWastageMoniter;
import db.ConnectSql;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DecimalFormat;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Ravindu
 */
public class ViewWastageRowItems extends javax.swing.JDialog {

    private final DefaultTableModel model_ItemTable;
    private RawItemUsageAndWastageMoniter rawItemUsageAndWastageMoniter = null;
    private final String projectPath = System.getProperty("user.dir");

    /**
     * Creates new form GRNItemSearch
     *
     * @param objectCommonWriteNotes
     * @param jobID
     * @param productItemIdByArray
     */
    public ViewWastageRowItems(Object objectCommonWriteNotes, String jobID, String productItemIdByArray) {
        super();
        initComponents();
        model_ItemTable = (DefaultTableModel) TableItem.getModel();

        if (objectCommonWriteNotes instanceof RawItemUsageAndWastageMoniter) {
            this.rawItemUsageAndWastageMoniter = (RawItemUsageAndWastageMoniter) objectCommonWriteNotes;
//            String MRNID = MaterialRequisitionNote.txtMRNID.getText();
            textTransactionID.setText(jobID);
            textProductLevelItemCode.setText(productItemIdByArray);
            LoadDetailsForMaterialRequisitionNote();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        panel1 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableItem = new javax.swing.JTable();
        ButtonExit = new javax.swing.JButton();
        textTransactionID = new javax.swing.JTextField();
        textProductLevelItemCode = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Row item wastage");
        setAlwaysOnTop(true);
        setModal(true);
        setModalExclusionType(java.awt.Dialog.ModalExclusionType.APPLICATION_EXCLUDE);
        setResizable(false);

        panel1.setBackground(new java.awt.Color(255, 255, 255));
        panel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.TRAILING, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Calibri", 1, 14), new java.awt.Color(153, 153, 153))); // NOI18N
        panel1.setForeground(new java.awt.Color(255, 255, 255));
        panel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        TableItem.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Code", "Name", "Unit", "Purchase price", "Quantity", "Amount"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TableItem.getTableHeader().setReorderingAllowed(false);
        TableItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableItemMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(TableItem);
        if (TableItem.getColumnModel().getColumnCount() > 0) {
            TableItem.getColumnModel().getColumn(0).setPreferredWidth(50);
            TableItem.getColumnModel().getColumn(1).setPreferredWidth(250);
            TableItem.getColumnModel().getColumn(4).setPreferredWidth(20);
        }

        panel1.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 30, 880, 290));

        ButtonExit.setText("Exit");
        ButtonExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonExitActionPerformed(evt);
            }
        });
        ButtonExit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ButtonExitKeyPressed(evt);
            }
        });
        panel1.add(ButtonExit, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 340, 100, -1));

        textTransactionID.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        textTransactionID.setEnabled(false);
        panel1.add(textTransactionID, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 340, 130, 20));
        panel1.add(textProductLevelItemCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(489, 340, 140, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel1, javax.swing.GroupLayout.PREFERRED_SIZE, 905, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel1, javax.swing.GroupLayout.PREFERRED_SIZE, 385, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void LoadDetailsForMaterialRequisitionNote() {
        try {
            String transactionID = textTransactionID.getText();
            String productItemIdByArray = textProductLevelItemCode.getText();
            ResultSet reset;
            Statement stmt;
            String query, empty = " ";
            int rowCount = 0;
            double rawItemQtyAsSaved, differenceOfPLItems, calculatedRawItemQty, amount;
            query = "SELECT\n"
                    + "     PLItemDifference.\"JOB_ID\" AS PLItemDifference_JOB_ID,\n"
                    + "     PLItemDifference.\"CHANGE_ITEM_COUNT\" AS PLItemDifference_CHANGE_ITEM_COUNT,\n"
                    + "     Items.\"ItemName\" AS Items_ItemName,\n"
                    + "     Items.\"PurchasePrice\" AS Items_PurchasePrice,\n"
                    + "     JobFixed.\"JOB_FIXED_NAME\" AS JobFixed_JOB_FIXED_NAME,\n"
                    + "     JobFixed.\"PRODUCT_LEVEL_ITEM_CODE\" AS JobFixed_PRODUCT_LEVEL_ITEM_CODE,\n"
                    + "     ProductLevel1RawItems.\"PL1_ITEM_QUANTITY\" AS ProductLevel1RawItems_PL1_ITEM_QUANTITY,\n"
                    + "     ProductLevel1RawItems.\"ItemCode\" AS ProductLevel1RawItems_ItemCode,\n"
                    + "     ProductLevel1RawItems.\"QUANTITY\" AS ProductLevel1RawItems_QUANTITY,\n"
                    + "     Items.\"UnitPurchase\" AS Items_UnitPurchase,\n"
                    + "     JobFinished.\"FIXED_JOB_ID\" AS JobFinished_FIXED_JOB_ID\n"
                    + "FROM\n"
                    + "     \"dbo\".\"JobFixed\" JobFixed INNER JOIN \"dbo\".\"ProductLevel1RawItems\" ProductLevel1RawItems ON JobFixed.\"PRODUCT_LEVEL_ITEM_CODE\" = ProductLevel1RawItems.\"PL1_ITEM_CODE\"\n"
                    + "     INNER JOIN \"dbo\".\"Items\" Items ON ProductLevel1RawItems.\"ItemCode\" = Items.\"ItemCode\"\n"
                    + "     INNER JOIN \"dbo\".\"JobFinished\" JobFinished ON JobFixed.\"JOB_FIXED_ID\" = JobFinished.\"FIXED_JOB_ID\"\n"
                    + "     INNER JOIN \"dbo\".\"PLItemDifference\" PLItemDifference ON JobFinished.\"JOB_ID\" = PLItemDifference.\"JOB_ID\"\n"
                    + "WHERE\n"
                    + "     PLItemDifference.\"JOB_ID\" = '"+transactionID+"'\n"
                    + " AND JobFixed.\"PRODUCT_LEVEL_ITEM_CODE\" = '"+productItemIdByArray+"'";
            stmt = ConnectSql.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            reset = stmt.executeQuery(query);

            while (reset.next()) {
                model_ItemTable.addRow(new Object[model_ItemTable.getColumnCount()]);
                TableItem.setValueAt(reset.getString("ProductLevel1RawItems_ItemCode"), rowCount, 0);
                TableItem.setValueAt(reset.getString("Items_ItemName"), rowCount, 1);
                TableItem.setValueAt(reset.getString("Items_UnitPurchase"), rowCount, 2);
                rawItemQtyAsSaved = reset.getDouble("ProductLevel1RawItems_QUANTITY");
                differenceOfPLItems = reset.getDouble("PLItemDifference_CHANGE_ITEM_COUNT");
                calculatedRawItemQty = rawItemQtyAsSaved * differenceOfPLItems;
                amount = calculatedRawItemQty * reset.getDouble("Items_PurchasePrice");
                TableItem.setValueAt(reset.getDouble("Items_PurchasePrice"), rowCount, 3);
                TableItem.setValueAt(calculatedRawItemQty, rowCount, 4);
                TableItem.setValueAt(amount, rowCount, 5);
                rowCount++;
            }
            reset.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Please contact for support.");
        }
    }

    private void TableItemMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableItemMouseClicked

    }//GEN-LAST:event_TableItemMouseClicked

    private void ButtonExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonExitActionPerformed
        this.dispose();
    }//GEN-LAST:event_ButtonExitActionPerformed

    private void ButtonExitKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ButtonExitKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            this.dispose();
        }
    }//GEN-LAST:event_ButtonExitKeyPressed

    public double roundTwoDecimals(double d) {
        DecimalFormat threeDForm = new DecimalFormat("#.##");
        return Double.valueOf(threeDForm.format(d));
    }
    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonExit;
    private javax.swing.JTable TableItem;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPanel panel1;
    private javax.swing.JTextField textProductLevelItemCode;
    private javax.swing.JTextField textTransactionID;
    // End of variables declaration//GEN-END:variables
}
